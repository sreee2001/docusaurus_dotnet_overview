"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[3016],{4004:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Topics/Security/IdentityServer","title":"IdentityServer","description":"48. Identity Server","source":"@site/docs/Topics/11_Security/48_IdentityServer.md","sourceDirName":"Topics/11_Security","slug":"/Topics/Security/IdentityServer","permalink":"/docusaurus_dotnet_overview/docs/Topics/Security/IdentityServer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":48,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CircuitBreakerPatern","permalink":"/docusaurus_dotnet_overview/docs/Topics/Microservices/CircuitBreakerPatern"},"next":{"title":"OAuthAndOpenIDConnect","permalink":"/docusaurus_dotnet_overview/docs/Topics/Security/OAuthAndOpenIDConnect"}}');var i=r(4848),s=r(8453);const o={},a=void 0,l={},c=[{value:"48. Identity Server",id:"48-identity-server",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage &amp; Setup",id:"usage--setup",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Market Alternatives &amp; Adoption",id:"market-alternatives--adoption",level:3},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros and Cons",id:"pros-and-cons",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Sample Implementation",id:"sample-implementation",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"48-identity-server",children:"48. Identity Server"}),"\n",(0,i.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Identity Server (now Duende Identity Server) is a comprehensive OpenID Connect and OAuth 2.0 framework for .NET applications. It provides centralized authentication and authorization services, enabling single sign-on (SSO) across multiple applications and APIs."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"Duende Identity Server is a certified OpenID Connect and OAuth 2.0 implementation that provides authentication as a service (AaaS) for modern web applications, APIs, and mobile applications. It supports various authentication flows and can act as a Security Token Service (STS)."}),"\n",(0,i.jsx)(n.h3,{id:"usage--setup",children:"Usage & Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Duende Identity Server\r\ndotnet add package Duende.IdentityServer\r\ndotnet add package Duende.IdentityServer.AspNetIdentity\r\ndotnet add package Duende.IdentityServer.EntityFramework\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nusing Duende.IdentityServer;\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add Entity Framework\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n// Add Identity\r\nbuilder.Services.AddIdentity<ApplicationUser, IdentityRole>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n\r\n// Add Identity Server\r\nbuilder.Services.AddIdentityServer(options =>\r\n{\r\n    options.Events.RaiseErrorEvents = true;\r\n    options.Events.RaiseInformationEvents = true;\r\n    options.Events.RaiseFailureEvents = true;\r\n    options.Events.RaiseSuccessEvents = true;\r\n})\r\n.AddInMemoryIdentityResources(Config.IdentityResources)\r\n.AddInMemoryApiScopes(Config.ApiScopes)\r\n.AddInMemoryClients(Config.Clients)\r\n.AddAspNetIdentity<ApplicationUser>()\r\n.AddDeveloperSigningCredential(); // For development only\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseIdentityServer();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single Sign-On (SSO) across multiple applications"}),"\n",(0,i.jsx)(n.li,{children:"Centralized user authentication for microservices"}),"\n",(0,i.jsx)(n.li,{children:"API security and access token management"}),"\n",(0,i.jsx)(n.li,{children:"Third-party application integration"}),"\n",(0,i.jsx)(n.li,{children:"Enterprise identity federation"}),"\n",(0,i.jsx)(n.li,{children:"Mobile app authentication"}),"\n",(0,i.jsx)(n.li,{children:"B2B and B2C identity scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use When:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple applications need shared authentication"}),"\n",(0,i.jsx)(n.li,{children:"Implementing microservices architecture"}),"\n",(0,i.jsx)(n.li,{children:"Requiring enterprise SSO"}),"\n",(0,i.jsx)(n.li,{children:"Need OAuth 2.0/OpenID Connect compliance"}),"\n",(0,i.jsx)(n.li,{children:"Managing API access across applications"}),"\n",(0,i.jsx)(n.li,{children:"Building identity-as-a-service solutions"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Don't Use When:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Single application with simple auth needs"}),"\n",(0,i.jsx)(n.li,{children:"No external integrations required"}),"\n",(0,i.jsx)(n.li,{children:"Very small teams/applications"}),"\n",(0,i.jsx)(n.li,{children:"Extremely performance-sensitive scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Limited infrastructure/maintenance capability"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"market-alternatives--adoption",children:"Market Alternatives & Adoption"}),"\n",(0,i.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Auth0 (SaaS solution)"}),"\n",(0,i.jsx)(n.li,{children:"Azure Active Directory B2C"}),"\n",(0,i.jsx)(n.li,{children:"AWS Cognito"}),"\n",(0,i.jsx)(n.li,{children:"Okta"}),"\n",(0,i.jsx)(n.li,{children:"Keycloak (open source)"}),"\n",(0,i.jsx)(n.li,{children:"Firebase Authentication"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Market Position:"})," Leading on-premises identity solution for .NET ecosystem with strong enterprise adoption."]}),"\n",(0,i.jsx)(n.h3,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Full OAuth 2.0/OpenID Connect compliance"}),"\n",(0,i.jsx)(n.li,{children:"Highly customizable and extensible"}),"\n",(0,i.jsx)(n.li,{children:"Strong security features"}),"\n",(0,i.jsx)(n.li,{children:"Excellent .NET integration"}),"\n",(0,i.jsx)(n.li,{children:"Active community and support"}),"\n",(0,i.jsx)(n.li,{children:"On-premises deployment control"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complex setup and configuration"}),"\n",(0,i.jsx)(n.li,{children:"Requires significant expertise"}),"\n",(0,i.jsx)(n.li,{children:"Higher maintenance overhead"}),"\n",(0,i.jsx)(n.li,{children:"Licensing costs (Duende)"}),"\n",(0,i.jsx)(n.li,{children:"Learning curve for team"}),"\n",(0,i.jsx)(n.li,{children:"Infrastructure requirements"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sample-implementation",children:"Sample Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Config.cs - Identity Server Configuration\r\npublic static class Config\r\n{\r\n    public static IEnumerable<IdentityResource> IdentityResources =>\r\n        new IdentityResource[]\r\n        {\r\n            new IdentityResources.OpenId(),\r\n            new IdentityResources.Profile(),\r\n            new IdentityResources.Email(),\r\n            new IdentityResource("roles", "User roles", new[] { "role" })\r\n        };\r\n\r\n    public static IEnumerable<ApiScope> ApiScopes =>\r\n        new ApiScope[]\r\n        {\r\n            new ApiScope("hotel.api", "Hotel Management API"),\r\n            new ApiScope("booking.api", "Booking API"),\r\n            new ApiScope("admin.api", "Admin API")\r\n        };\r\n\r\n    public static IEnumerable<Client> Clients =>\r\n        new Client[]\r\n        {\r\n            // Interactive ASP.NET Core MVC client\r\n            new Client\r\n            {\r\n                ClientId = "hotel.mvc",\r\n                ClientSecrets = { new Secret("secret".Sha256()) },\r\n\r\n                AllowedGrantTypes = GrantTypes.Code,\r\n\r\n                RedirectUris = { "https://localhost:5001/signin-oidc" },\r\n                PostLogoutRedirectUris = { "https://localhost:5001/signout-callback-oidc" },\r\n\r\n                AllowedScopes = new List<string>\r\n                {\r\n                    IdentityServerConstants.StandardScopes.OpenId,\r\n                    IdentityServerConstants.StandardScopes.Profile,\r\n                    IdentityServerConstants.StandardScopes.Email,\r\n                    "roles",\r\n                    "hotel.api"\r\n                },\r\n\r\n                RequirePkce = true,\r\n                AllowOfflineAccess = true\r\n            },\r\n\r\n            // JavaScript SPA Client\r\n            new Client\r\n            {\r\n                ClientId = "hotel.spa",\r\n                ClientName = "Hotel SPA",\r\n\r\n                AllowedGrantTypes = GrantTypes.Code,\r\n                RequireClientSecret = false,\r\n                RequirePkce = true,\r\n\r\n                RedirectUris = { "https://localhost:3000/callback" },\r\n                PostLogoutRedirectUris = { "https://localhost:3000/" },\r\n                AllowedCorsOrigins = { "https://localhost:3000" },\r\n\r\n                AllowedScopes = new List<string>\r\n                {\r\n                    IdentityServerConstants.StandardScopes.OpenId,\r\n                    IdentityServerConstants.StandardScopes.Profile,\r\n                    IdentityServerConstants.StandardScopes.Email,\r\n                    "hotel.api",\r\n                    "booking.api"\r\n                }\r\n            },\r\n\r\n            // Machine to machine client\r\n            new Client\r\n            {\r\n                ClientId = "hotel.m2m",\r\n                ClientSecrets = { new Secret("secret".Sha256()) },\r\n\r\n                AllowedGrantTypes = GrantTypes.ClientCredentials,\r\n\r\n                AllowedScopes = { "admin.api" }\r\n            }\r\n        };\r\n}\r\n\r\n// Models/ApplicationUser.cs (Extended)\r\npublic class ApplicationUser : IdentityUser\r\n{\r\n    public string FirstName { get; set; }\r\n    public string LastName { get; set; }\r\n    public DateTime DateCreated { get; set; }\r\n    public string Department { get; set; }\r\n    public bool IsActive { get; set; }\r\n}\r\n\r\n// Services/ProfileService.cs - Custom claims\r\npublic class ProfileService : IProfileService\r\n{\r\n    private readonly UserManager<ApplicationUser> _userManager;\r\n    private readonly RoleManager<IdentityRole> _roleManager;\r\n\r\n    public ProfileService(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)\r\n    {\r\n        _userManager = userManager;\r\n        _roleManager = roleManager;\r\n    }\r\n\r\n    public async Task GetProfileDataAsync(ProfileDataRequestContext context)\r\n    {\r\n        var user = await _userManager.GetUserAsync(context.Subject);\r\n        if (user != null)\r\n        {\r\n            var roles = await _userManager.GetRolesAsync(user);\r\n            var claims = new List<Claim>\r\n            {\r\n                new Claim("firstName", user.FirstName ?? ""),\r\n                new Claim("lastName", user.LastName ?? ""),\r\n                new Claim("department", user.Department ?? ""),\r\n                new Claim("email", user.Email ?? "")\r\n            };\r\n\r\n            foreach (var role in roles)\r\n            {\r\n                claims.Add(new Claim("role", role));\r\n            }\r\n\r\n            context.IssuedClaims.AddRange(claims);\r\n        }\r\n    }\r\n\r\n    public async Task IsActiveAsync(IsActiveContext context)\r\n    {\r\n        var user = await _userManager.GetUserAsync(context.Subject);\r\n        context.IsActive = user?.IsActive == true;\r\n    }\r\n}\r\n\r\n// Client Application Configuration (MVC App)\r\n// Program.cs (in client MVC app)\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthentication(options =>\r\n{\r\n    options.DefaultScheme = "Cookies";\r\n    options.DefaultChallengeScheme = "oidc";\r\n})\r\n.AddCookie("Cookies")\r\n.AddOpenIdConnect("oidc", options =>\r\n{\r\n    options.Authority = "https://localhost:5000"; // Identity Server URL\r\n    options.ClientId = "hotel.mvc";\r\n    options.ClientSecret = "secret";\r\n    options.ResponseType = "code";\r\n\r\n    options.SaveTokens = true;\r\n    options.GetClaimsFromUserInfoEndpoint = true;\r\n\r\n    options.Scope.Add("hotel.api");\r\n    options.Scope.Add("roles");\r\n    options.Scope.Add("offline_access");\r\n\r\n    options.ClaimActions.MapJsonKey("role", "role", "role");\r\n    options.TokenValidationParameters.NameClaimType = "name";\r\n    options.TokenValidationParameters.RoleClaimType = "role";\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\n// Controllers/HomeController.cs (in client app)\r\n[Authorize]\r\npublic class HomeController : Controller\r\n{\r\n    private readonly IHttpClientFactory _httpClientFactory;\r\n\r\n    public HomeController(IHttpClientFactory httpClientFactory)\r\n    {\r\n        _httpClientFactory = httpClientFactory;\r\n    }\r\n\r\n    public async Task<IActionResult> CallApi()\r\n    {\r\n        var accessToken = await HttpContext.GetTokenAsync("access_token");\r\n\r\n        var client = _httpClientFactory.CreateClient();\r\n        client.DefaultRequestHeaders.Authorization =\r\n            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);\r\n\r\n        var response = await client.GetStringAsync("https://localhost:6001/api/hotels");\r\n\r\n        ViewBag.Json = response;\r\n        return View();\r\n    }\r\n\r\n    public IActionResult Logout()\r\n    {\r\n        return SignOut("Cookies", "oidc");\r\n    }\r\n}\r\n\r\n// API Configuration (Protected API)\r\n// Program.cs (in API project)\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthentication("Bearer")\r\n    .AddJwtBearer("Bearer", options =>\r\n    {\r\n        options.Authority = "https://localhost:5000";\r\n        options.TokenValidationParameters = new TokenValidationParameters\r\n        {\r\n            ValidateAudience = false\r\n        };\r\n    });\r\n\r\nbuilder.Services.AddAuthorization(options =>\r\n{\r\n    options.AddPolicy("ApiScope", policy =>\r\n    {\r\n        policy.RequireAuthenticatedUser();\r\n        policy.RequireClaim("scope", "hotel.api");\r\n    });\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\n// Controllers/HotelsController.cs (in API)\r\n[ApiController]\r\n[Route("api/[controller]")]\r\n[Authorize("ApiScope")]\r\npublic class HotelsController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    public ActionResult<IEnumerable<object>> Get()\r\n    {\r\n        var claims = User.Claims.Select(c => new { c.Type, c.Value });\r\n\r\n        return Ok(new\r\n        {\r\n            message = "Hello from protected API",\r\n            user = User.Identity.Name,\r\n            claims = claims\r\n        });\r\n    }\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);