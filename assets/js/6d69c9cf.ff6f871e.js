"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[117],{5868:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Topics/WebTechnologies/SignarR","title":"SignalR","description":"Short Introduction","source":"@site/docs/Topics/03_WebTechnologies/17_SignarR.md","sourceDirName":"Topics/03_WebTechnologies","slug":"/Topics/WebTechnologies/signalr","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/signalr","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"signalr","permalink":"/docusaurus_dotnet_overview/docs/tags/signalr"},{"inline":true,"label":"communication","permalink":"/docusaurus_dotnet_overview/docs/tags/communication"},{"inline":true,"label":"bi-directional","permalink":"/docusaurus_dotnet_overview/docs/tags/bi-directional"},{"inline":true,"label":"client","permalink":"/docusaurus_dotnet_overview/docs/tags/client"},{"inline":true,"label":"server","permalink":"/docusaurus_dotnet_overview/docs/tags/server"},{"inline":true,"label":"transport","permalink":"/docusaurus_dotnet_overview/docs/tags/transport"},{"inline":true,"label":"real-time","permalink":"/docusaurus_dotnet_overview/docs/tags/real-time"}],"version":"current","sidebarPosition":17,"frontMatter":{"slug":"signalr","title":"SignalR","tags":["dotnet","core","signalr","communication","bi-directional","client","server","transport","real-time"]},"sidebar":"tutorialSidebar","previous":{"title":"Blazor","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/blazor_pages"},"next":{"title":"Entity Framework Core Advanced","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/entity_framework_core_advanced"}}');var t=r(4848),s=r(8453);const a={slug:"signalr",title:"SignalR",tags:["dotnet","core","signalr","communication","bi-directional","client","server","transport","real-time"]},o="SignalR",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Client-side (JavaScript)",id:"client-side-javascript",level:2},{value:"Blazor SignalR Client",id:"blazor-signalr-client",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use / When Not to Use",id:"when-to-use--when-not-to-use",level:2},{value:"Use SignalR when:",id:"use-signalr-when",level:3},{value:"Consider alternatives when:",id:"consider-alternatives-when",level:3},{value:"Market Alternatives",id:"market-alternatives",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"signalr",children:"SignalR"})}),"\n",(0,t.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsx)(n.p,{children:"SignalR is a real-time communication library that enables bi-directional communication between client and server, automatically choosing the best transport method."}),"\n",(0,t.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsx)(n.p,{children:"ASP.NET Core SignalR is an open-source library that simplifies adding real-time web functionality to apps, enabling server-side code to push content to clients instantly."}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Hub\r\npublic class ChatHub : Hub\r\n{\r\n    public async Task SendMessage(string user, string message)\r\n    {\r\n        await Clients.All.SendAsync("ReceiveMessage", user, message);\r\n    }\r\n\r\n    public async Task JoinGroup(string groupName)\r\n    {\r\n        await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\r\n        await Clients.Group(groupName).SendAsync("UserJoined", $"{Context.UserIdentifier} joined {groupName}");\r\n    }\r\n\r\n    public async Task LeaveGroup(string groupName)\r\n    {\r\n        await Groups.RemoveFromGroupAsync(Context.ConnectionId, groupName);\r\n        await Clients.Group(groupName).SendAsync("UserLeft", $"{Context.UserIdentifier} left {groupName}");\r\n    }\r\n\r\n    public override async Task OnConnectedAsync()\r\n    {\r\n        await Clients.All.SendAsync("UserConnected", Context.UserIdentifier);\r\n        await base.OnConnectedAsync();\r\n    }\r\n\r\n    public override async Task OnDisconnectedAsync(Exception? exception)\r\n    {\r\n        await Clients.All.SendAsync("UserDisconnected", Context.UserIdentifier);\r\n        await base.OnDisconnectedAsync(exception);\r\n    }\r\n}\r\n\r\n// Program.cs\r\nbuilder.Services.AddSignalR();\r\napp.MapHub<ChatHub>("/chathub");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"client-side-javascript",children:"Client-side (JavaScript)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// wwwroot/js/chat.js\r\nconst connection = new signalR.HubConnectionBuilder()\r\n  .withUrl("/chathub")\r\n  .build();\r\n\r\n// Start connection\r\nconnection\r\n  .start()\r\n  .then(function () {\r\n    document.getElementById("sendButton").disabled = false;\r\n  })\r\n  .catch(function (err) {\r\n    console.error(err.toString());\r\n  });\r\n\r\n// Receive messages\r\nconnection.on("ReceiveMessage", function (user, message) {\r\n  const li = document.createElement("li");\r\n  li.textContent = `${user}: ${message}`;\r\n  document.getElementById("messagesList").appendChild(li);\r\n});\r\n\r\n// Send message\r\ndocument\r\n  .getElementById("sendButton")\r\n  .addEventListener("click", function (event) {\r\n    const user = document.getElementById("userInput").value;\r\n    const message = document.getElementById("messageInput").value;\r\n    connection.invoke("SendMessage", user, message).catch(function (err) {\r\n      console.error(err.toString());\r\n    });\r\n    event.preventDefault();\r\n  });\n'})}),"\n",(0,t.jsx)(n.h2,{id:"blazor-signalr-client",children:"Blazor SignalR Client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'@page "/chat"\r\n@using Microsoft.AspNetCore.SignalR.Client\r\n@inject NavigationManager Navigation\r\n@implements IAsyncDisposable\r\n\r\n<div class="form-group">\r\n    <label>\r\n        User:\r\n        <input @bind="userInput" />\r\n    </label>\r\n</div>\r\n<div class="form-group">\r\n    <label>\r\n        Message:\r\n        <input @bind="messageInput" @onkeypress="@(async (e) => { if (e.Key == "Enter") await Send(); })" />\r\n    </label>\r\n</div>\r\n<button @onclick="Send" disabled="@(!IsConnected)">Send</button>\r\n\r\n<hr>\r\n\r\n<ul id="messagesList">\r\n    @foreach (var message in messages)\r\n    {\r\n        <li>@message</li>\r\n    }\r\n</ul>\r\n\r\n@code {\r\n    private HubConnection? hubConnection;\r\n    private List<string> messages = new();\r\n    private string userInput = string.Empty;\r\n    private string messageInput = string.Empty;\r\n\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        hubConnection = new HubConnectionBuilder()\r\n            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))\r\n            .Build();\r\n\r\n        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>\r\n        {\r\n            var encodedMsg = $"{user}: {message}";\r\n            messages.Add(encodedMsg);\r\n            InvokeAsync(StateHasChanged);\r\n        });\r\n\r\n        await hubConnection.StartAsync();\r\n    }\r\n\r\n    private async Task Send()\r\n    {\r\n        if (hubConnection is not null)\r\n        {\r\n            await hubConnection.SendAsync("SendMessage", userInput, messageInput);\r\n            messageInput = string.Empty;\r\n        }\r\n    }\r\n\r\n    public bool IsConnected =>\r\n        hubConnection?.State == HubConnectionState.Connected;\r\n\r\n    public async ValueTask DisposeAsync()\r\n    {\r\n        if (hubConnection is not null)\r\n        {\r\n            await hubConnection.DisposeAsync();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Real-time chat applications"}),"\n",(0,t.jsx)(n.li,{children:"Live dashboards"}),"\n",(0,t.jsx)(n.li,{children:"Gaming applications"}),"\n",(0,t.jsx)(n.li,{children:"Collaborative tools"}),"\n",(0,t.jsx)(n.li,{children:"Live notifications"}),"\n",(0,t.jsx)(n.li,{children:"Stock price updates"}),"\n",(0,t.jsx)(n.li,{children:"Social media feeds"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use--when-not-to-use",children:"When to Use / When Not to Use"}),"\n",(0,t.jsx)(n.h3,{id:"use-signalr-when",children:"Use SignalR when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need real-time communication"}),"\n",(0,t.jsx)(n.li,{children:"Bi-directional data flow required"}),"\n",(0,t.jsx)(n.li,{children:"Building collaborative applications"}),"\n",(0,t.jsx)(n.li,{children:"Live updates are essential"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simple request/response patterns"}),"\n",(0,t.jsx)(n.li,{children:"Batch data processing"}),"\n",(0,t.jsx)(n.li,{children:"One-way communication sufficient"}),"\n",(0,t.jsx)(n.li,{children:"High scalability requirements"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"market-alternatives",children:"Market Alternatives"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Socket.IO (Node.js)"}),"\n",(0,t.jsx)(n.li,{children:"WebSockets (native)"}),"\n",(0,t.jsx)(n.li,{children:"Server-Sent Events (SSE)"}),"\n",(0,t.jsx)(n.li,{children:"gRPC streaming"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);