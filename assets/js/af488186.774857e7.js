"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[2081],{8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>o});var t=n(6540);const a={},i=t.createContext(a);function s(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},9418:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Topics/ContainerizationAndOrchestration/AzureContainerRegistry","title":"Azure Container Registry","description":"Short Introduction","source":"@site/docs/Topics/08_ContainerizationAndOrchestration/39_AzureContainerRegistry.md","sourceDirName":"Topics/08_ContainerizationAndOrchestration","slug":"/Topics/ContainerizationAndOrchestration/azure_container_registry","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_registry","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"containers","permalink":"/docusaurus_dotnet_overview/docs/tags/containers"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"registry","permalink":"/docusaurus_dotnet_overview/docs/tags/registry"},{"inline":true,"label":"acr","permalink":"/docusaurus_dotnet_overview/docs/tags/acr"},{"inline":true,"label":"docker","permalink":"/docusaurus_dotnet_overview/docs/tags/docker"}],"version":"current","sidebarPosition":39,"frontMatter":{"slug":"azure_container_registry","title":"Azure Container Registry","tags":["dotnet","containers","azure","registry","acr","docker"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure Container Apps","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_apps"},"next":{"title":"Azure DevOps","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/azure_devops"}}');var a=n(4848),i=n(8453);const s={slug:"azure_container_registry",title:"Azure Container Registry",tags:["dotnet","containers","azure","registry","acr","docker"]},o="Azure Container Registry",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Create ACR using Azure CLI",id:"create-acr-using-azure-cli",level:3},{value:"Build and Push Images",id:"build-and-push-images",level:3},{value:"ACR Tasks for Automated Builds",id:"acr-tasks-for-automated-builds",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use Azure Container Registry when",id:"use-azure-container-registry-when",level:3},{value:"Consider alternatives when",id:"consider-alternatives-when",level:3},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:2},{value:"Complete ACR Setup with Bicep",id:"complete-acr-setup-with-bicep",level:3},{value:"GitHub Actions with ACR Integration",id:"github-actions-with-acr-integration",level:3},{value:"ACR Integration with Kubernetes",id:"acr-integration-with-kubernetes",level:3},{value:"PowerShell Script for ACR Management",id:"powershell-script-for-acr-management",level:3},{value:"Deployment Commands",id:"deployment-commands",level:3}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"azure-container-registry",children:"Azure Container Registry"})}),"\n",(0,a.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,a.jsx)(r.p,{children:"Azure Container Registry (ACR) is a managed, private Docker registry service based on the open-source Docker Registry 2.0. It provides secure, scalable storage for container images and related artifacts, with built-in security scanning, geo-replication, and integration with Azure services and DevOps pipelines."}),"\n",(0,a.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,a.jsx)(r.p,{children:"Azure Container Registry is a managed, private Docker registry service that allows you to build, store, and manage container images and related artifacts in a private registry for all types of container deployments. It's based on the open-source Docker Registry 2.0."}),"\n",(0,a.jsx)(r.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,a.jsx)(r.h3,{id:"create-acr-using-azure-cli",children:"Create ACR using Azure CLI"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Create resource group\r\naz group create --name rg-hotel-management --location eastus\r\n\r\n# Create Azure Container Registry\r\naz acr create \\\r\n  --resource-group rg-hotel-management \\\r\n  --name hotelmanagementacr \\\r\n  --sku Standard \\\r\n  --admin-enabled true\r\n\r\n# Login to ACR\r\naz acr login --name hotelmanagementacr\r\n\r\n# Get login server\r\nACR_LOGIN_SERVER=$(az acr show --name hotelmanagementacr --query loginServer --output tsv)\r\necho $ACR_LOGIN_SERVER\n"})}),"\n",(0,a.jsx)(r.h3,{id:"build-and-push-images",children:"Build and Push Images"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Build image locally and push\r\ndocker build -t hotelmanagementacr.azurecr.io/hotel-management-api:v1.0.0 .\r\ndocker push hotelmanagementacr.azurecr.io/hotel-management-api:v1.0.0\r\n\r\n# Or use ACR Build (serverless build)\r\naz acr build \\\r\n  --registry hotelmanagementacr \\\r\n  --image hotel-management-api:v1.0.0 \\\r\n  --image hotel-management-api:latest \\\r\n  .\r\n\r\n# Import image from Docker Hub\r\naz acr import \\\r\n  --name hotelmanagementacr \\\r\n  --source mcr.microsoft.com/dotnet/aspnet:8.0 \\\r\n  --image dotnet/aspnet:8.0\n"})}),"\n",(0,a.jsx)(r.h3,{id:"acr-tasks-for-automated-builds",children:"ACR Tasks for Automated Builds"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Create ACR task for automated builds\r\naz acr task create \\\r\n  --registry hotelmanagementacr \\\r\n  --name hotel-api-build-task \\\r\n  --image hotel-management-api:{{.Run.ID}} \\\r\n  --image hotel-management-api:latest \\\r\n  --context https://github.com/yourusername/hotel-management.git \\\r\n  --file Dockerfile \\\r\n  --git-access-token $(cat ~/github-pat.txt) \\\r\n  --branch main\r\n\r\n# Run task manually\r\naz acr task run --registry hotelmanagementacr --name hotel-api-build-task\r\n\r\n# List task runs\r\naz acr task list-runs --registry hotelmanagementacr --output table\n"})}),"\n",(0,a.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Private Container Storage"}),": Secure storage for proprietary container images"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"CI/CD Integration"}),": Automated builds and deployments in DevOps pipelines"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Multi-stage Builds"}),": Complex build scenarios with ACR Tasks"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Security Scanning"}),": Vulnerability assessment of container images"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Geo-replication"}),": Global distribution of container images"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Webhook Integration"}),": Trigger deployments on image updates"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,a.jsx)(r.h3,{id:"use-azure-container-registry-when",children:"Use Azure Container Registry when"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Need private, secure container image storage"}),"\n",(0,a.jsx)(r.li,{children:"Building CI/CD pipelines with Azure services"}),"\n",(0,a.jsx)(r.li,{children:"Require vulnerability scanning and compliance"}),"\n",(0,a.jsx)(r.li,{children:"Need geo-distributed image storage"}),"\n",(0,a.jsx)(r.li,{children:"Working with Azure Kubernetes Service or Container Apps"}),"\n",(0,a.jsx)(r.li,{children:"Managing multiple container images and versions"}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"consider-alternatives-when",children:"Consider alternatives when"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Using public images only (Docker Hub sufficient)"}),"\n",(0,a.jsx)(r.li,{children:"Working primarily with other cloud providers"}),"\n",(0,a.jsx)(r.li,{children:"Very simple, single-container applications"}),"\n",(0,a.jsx)(r.li,{children:"Budget constraints for small projects"}),"\n",(0,a.jsx)(r.li,{children:"No security or compliance requirements"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,a.jsx)(r.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Amazon ECR"}),": AWS Elastic Container Registry"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Google Container Registry"}),": GCP container registry"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Docker Hub"}),": Public and private repositories"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Harbor"}),": Open-source enterprise registry"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"JFrog Artifactory"}),": Universal artifact repository"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"GitLab Container Registry"}),": Integrated with GitLab CI/CD"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"pros",children:"Pros:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Integrated with Azure ecosystem"}),"\n",(0,a.jsx)(r.li,{children:"Built-in security scanning and compliance"}),"\n",(0,a.jsx)(r.li,{children:"Geo-replication capabilities"}),"\n",(0,a.jsx)(r.li,{children:"Serverless builds with ACR Tasks"}),"\n",(0,a.jsx)(r.li,{children:"Azure Active Directory integration"}),"\n",(0,a.jsx)(r.li,{children:"Webhook and event integration"}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"cons",children:"Cons:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Azure-specific (vendor lock-in)"}),"\n",(0,a.jsx)(r.li,{children:"Cost can be higher than alternatives"}),"\n",(0,a.jsx)(r.li,{children:"Limited features in basic tier"}),"\n",(0,a.jsx)(r.li,{children:"Requires Azure expertise"}),"\n",(0,a.jsx)(r.li,{children:"Storage costs for large images"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,a.jsx)(r.h3,{id:"complete-acr-setup-with-bicep",children:"Complete ACR Setup with Bicep"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bicep",children:"// acr-setup.bicep\r\n@description('Location for all resources')\r\nparam location string = resourceGroup().location\r\n\r\n@description('Name of the Azure Container Registry')\r\nparam acrName string = 'hotelmanagementacr'\r\n\r\n@description('SKU for the Azure Container Registry')\r\n@allowed(['Basic', 'Standard', 'Premium'])\r\nparam acrSku string = 'Standard'\r\n\r\n// Azure Container Registry\r\nresource acr 'Microsoft.ContainerRegistry/registries@2023-07-01' = {\r\n  name: acrName\r\n  location: location\r\n  sku: {\r\n    name: acrSku\r\n  }\r\n  properties: {\r\n    adminUserEnabled: true\r\n    policies: {\r\n      quarantinePolicy: {\r\n        status: 'enabled'\r\n      }\r\n      trustPolicy: {\r\n        type: 'Notary'\r\n        status: 'enabled'\r\n      }\r\n      retentionPolicy: {\r\n        days: 30\r\n        status: 'enabled'\r\n      }\r\n    }\r\n    encryption: {\r\n      status: 'disabled'\r\n    }\r\n    dataEndpointEnabled: false\r\n    publicNetworkAccess: 'Enabled'\r\n    networkRuleBypassOptions: 'AzureServices'\r\n  }\r\n}\r\n\r\n// Enable vulnerability scanning (Premium tier only)\r\nresource vulnerabilityAssessment 'Microsoft.Security/assessmentMetadata@2021-06-01' = if (acrSku == 'Premium') {\r\n  name: 'vulnerabilityAssessment'\r\n  properties: {\r\n    displayName: 'Container Registry Vulnerability Assessment'\r\n    description: 'Vulnerability assessment for container images'\r\n    remediationDescription: 'Fix identified vulnerabilities'\r\n    category: 'Compute'\r\n    severity: 'High'\r\n    userImpact: 'High'\r\n    implementationEffort: 'Low'\r\n  }\r\n}\r\n\r\n// Output values\r\noutput acrLoginServer string = acr.properties.loginServer\r\noutput acrName string = acr.name\r\noutput acrId string = acr.id\n"})}),"\n",(0,a.jsx)(r.h3,{id:"github-actions-with-acr-integration",children:"GitHub Actions with ACR Integration"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'# .github/workflows/acr-build-deploy.yml\r\nname: Build and Deploy to ACR\r\n\r\non:\r\n  push:\r\n    branches: [main, develop]\r\n    paths:\r\n      - "src/**"\r\n      - "Dockerfile"\r\n  pull_request:\r\n    branches: [main]\r\n\r\nenv:\r\n  REGISTRY_NAME: hotelmanagementacr\r\n  REGISTRY_URL: hotelmanagementacr.azurecr.io\r\n  REPOSITORY_NAME: hotel-management-api\r\n  RESOURCE_GROUP: rg-hotel-management\r\n\r\njobs:\r\n  build-and-push:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n\r\n      - name: Setup .NET\r\n        uses: actions/setup-dotnet@v3\r\n        with:\r\n          dotnet-version: "8.0.x"\r\n\r\n      - name: Restore dependencies\r\n        run: dotnet restore\r\n\r\n      - name: Build application\r\n        run: dotnet build --no-restore --configuration Release\r\n\r\n      - name: Run tests\r\n        run: dotnet test --no-build --configuration Release --verbosity normal\r\n\r\n      - name: Azure Login\r\n        uses: azure/login@v1\r\n        with:\r\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\r\n\r\n      - name: Build and push to ACR\r\n        run: |\r\n          # Get build number\r\n          BUILD_NUMBER=${{ github.run_number }}\r\n          IMAGE_TAG="v1.0.$BUILD_NUMBER"\r\n\r\n          # Build and push using ACR build\r\n          az acr build \\\r\n            --registry $REGISTRY_NAME \\\r\n            --image $REPOSITORY_NAME:$IMAGE_TAG \\\r\n            --image $REPOSITORY_NAME:latest \\\r\n            --file Dockerfile \\\r\n            .\r\n            \r\n          # Add additional tags\r\n          az acr import \\\r\n            --name $REGISTRY_NAME \\\r\n            --source $REGISTRY_URL/$REPOSITORY_NAME:$IMAGE_TAG \\\r\n            --image $REPOSITORY_NAME:stable \\\r\n            --force\r\n\r\n      - name: Scan image for vulnerabilities\r\n        run: |\r\n          # Wait for image to be available\r\n          sleep 30\r\n\r\n          # Trigger vulnerability scan\r\n          az acr repository show-tags \\\r\n            --name $REGISTRY_NAME \\\r\n            --repository $REPOSITORY_NAME \\\r\n            --output table\r\n\r\n      - name: Clean up old images\r\n        run: |\r\n          # Keep only last 10 images\r\n          az acr repository show-tags \\\r\n            --name $REGISTRY_NAME \\\r\n            --repository $REPOSITORY_NAME \\\r\n            --orderby time_desc \\\r\n            --output tsv \\\r\n            | tail -n +11 \\\r\n            | xargs -I {} az acr repository delete \\\r\n              --name $REGISTRY_NAME \\\r\n              --image $REPOSITORY_NAME:{} \\\r\n              --yes || true\r\n\r\n  security-scan:\r\n    runs-on: ubuntu-latest\r\n    needs: build-and-push\r\n    if: github.event_name == \'push\'\r\n\r\n    steps:\r\n      - name: Azure Login\r\n        uses: azure/login@v1\r\n        with:\r\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\r\n\r\n      - name: Run Trivy vulnerability scanner\r\n        uses: aquasecurity/trivy-action@master\r\n        with:\r\n          image-ref: "${{ env.REGISTRY_URL }}/${{ env.REPOSITORY_NAME }}:latest"\r\n          format: "sarif"\r\n          output: "trivy-results.sarif"\r\n\r\n      - name: Upload Trivy scan results\r\n        uses: github/codeql-action/upload-sarif@v2\r\n        with:\r\n          sarif_file: "trivy-results.sarif"\n'})}),"\n",(0,a.jsx)(r.h3,{id:"acr-integration-with-kubernetes",children:"ACR Integration with Kubernetes"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'# k8s/acr-integration.yaml\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: acr-secret\r\n  namespace: hotel-management\r\ntype: kubernetes.io/dockerconfigjson\r\ndata:\r\n  .dockerconfigjson: <base64-encoded-docker-config>\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: hotel-api\r\n  namespace: hotel-management\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: hotel-api\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: hotel-api\r\n    spec:\r\n      imagePullSecrets:\r\n        - name: acr-secret\r\n      containers:\r\n        - name: hotel-api\r\n          image: hotelmanagementacr.azurecr.io/hotel-management-api:latest\r\n          ports:\r\n            - containerPort: 8080\r\n          env:\r\n            - name: ASPNETCORE_ENVIRONMENT\r\n              value: "Production"\n'})}),"\n",(0,a.jsx)(r.h3,{id:"powershell-script-for-acr-management",children:"PowerShell Script for ACR Management"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-powershell",children:'# acr-management.ps1\r\nparam(\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$RegistryName,\r\n\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$ResourceGroup,\r\n\r\n    [string]$ImageName = "hotel-management-api",\r\n\r\n    [string]$Tag = "latest"\r\n)\r\n\r\n# Function to get ACR credentials\r\nfunction Get-ACRCredentials {\r\n    param($RegistryName)\r\n\r\n    $credentials = az acr credential show --name $RegistryName | ConvertFrom-Json\r\n    return @{\r\n        Username = $credentials.username\r\n        Password = $credentials.passwords[0].value\r\n        LoginServer = "$RegistryName.azurecr.io"\r\n    }\r\n}\r\n\r\n# Function to list images\r\nfunction Get-ACRImages {\r\n    param($RegistryName)\r\n\r\n    Write-Host "Images in registry $RegistryName:"\r\n    $repositories = az acr repository list --name $RegistryName | ConvertFrom-Json\r\n\r\n    foreach ($repo in $repositories) {\r\n        Write-Host "Repository: $repo"\r\n        $tags = az acr repository show-tags --name $RegistryName --repository $repo | ConvertFrom-Json\r\n        foreach ($tag in $tags) {\r\n            $manifest = az acr repository show --name $RegistryName --image "$repo`:$tag" | ConvertFrom-Json\r\n            Write-Host "  Tag: $tag, Created: $($manifest.createdTime), Size: $($manifest.imageSize)"\r\n        }\r\n    }\r\n}\r\n\r\n# Function to clean up old images\r\nfunction Remove-OldACRImages {\r\n    param(\r\n        $RegistryName,\r\n        $Repository,\r\n        [int]$KeepCount = 5\r\n    )\r\n\r\n    Write-Host "Cleaning up old images for $Repository, keeping $KeepCount latest"\r\n\r\n    $tags = az acr repository show-tags --name $RegistryName --repository $Repository --orderby time_desc | ConvertFrom-Json\r\n\r\n    if ($tags.Count -gt $KeepCount) {\r\n        $tagsToDelete = $tags | Select-Object -Skip $KeepCount\r\n\r\n        foreach ($tag in $tagsToDelete) {\r\n            Write-Host "Deleting $Repository`:$tag"\r\n            az acr repository delete --name $RegistryName --image "$Repository`:$tag" --yes\r\n        }\r\n    }\r\n}\r\n\r\n# Main execution\r\ntry {\r\n    Write-Host "Managing ACR: $RegistryName"\r\n\r\n    # Get credentials\r\n    $creds = Get-ACRCredentials -RegistryName $RegistryName\r\n    Write-Host "Login Server: $($creds.LoginServer)"\r\n\r\n    # List current images\r\n    Get-ACRImages -RegistryName $RegistryName\r\n\r\n    # Clean up old images\r\n    Remove-OldACRImages -RegistryName $RegistryName -Repository $ImageName -KeepCount 5\r\n\r\n    Write-Host "ACR management completed successfully"\r\n}\r\ncatch {\r\n    Write-Error "Error managing ACR: $($_.Exception.Message)"\r\n    exit 1\r\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"deployment-commands",children:"Deployment Commands"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:'# Deploy ACR with Bicep\r\naz deployment group create \\\r\n  --resource-group rg-hotel-management \\\r\n  --template-file acr-setup.bicep \\\r\n  --parameters acrName=hotelmanagementacr acrSku=Standard\r\n\r\n# Get ACR credentials for Kubernetes\r\nACR_NAME="hotelmanagementacr"\r\nACR_UNAME=$(az acr credential show -n $ACR_NAME --query="username" -o tsv)\r\nACR_PASSWD=$(az acr credential show -n $ACR_NAME --query="passwords[0].value" -o tsv)\r\n\r\n# Create Docker registry secret in Kubernetes\r\nkubectl create secret docker-registry acr-secret \\\r\n  --namespace=hotel-management \\\r\n  --docker-server=$ACR_NAME.azurecr.io \\\r\n  --docker-username=$ACR_UNAME \\\r\n  --docker-password=$ACR_PASSWD \\\r\n  --docker-email=admin@hotelmanagement.com\r\n\r\n# Test image pull\r\ndocker pull hotelmanagementacr.azurecr.io/hotel-management-api:latest\n'})})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);