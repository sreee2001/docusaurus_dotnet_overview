"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[5925],{2414:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Topics/Testing/24.1_IntegrationTesting","title":"Integration Testing","description":"Integration testing verifies that different components or systems work correctly together. In .NET, this typically involves testing controllers, databases, external services, and the complete request-response pipeline.","source":"@site/docs/Topics/05_Testing/24.1_IntegrationTesting.md","sourceDirName":"Topics/05_Testing","slug":"/Topics/Testing/integration_testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/integration_testing","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"testing","permalink":"/docusaurus_dotnet_overview/docs/tags/testing"},{"inline":true,"label":"unit_testing","permalink":"/docusaurus_dotnet_overview/docs/tags/unit-testing"},{"inline":true,"label":"quality","permalink":"/docusaurus_dotnet_overview/docs/tags/quality"}],"version":"current","frontMatter":{"slug":"integration_testing","title":"Integration Testing","tags":["dotnet","testing","unit_testing","quality"]},"sidebar":"tutorialSidebar","previous":{"title":"Test Driven Development","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/tdd"},"next":{"title":"End to End Testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/end_to_end_testing"}}');var s=t(4848),i=t(8453);const o={slug:"integration_testing",title:"Integration Testing",tags:["dotnet","testing","unit_testing","quality"]},a="Integration Testing",l={},d=[{value:"Official Definition/Standards",id:"official-definitionstandards",level:2},{value:"Setup and Usage (Tools, Packages, Test Runners)",id:"setup-and-usage-tools-packages-test-runners",level:2},{value:"Essential Packages:",id:"essential-packages",level:3},{value:"Test Infrastructure:",id:"test-infrastructure",level:3},{value:"Typical Test Architecture and Patterns",id:"typical-test-architecture-and-patterns",level:2},{value:"Common Patterns:",id:"common-patterns",level:3},{value:"Example Integration Test Code",id:"example-integration-test-code",level:2},{value:"When to Use and When Not to Use",id:"when-to-use-and-when-not-to-use",level:2},{value:"Use Integration Testing when:",id:"use-integration-testing-when",level:3},{value:"Don&#39;t use Integration Testing when:",id:"dont-use-integration-testing-when",level:3},{value:"Pros and Cons and Alternatives",id:"pros-and-cons-and-alternatives",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Alternatives:",id:"alternatives",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"integration-testing",children:"Integration Testing"})}),"\n",(0,s.jsx)(n.p,{children:"Integration testing verifies that different components or systems work correctly together. In .NET, this typically involves testing controllers, databases, external services, and the complete request-response pipeline."}),"\n",(0,s.jsx)(n.h2,{id:"official-definitionstandards",children:"Official Definition/Standards"}),"\n",(0,s.jsx)(n.p,{children:"Integration testing is a software testing technique where individual software modules are combined and tested as a group. In ASP.NET Core, integration tests use the TestHost and WebApplicationFactory to test the entire HTTP request pipeline."}),"\n",(0,s.jsx)(n.h2,{id:"setup-and-usage-tools-packages-test-runners",children:"Setup and Usage (Tools, Packages, Test Runners)"}),"\n",(0,s.jsx)(n.h3,{id:"essential-packages",children:"Essential Packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package Microsoft.AspNetCore.Mvc.Testing\r\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\r\ndotnet add package Microsoft.Extensions.DependencyInjection\r\ndotnet add package Testcontainers  # For real database testing\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-infrastructure",children:"Test Infrastructure:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WebApplicationFactory"}),": Creates a test server for ASP.NET Core applications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TestHost"}),": Hosts the application in-memory for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HttpClient"}),": Makes HTTP requests to the test server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"In-Memory Database"}),": EF Core provider for testing without real database"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"typical-test-architecture-and-patterns",children:"Typical Test Architecture and Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Fixtures"}),": Shared test server setup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom WebApplicationFactory"}),": Override services for testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Seeding"}),": Prepare test data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Containers"}),": Use real databases in Docker"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Client Testing"}),": Test HTTP endpoints end-to-end"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-integration-test-code",children:"Example Integration Test Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Package references:\r\n// <PackageReference Include="Microsoft.AspNetCore.Mvc.Testing" Version="8.0.0" />\r\n// <PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="8.0.0" />\r\n\r\nusing Microsoft.AspNetCore.Mvc.Testing;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.DependencyInjection.Extensions;\r\nusing System.Net.Http.Json;\r\nusing Xunit;\r\nusing FluentAssertions;\r\n\r\n// Test startup configuration\r\npublic class CustomWebApplicationFactory<TStartup> : WebApplicationFactory<TStartup> where TStartup : class\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        builder.ConfigureServices(services =>\r\n        {\r\n            // Remove the real database\r\n            services.RemoveAll(typeof(DbContextOptions<HotelDbContext>));\r\n\r\n            // Add in-memory database\r\n            services.AddDbContext<HotelDbContext>(options =>\r\n            {\r\n                options.UseInMemoryDatabase("TestDatabase");\r\n            });\r\n\r\n            // Build service provider and seed database\r\n            var serviceProvider = services.BuildServiceProvider();\r\n            using var scope = serviceProvider.CreateScope();\r\n            var context = scope.ServiceProvider.GetRequiredService<HotelDbContext>();\r\n\r\n            SeedDatabase(context);\r\n        });\r\n\r\n        builder.UseEnvironment("Testing");\r\n    }\r\n\r\n    private static void SeedDatabase(HotelDbContext context)\r\n    {\r\n        context.Database.EnsureCreated();\r\n\r\n        // Seed test data\r\n        if (!context.Guests.Any())\r\n        {\r\n            context.Guests.AddRange(new[]\r\n            {\r\n                new Guest { Id = 1, FirstName = "John", LastName = "Doe", Email = "john@example.com" },\r\n                new Guest { Id = 2, FirstName = "Jane", LastName = "Smith", Email = "jane@example.com" }\r\n            });\r\n        }\r\n\r\n        if (!context.Rooms.Any())\r\n        {\r\n            context.Rooms.AddRange(new[]\r\n            {\r\n                new Room { Id = 101, RoomNumber = "101", RoomType = "Standard", PricePerNight = 99.99m, IsAvailable = true },\r\n                new Room { Id = 102, RoomNumber = "102", RoomType = "Deluxe", PricePerNight = 149.99m, IsAvailable = true }\r\n            });\r\n        }\r\n\r\n        context.SaveChanges();\r\n    }\r\n}\r\n\r\n// Integration test class\r\npublic class BookingControllerIntegrationTests : IClassFixture<CustomWebApplicationFactory<Program>>\r\n{\r\n    private readonly HttpClient _client;\r\n    private readonly CustomWebApplicationFactory<Program> _factory;\r\n\r\n    public BookingControllerIntegrationTests(CustomWebApplicationFactory<Program> factory)\r\n    {\r\n        _factory = factory;\r\n        _client = factory.CreateClient();\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateBooking_WithValidData_ReturnsCreatedBooking()\r\n    {\r\n        // Arrange\r\n        var createRequest = new CreateBookingRequest\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = 199.98m\r\n        };\r\n\r\n        // Act\r\n        var response = await _client.PostAsJsonAsync("/api/bookings", createRequest);\r\n\r\n        // Assert\r\n        response.Should().HaveStatusCode(HttpStatusCode.Created);\r\n\r\n        var booking = await response.Content.ReadFromJsonAsync<Booking>();\r\n        booking.Should().NotBeNull();\r\n        booking!.GuestId.Should().Be(createRequest.GuestId);\r\n        booking.RoomId.Should().Be(createRequest.RoomId);\r\n        booking.TotalAmount.Should().Be(createRequest.TotalAmount);\r\n\r\n        // Verify location header\r\n        response.Headers.Location.Should().NotBeNull();\r\n        response.Headers.Location!.ToString().Should().Contain($"/api/bookings/{booking.Id}");\r\n    }\r\n\r\n    [Fact]\r\n    public async Task GetBooking_WithExistingId_ReturnsBooking()\r\n    {\r\n        // Arrange - Create a booking first\r\n        var createRequest = new CreateBookingRequest\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = 199.98m\r\n        };\r\n\r\n        var createResponse = await _client.PostAsJsonAsync("/api/bookings", createRequest);\r\n        var createdBooking = await createResponse.Content.ReadFromJsonAsync<Booking>();\r\n\r\n        // Act\r\n        var getResponse = await _client.GetAsync($"/api/bookings/{createdBooking!.Id}");\r\n\r\n        // Assert\r\n        getResponse.Should().HaveStatusCode(HttpStatusCode.OK);\r\n\r\n        var retrievedBooking = await getResponse.Content.ReadFromJsonAsync<Booking>();\r\n        retrievedBooking.Should().NotBeNull();\r\n        retrievedBooking!.Id.Should().Be(createdBooking.Id);\r\n        retrievedBooking.GuestId.Should().Be(createRequest.GuestId);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task GetBooking_WithNonExistentId_ReturnsNotFound()\r\n    {\r\n        // Act\r\n        var response = await _client.GetAsync("/api/bookings/99999");\r\n\r\n        // Assert\r\n        response.Should().HaveStatusCode(HttpStatusCode.NotFound);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateBooking_WithInvalidData_ReturnsBadRequest()\r\n    {\r\n        // Arrange\r\n        var invalidRequest = new CreateBookingRequest\r\n        {\r\n            GuestId = 999, // Non-existent guest\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(3),\r\n            CheckOutDate = DateTime.Today.AddDays(1), // Invalid dates\r\n            TotalAmount = -100m // Invalid amount\r\n        };\r\n\r\n        // Act\r\n        var response = await _client.PostAsJsonAsync("/api/bookings", invalidRequest);\r\n\r\n        // Assert\r\n        response.Should().HaveStatusCode(HttpStatusCode.BadRequest);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task GetAllBookings_ReturnsBookingsList()\r\n    {\r\n        // Arrange - Create multiple bookings\r\n        var bookingRequests = new[]\r\n        {\r\n            new CreateBookingRequest\r\n            {\r\n                GuestId = 1,\r\n                RoomId = 101,\r\n                CheckInDate = DateTime.Today.AddDays(1),\r\n                CheckOutDate = DateTime.Today.AddDays(2),\r\n                TotalAmount = 99.99m\r\n            },\r\n            new CreateBookingRequest\r\n            {\r\n                GuestId = 2,\r\n                RoomId = 102,\r\n                CheckInDate = DateTime.Today.AddDays(5),\r\n                CheckOutDate = DateTime.Today.AddDays(7),\r\n                TotalAmount = 299.98m\r\n            }\r\n        };\r\n\r\n        foreach (var request in bookingRequests)\r\n        {\r\n            await _client.PostAsJsonAsync("/api/bookings", request);\r\n        }\r\n\r\n        // Act\r\n        var response = await _client.GetAsync("/api/bookings");\r\n\r\n        // Assert\r\n        response.Should().HaveStatusCode(HttpStatusCode.OK);\r\n\r\n        var bookings = await response.Content.ReadFromJsonAsync<List<Booking>>();\r\n        bookings.Should().NotBeNull();\r\n        bookings!.Should().HaveCountGreaterOrEqualTo(2);\r\n    }\r\n}\r\n\r\n// Database integration test with real database using TestContainers\r\npublic class BookingRepositoryIntegrationTests : IAsyncLifetime\r\n{\r\n    private readonly SqlServerContainer _sqlContainer;\r\n    private HotelDbContext _context = null!;\r\n\r\n    public BookingRepositoryIntegrationTests()\r\n    {\r\n        _sqlContainer = new SqlServerBuilder()\r\n            .WithImage("mcr.microsoft.com/mssql/server:2022-latest")\r\n            .WithPassword("YourStrong!Passw0rd")\r\n            .Build();\r\n    }\r\n\r\n    public async Task InitializeAsync()\r\n    {\r\n        await _sqlContainer.StartAsync();\r\n\r\n        var connectionString = _sqlContainer.GetConnectionString();\r\n        var options = new DbContextOptionsBuilder<HotelDbContext>()\r\n            .UseSqlServer(connectionString)\r\n            .Options;\r\n\r\n        _context = new HotelDbContext(options);\r\n        await _context.Database.EnsureCreatedAsync();\r\n\r\n        // Seed test data\r\n        await SeedTestDataAsync();\r\n    }\r\n\r\n    public async Task DisposeAsync()\r\n    {\r\n        await _context.DisposeAsync();\r\n        await _sqlContainer.DisposeAsync();\r\n    }\r\n\r\n    private async Task SeedTestDataAsync()\r\n    {\r\n        _context.Guests.Add(new Guest { FirstName = "Test", LastName = "User", Email = "test@example.com" });\r\n        _context.Rooms.Add(new Room { RoomNumber = "201", RoomType = "Suite", PricePerNight = 199.99m, IsAvailable = true });\r\n        await _context.SaveChangesAsync();\r\n    }\r\n\r\n    [Fact]\r\n    public async Task AddBooking_WithValidData_SavesToDatabase()\r\n    {\r\n        // Arrange\r\n        var repository = new BookingRepository(_context);\r\n        var booking = new Booking\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 1,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = 399.98m\r\n        };\r\n\r\n        // Act\r\n        var result = await repository.AddAsync(booking);\r\n\r\n        // Assert\r\n        result.Should().NotBeNull();\r\n        result.Id.Should().BeGreaterThan(0);\r\n\r\n        // Verify in database\r\n        var savedBooking = await _context.Bookings.FindAsync(result.Id);\r\n        savedBooking.Should().NotBeNull();\r\n        savedBooking!.TotalAmount.Should().Be(399.98m);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-and-when-not-to-use",children:"When to Use and When Not to Use"}),"\n",(0,s.jsx)(n.h3,{id:"use-integration-testing-when",children:"Use Integration Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Testing API endpoints and controllers"}),"\n",(0,s.jsx)(n.li,{children:"Verifying database operations and queries"}),"\n",(0,s.jsx)(n.li,{children:"Testing authentication and authorization"}),"\n",(0,s.jsx)(n.li,{children:"Validating request/response serialization"}),"\n",(0,s.jsx)(n.li,{children:"Testing middleware pipeline"}),"\n",(0,s.jsx)(n.li,{children:"Verifying cross-component interactions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dont-use-integration-testing-when",children:"Don't use Integration Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Testing pure business logic (use unit tests)"}),"\n",(0,s.jsx)(n.li,{children:"Simple validation logic"}),"\n",(0,s.jsx)(n.li,{children:"Performance-critical test suites"}),"\n",(0,s.jsx)(n.li,{children:"Testing external service integrations (use contract tests)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons-and-alternatives",children:"Pros and Cons and Alternatives"}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tests realistic scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Catches integration issues"}),"\n",(0,s.jsx)(n.li,{children:"Validates entire request pipeline"}),"\n",(0,s.jsx)(n.li,{children:"Tests actual database interactions"}),"\n",(0,s.jsx)(n.li,{children:"Provides confidence in deployments"}),"\n",(0,s.jsx)(n.li,{children:"Tests serialization/deserialization"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Slower execution than unit tests"}),"\n",(0,s.jsx)(n.li,{children:"More complex setup and teardown"}),"\n",(0,s.jsx)(n.li,{children:"Harder to isolate failures"}),"\n",(0,s.jsx)(n.li,{children:"Database state management complexity"}),"\n",(0,s.jsx)(n.li,{children:"Resource intensive"}),"\n",(0,s.jsx)(n.li,{children:"Can be flaky due to external dependencies"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contract testing (Pact)"}),"\n",(0,s.jsx)(n.li,{children:"Component testing"}),"\n",(0,s.jsx)(n.li,{children:"End-to-end testing"}),"\n",(0,s.jsx)(n.li,{children:"Database unit tests"}),"\n",(0,s.jsx)(n.li,{children:"API testing tools (Postman, Newman)"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);