"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[5315],{6051:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Topics/DataAccessAndPersistence/Dapper","title":"Dapper","description":"Short Introduction","source":"@site/docs/Topics/04_DataAccessAndPersistence/19_Dapper.md","sourceDirName":"Topics/04_DataAccessAndPersistence","slug":"/Topics/DataAccessAndPersistence/dapper","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/dapper","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"dapper","permalink":"/docusaurus_dotnet_overview/docs/tags/dapper"},{"inline":true,"label":"database","permalink":"/docusaurus_dotnet_overview/docs/tags/database"},{"inline":true,"label":"persistance","permalink":"/docusaurus_dotnet_overview/docs/tags/persistance"},{"inline":true,"label":"orm","permalink":"/docusaurus_dotnet_overview/docs/tags/orm"}],"version":"current","sidebarPosition":19,"frontMatter":{"slug":"dapper","title":"Dapper","tags":["dotnet","core","dapper","database","persistance","orm"]},"sidebar":"tutorialSidebar","previous":{"title":"Entity Framework Core Advanced","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/entity_framework_core_advanced"},"next":{"title":"ADO.NET","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/ado_net"}}');var t=r(4848),i=r(8453);const a={slug:"dapper",title:"Dapper",tags:["dotnet","core","dapper","database","persistance","orm"]},c="Dapper",o={},l=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use Dapper when:",id:"use-dapper-when",level:3},{value:"Don&#39;t use Dapper when:",id:"dont-use-dapper-when",level:3},{value:"Market Alternatives and Market Adoption",id:"market-alternatives-and-market-adoption",level:2},{value:"Market Position:",id:"market-position",level:3},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Sample Usage 1",id:"sample-usage-1",level:2},{value:"Sample Usage 2",id:"sample-usage-2",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dapper",children:"Dapper"})}),"\n",(0,t.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Dapper is a lightweight, fast, and efficient micro-ORM (Object-Relational Mapping) for .NET applications. Created by Stack Overflow team, it bridges the gap between raw ADO.NET and full-featured ORMs like Entity Framework Core."}),"\n",(0,t.jsx)(n.p,{children:"Dapper is a simple object mapper for .NET that provides a fast, lightweight alternative to Entity Framework. It bridges the gap between raw ADO.NET and full ORMs by offering simple object mapping capabilities without the complexity of change tracking or lazy loading."}),"\n",(0,t.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsxs)(n.p,{children:["Dapper is a micro-ORM for .NET that extends ",(0,t.jsx)(n.code,{children:"IDbConnection"})," with high-performance methods for executing SQL commands and mapping results to strongly-typed objects. It is designed to be fast, lightweight, and close to the metal, focusing on speed and simplicity rather than feature completeness."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Dapper\r\ndotnet add package Dapper\r\ndotnet add package Microsoft.Data.SqlClient\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nusing Dapper;\r\nusing Microsoft.Data.SqlClient;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddScoped<IDbConnection>(_ =>\r\n    new SqlConnection(builder.Configuration.GetConnectionString("DefaultConnection")));\r\nbuilder.Services.AddScoped<IUserRepository, UserRepository>();\r\n\r\nvar app = builder.Build();\n'})}),"\n",(0,t.jsx)(n.p,{children:"Install via NuGet package manager:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet add package Dapper\n"})}),"\n",(0,t.jsx)(n.p,{children:"Basic setup requires a database connection and SQL commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System.Data.SqlClient;\r\nusing Dapper;\r\n\r\n// Connection string configuration\r\nvar connectionString = "Server=localhost;Database=HotelDB;Integrated Security=true;";\r\nusing var connection = new SqlConnection(connectionString);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"High-performance data access scenarios (database)"}),"\n",(0,t.jsx)(n.li,{children:"Legacy database integration with complex stored procedures"}),"\n",(0,t.jsx)(n.li,{children:"Microservices requiring lightweight data access and minimal dependencies"}),"\n",(0,t.jsx)(n.li,{children:"Applications needing fine-grained SQL control"}),"\n",(0,t.jsx)(n.li,{children:"Read-heavy operations with custom queries"}),"\n",(0,t.jsx)(n.li,{children:"Data migration and ETL processes"}),"\n",(0,t.jsx)(n.li,{children:"Bulk data operations"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,t.jsx)(n.h3,{id:"use-dapper-when",children:"Use Dapper when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Performance is critical and you need speed close to raw ADO.NET"}),"\n",(0,t.jsx)(n.li,{children:"Minimal ORM overhead required"}),"\n",(0,t.jsx)(n.li,{children:"Working with existing databases with complex schemas"}),"\n",(0,t.jsx)(n.li,{children:"Team has strong SQL expertise"}),"\n",(0,t.jsx)(n.li,{children:"Need direct SQL control"}),"\n",(0,t.jsx)(n.li,{children:"Need to execute stored procedures or complex queries that are hard to express in LINQ"}),"\n",(0,t.jsx)(n.li,{children:"Building read-heavy applications"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dont-use-dapper-when",children:"Don't use Dapper when:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Rapid development is prioritized over performance"}),"\n",(0,t.jsx)(n.li,{children:"Team lacks SQL expertise"}),"\n",(0,t.jsx)(n.li,{children:"Need advanced ORM features (change tracking, lazy loading)"}),"\n",(0,t.jsx)(n.li,{children:"Prefer strongly-typed LINQ queries"}),"\n",(0,t.jsx)(n.li,{children:"Building CRUD-heavy applications"}),"\n",(0,t.jsx)(n.li,{children:"Want automatic database schema migrations"}),"\n",(0,t.jsx)(n.li,{children:"Complex domain models with relationships"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"market-alternatives-and-market-adoption",children:"Market Alternatives and Market Adoption"}),"\n",(0,t.jsx)(n.h3,{id:"market-position",children:"Market Position:"}),"\n",(0,t.jsx)(n.p,{children:"Widely adopted in performance-critical applications, especially at Stack Overflow, and popular in enterprise environments.\r\nDapper strikes a balance between EF Core's convenience and ADO.NET's performance."}),"\n",(0,t.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Entity Framework Core (full-featured ORM)"}),"\n",(0,t.jsx)(n.li,{children:"NHibernate (mature ORM)"}),"\n",(0,t.jsx)(n.li,{children:"PetaPoco (micro-ORM)"}),"\n",(0,t.jsx)(n.li,{children:"Massive (dynamic micro-ORM)"}),"\n",(0,t.jsx)(n.li,{children:"Raw ADO.NET (maximum control)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Excellent performance (close to raw ADO.NET)"}),"\n",(0,t.jsx)(n.li,{children:"Simple learning curve"}),"\n",(0,t.jsx)(n.li,{children:"Works with any database, Supports multiple database providers"}),"\n",(0,t.jsx)(n.li,{children:"Great for existing SQL code, No configuration required"}),"\n",(0,t.jsx)(n.li,{children:"Supports stored procedures well"}),"\n",(0,t.jsx)(n.li,{children:"Flexible parameter binding"}),"\n",(0,t.jsx)(n.li,{children:"Lightweight footprint"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No change tracking"}),"\n",(0,t.jsx)(n.li,{children:"Manual SQL writing required"}),"\n",(0,t.jsx)(n.li,{children:"No lazy loading"}),"\n",(0,t.jsx)(n.li,{children:"Limited LINQ support"}),"\n",(0,t.jsx)(n.li,{children:"No automatic migrations"}),"\n",(0,t.jsx)(n.li,{children:"Requires SQL expertise"}),"\n",(0,t.jsx)(n.li,{children:"No automatic relationship handling"}),"\n",(0,t.jsx)(n.li,{children:"Less productivity for complex domains"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sample-usage-1",children:"Sample Usage 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Package reference: <PackageReference Include="Dapper" Version="2.1.24" />\r\nusing System.Data.SqlClient;\r\nusing Dapper;\r\n\r\n// Models\r\npublic class Guest\r\n{\r\n    public int Id { get; set; }\r\n    public string FirstName { get; set; } = string.Empty;\r\n    public string LastName { get; set; } = string.Empty;\r\n    public string Email { get; set; } = string.Empty;\r\n    public DateTime CreatedAt { get; set; }\r\n}\r\n\r\npublic class GuestService\r\n{\r\n    private readonly string _connectionString;\r\n\r\n    public GuestService(string connectionString)\r\n    {\r\n        _connectionString = connectionString;\r\n    }\r\n\r\n    // Query single record\r\n    public async Task<Guest?> GetGuestByIdAsync(int id)\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        var sql = "SELECT Id, FirstName, LastName, Email, CreatedAt FROM Guests WHERE Id = @Id";\r\n        return await connection.QuerySingleOrDefaultAsync<Guest>(sql, new { Id = id });\r\n    }\r\n\r\n    // Query multiple records\r\n    public async Task<IEnumerable<Guest>> GetAllGuestsAsync()\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        var sql = "SELECT Id, FirstName, LastName, Email, CreatedAt FROM Guests ORDER BY LastName";\r\n        return await connection.QueryAsync<Guest>(sql);\r\n    }\r\n\r\n    // Insert record\r\n    public async Task<int> CreateGuestAsync(Guest guest)\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        var sql = @"INSERT INTO Guests (FirstName, LastName, Email, CreatedAt)\r\n                   VALUES (@FirstName, @LastName, @Email, @CreatedAt);\r\n                   SELECT CAST(SCOPE_IDENTITY() as int);";\r\n\r\n        return await connection.QuerySingleAsync<int>(sql, guest);\r\n    }\r\n\r\n    // Update record\r\n    public async Task<bool> UpdateGuestAsync(Guest guest)\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        var sql = @"UPDATE Guests\r\n                   SET FirstName = @FirstName, LastName = @LastName, Email = @Email\r\n                   WHERE Id = @Id";\r\n\r\n        var rowsAffected = await connection.ExecuteAsync(sql, guest);\r\n        return rowsAffected > 0;\r\n    }\r\n\r\n    // Delete record\r\n    public async Task<bool> DeleteGuestAsync(int id)\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        var sql = "DELETE FROM Guests WHERE Id = @Id";\r\n        var rowsAffected = await connection.ExecuteAsync(sql, new { Id = id });\r\n        return rowsAffected > 0;\r\n    }\r\n\r\n    // Stored procedure example\r\n    public async Task<IEnumerable<Guest>> GetGuestsByDateRangeAsync(DateTime startDate, DateTime endDate)\r\n    {\r\n        using var connection = new SqlConnection(_connectionString);\r\n        return await connection.QueryAsync<Guest>(\r\n            "sp_GetGuestsByDateRange",\r\n            new { StartDate = startDate, EndDate = endDate },\r\n            commandType: System.Data.CommandType.StoredProcedure);\r\n    }\r\n}\r\n\r\n// Usage in Program.cs or controller\r\nvar connectionString = "Server=localhost;Database=HotelDB;Integrated Security=true;";\r\nvar guestService = new GuestService(connectionString);\r\n\r\n// Create a new guest\r\nvar newGuest = new Guest\r\n{\r\n    FirstName = "John",\r\n    LastName = "Doe",\r\n    Email = "john.doe@email.com",\r\n    CreatedAt = DateTime.UtcNow\r\n};\r\n\r\nvar guestId = await guestService.CreateGuestAsync(newGuest);\r\nvar retrievedGuest = await guestService.GetGuestByIdAsync(guestId);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sample-usage-2",children:"Sample Usage 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Models/User.cs\r\npublic class User\r\n{\r\n    public int Id { get; set; }\r\n    public string Email { get; set; }\r\n    public string FirstName { get; set; }\r\n    public string LastName { get; set; }\r\n    public DateTime CreatedAt { get; set; }\r\n    public bool IsActive { get; set; }\r\n}\r\n\r\n// Repositories/IUserRepository.cs\r\npublic interface IUserRepository\r\n{\r\n    Task<IEnumerable<User>> GetAllUsersAsync();\r\n    Task<User?> GetUserByIdAsync(int id);\r\n    Task<User?> GetUserByEmailAsync(string email);\r\n    Task<int> CreateUserAsync(User user);\r\n    Task<bool> UpdateUserAsync(User user);\r\n    Task<bool> DeleteUserAsync(int id);\r\n    Task<IEnumerable<User>> SearchUsersAsync(string searchTerm);\r\n}\r\n\r\n// Repositories/UserRepository.cs\r\nusing Dapper;\r\nusing System.Data;\r\n\r\npublic class UserRepository : IUserRepository\r\n{\r\n    private readonly IDbConnection _connection;\r\n\r\n    public UserRepository(IDbConnection connection)\r\n    {\r\n        _connection = connection;\r\n    }\r\n\r\n    public async Task<IEnumerable<User>> GetAllUsersAsync()\r\n    {\r\n        const string sql = @"\r\n            SELECT Id, Email, FirstName, LastName, CreatedAt, IsActive\r\n            FROM Users\r\n            WHERE IsActive = 1\r\n            ORDER BY LastName, FirstName";\r\n\r\n        return await _connection.QueryAsync<User>(sql);\r\n    }\r\n\r\n    public async Task<User?> GetUserByIdAsync(int id)\r\n    {\r\n        const string sql = @"\r\n            SELECT Id, Email, FirstName, LastName, CreatedAt, IsActive\r\n            FROM Users\r\n            WHERE Id = @Id";\r\n\r\n        return await _connection.QueryFirstOrDefaultAsync<User>(sql, new { Id = id });\r\n    }\r\n\r\n    public async Task<User?> GetUserByEmailAsync(string email)\r\n    {\r\n        const string sql = @"\r\n            SELECT Id, Email, FirstName, LastName, CreatedAt, IsActive\r\n            FROM Users\r\n            WHERE Email = @Email AND IsActive = 1";\r\n\r\n        return await _connection.QueryFirstOrDefaultAsync<User>(sql, new { Email = email });\r\n    }\r\n\r\n    public async Task<int> CreateUserAsync(User user)\r\n    {\r\n        const string sql = @"\r\n            INSERT INTO Users (Email, FirstName, LastName, CreatedAt, IsActive)\r\n            VALUES (@Email, @FirstName, @LastName, @CreatedAt, @IsActive);\r\n            SELECT CAST(SCOPE_IDENTITY() as int);";\r\n\r\n        return await _connection.QuerySingleAsync<int>(sql, user);\r\n    }\r\n\r\n    public async Task<bool> UpdateUserAsync(User user)\r\n    {\r\n        const string sql = @"\r\n            UPDATE Users\r\n            SET Email = @Email,\r\n                FirstName = @FirstName,\r\n                LastName = @LastName,\r\n                IsActive = @IsActive\r\n            WHERE Id = @Id";\r\n\r\n        var rowsAffected = await _connection.ExecuteAsync(sql, user);\r\n        return rowsAffected > 0;\r\n    }\r\n\r\n    public async Task<bool> DeleteUserAsync(int id)\r\n    {\r\n        const string sql = "UPDATE Users SET IsActive = 0 WHERE Id = @Id";\r\n        var rowsAffected = await _connection.ExecuteAsync(sql, new { Id = id });\r\n        return rowsAffected > 0;\r\n    }\r\n\r\n    public async Task<IEnumerable<User>> SearchUsersAsync(string searchTerm)\r\n    {\r\n        const string sql = @"\r\n            SELECT Id, Email, FirstName, LastName, CreatedAt, IsActive\r\n            FROM Users\r\n            WHERE IsActive = 1\r\n                AND (FirstName LIKE @SearchTerm\r\n                     OR LastName LIKE @SearchTerm\r\n                     OR Email LIKE @SearchTerm)\r\n            ORDER BY LastName, FirstName";\r\n\r\n        return await _connection.QueryAsync<User>(sql,\r\n            new { SearchTerm = $"%{searchTerm}%" });\r\n    }\r\n}\r\n\r\n// Controllers/UsersController.cs\r\n[ApiController]\r\n[Route("api/[controller]")]\r\npublic class UsersController : ControllerBase\r\n{\r\n    private readonly IUserRepository _userRepository;\r\n\r\n    public UsersController(IUserRepository userRepository)\r\n    {\r\n        _userRepository = userRepository;\r\n    }\r\n\r\n    [HttpGet]\r\n    public async Task<ActionResult<IEnumerable<User>>> GetUsers()\r\n    {\r\n        var users = await _userRepository.GetAllUsersAsync();\r\n        return Ok(users);\r\n    }\r\n\r\n    [HttpGet("{id}")]\r\n    public async Task<ActionResult<User>> GetUser(int id)\r\n    {\r\n        var user = await _userRepository.GetUserByIdAsync(id);\r\n        if (user == null)\r\n            return NotFound();\r\n\r\n        return Ok(user);\r\n    }\r\n\r\n    [HttpPost]\r\n    public async Task<ActionResult<User>> CreateUser(User user)\r\n    {\r\n        user.CreatedAt = DateTime.UtcNow;\r\n        user.IsActive = true;\r\n\r\n        var id = await _userRepository.CreateUserAsync(user);\r\n        user.Id = id;\r\n\r\n        return CreatedAtAction(nameof(GetUser), new { id }, user);\r\n    }\r\n\r\n    [HttpPut("{id}")]\r\n    public async Task<IActionResult> UpdateUser(int id, User user)\r\n    {\r\n        if (id != user.Id)\r\n            return BadRequest();\r\n\r\n        var success = await _userRepository.UpdateUserAsync(user);\r\n        if (!success)\r\n            return NotFound();\r\n\r\n        return NoContent();\r\n    }\r\n\r\n    [HttpDelete("{id}")]\r\n    public async Task<IActionResult> DeleteUser(int id)\r\n    {\r\n        var success = await _userRepository.DeleteUserAsync(id);\r\n        if (!success)\r\n            return NotFound();\r\n\r\n        return NoContent();\r\n    }\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);