"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[7665],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},9609:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Topics/Security/Https_and_TLS","title":"Https_and_TLS","description":"51. HTTPS & TLS","source":"@site/docs/Topics/11_Security/51_Https_and_TLS.md","sourceDirName":"Topics/11_Security","slug":"/Topics/Security/Https_and_TLS","permalink":"/docusaurus_dotnet_overview/docs/Topics/Security/Https_and_TLS","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":51,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JWTTokens","permalink":"/docusaurus_dotnet_overview/docs/Topics/Security/JWTTokens"},"next":{"title":"gRPC","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/gRPC"}}');var i=r(4848),s=r(8453);const o={},c=void 0,a={},l=[{value:"51. HTTPS &amp; TLS",id:"51-https--tls",level:2},{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Use Cases",id:"use-cases",level:3},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:3},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"51-https--tls",children:"51. HTTPS & TLS"}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"HTTPS (HTTP Secure) and TLS (Transport Layer Security) provide encrypted communication between clients and servers. In .NET Core applications, HTTPS is essential for secure data transmission, authentication, and meeting compliance requirements."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"HTTPS is HTTP over TLS/SSL, providing encryption, data integrity, and authentication. TLS is the cryptographic protocol that secures the connection between client and server, replacing the older SSL protocol."}),"\n",(0,i.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Basic HTTPS Configuration in Program.cs:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var builder = WebApplication.CreateBuilder(args);\r\n\r\n// Configure HTTPS redirection\r\nbuilder.Services.AddHttpsRedirection(options =>\r\n{\r\n    options.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect;\r\n    options.HttpsPort = 5001;\r\n});\r\n\r\n// Configure HSTS (HTTP Strict Transport Security)\r\nbuilder.Services.AddHsts(options =>\r\n{\r\n    options.Preload = true;\r\n    options.IncludeSubDomains = true;\r\n    options.MaxAge = TimeSpan.FromDays(365);\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\n// Use HTTPS redirection\r\nif (!app.Environment.IsDevelopment())\r\n{\r\n    app.UseHsts();\r\n}\r\n\r\napp.UseHttpsRedirection();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Custom Certificate Configuration:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs - Custom certificate\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.WebHost.ConfigureKestrel(options =>\r\n{\r\n    options.Listen(IPAddress.Any, 5000); // HTTP\r\n    options.Listen(IPAddress.Any, 5001, listenOptions =>\r\n    {\r\n        listenOptions.UseHttps(httpsOptions =>\r\n        {\r\n            httpsOptions.ServerCertificate = new X509Certificate2("certificate.pfx", "password");\r\n        });\r\n    });\r\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Development Certificate Management:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate development certificate\r\ndotnet dev-certs https --trust\r\n\r\n# Export certificate\r\ndotnet dev-certs https --export-path certificate.pfx --password YourPassword\r\n\r\n# Clean certificates\r\ndotnet dev-certs https --clean\n"})}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Secure API Communication"}),": Protecting sensitive data in REST APIs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication Token Protection"}),": Securing JWT tokens and cookies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compliance Requirements"}),": Meeting PCI DSS, HIPAA, GDPR requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SEO Benefits"}),": Search engines favor HTTPS sites"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Trust"}),": Browser security indicators for user confidence"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Preventing MITM Attacks"}),": Protection against man-in-the-middle attacks"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use HTTPS when:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Handling sensitive data (passwords, personal info, payment data)"}),"\n",(0,i.jsx)(n.li,{children:"Implementing authentication/authorization"}),"\n",(0,i.jsx)(n.li,{children:"Meeting compliance requirements"}),"\n",(0,i.jsx)(n.li,{children:"Building production applications"}),"\n",(0,i.jsx)(n.li,{children:"Requiring data integrity guarantees"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consider alternatives when:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Internal development/testing only"}),"\n",(0,i.jsx)(n.li,{children:"Non-sensitive static content delivery"}),"\n",(0,i.jsx)(n.li,{children:"Performance is critical and security is not required"}),"\n",(0,i.jsx)(n.li,{children:"Legacy system constraints"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,i.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cloudflare"}),": CDN with automatic HTTPS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS Certificate Manager"}),": Free SSL certificates for AWS resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Let's Encrypt"}),": Free automated certificates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commercial CAs"}),": DigiCert, GlobalSign, Comodo"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data encryption and integrity"}),"\n",(0,i.jsx)(n.li,{children:"Authentication of server identity"}),"\n",(0,i.jsx)(n.li,{children:"Browser compatibility and trust indicators"}),"\n",(0,i.jsx)(n.li,{children:"SEO and performance benefits (HTTP/2)"}),"\n",(0,i.jsx)(n.li,{children:"Compliance with security standards"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Additional CPU overhead for encryption"}),"\n",(0,i.jsx)(n.li,{children:"Certificate management complexity"}),"\n",(0,i.jsx)(n.li,{children:"Initial setup and configuration effort"}),"\n",(0,i.jsx)(n.li,{children:"Certificate renewal requirements"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Enhanced HTTPS Configuration:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nusing Microsoft.AspNetCore.HttpsPolicy;\r\nusing System.Security.Cryptography.X509Certificates;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services\r\nbuilder.Services.AddControllers();\r\n\r\n// Configure HTTPS redirection with custom options\r\nbuilder.Services.AddHttpsRedirection(options =>\r\n{\r\n    options.RedirectStatusCode = StatusCodes.Status308PermanentRedirect;\r\n    options.HttpsPort = builder.Environment.IsDevelopment() ? 5001 : 443;\r\n});\r\n\r\n// Configure HSTS\r\nbuilder.Services.AddHsts(options =>\r\n{\r\n    options.Preload = true;\r\n    options.IncludeSubDomains = true;\r\n    options.MaxAge = TimeSpan.FromDays(365);\r\n    options.ExcludedHosts.Clear(); // Remove localhost exclusion for development\r\n});\r\n\r\n// Configure Kestrel for production\r\nif (!builder.Environment.IsDevelopment())\r\n{\r\n    builder.WebHost.ConfigureKestrel(options =>\r\n    {\r\n        options.ConfigureHttpsDefaults(httpsOptions =>\r\n        {\r\n            httpsOptions.SslProtocols = System.Security.Authentication.SslProtocols.Tls12 |\r\n                                       System.Security.Authentication.SslProtocols.Tls13;\r\n        });\r\n    });\r\n}\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure middleware pipeline\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseDeveloperExceptionPage();\r\n}\r\nelse\r\n{\r\n    app.UseExceptionHandler("/Error");\r\n    app.UseHsts(); // Add HSTS header\r\n}\r\n\r\napp.UseHttpsRedirection();\r\napp.UseRouting();\r\n\r\n// Security headers middleware\r\napp.Use(async (context, next) =>\r\n{\r\n    context.Response.Headers.Add("X-Content-Type-Options", "nosniff");\r\n    context.Response.Headers.Add("X-Frame-Options", "DENY");\r\n    context.Response.Headers.Add("X-XSS-Protection", "1; mode=block");\r\n    context.Response.Headers.Add("Referrer-Policy", "strict-origin-when-cross-origin");\r\n\r\n    await next();\r\n});\r\n\r\napp.MapControllers();\r\n\r\napp.Run();\r\n\r\n// appsettings.Production.json\r\n{\r\n  "Kestrel": {\r\n    "Endpoints": {\r\n      "Http": {\r\n        "Url": "http://0.0.0.0:80"\r\n      },\r\n      "Https": {\r\n        "Url": "https://0.0.0.0:443",\r\n        "Certificate": {\r\n          "Path": "/app/certificates/certificate.pfx",\r\n          "Password": "YourCertificatePassword"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  "HttpsRedirection": {\r\n    "HttpsPort": 443\r\n  }\r\n}\r\n\r\n// Controllers/SecureController.cs - Example secure endpoint\r\n[ApiController]\r\n[Route("api/[controller]")]\r\n[RequireHttps] // Enforce HTTPS\r\npublic class SecureController : ControllerBase\r\n{\r\n    [HttpGet("secure-data")]\r\n    public IActionResult GetSecureData()\r\n    {\r\n        // Check if request is secure\r\n        if (!Request.IsHttps)\r\n        {\r\n            return BadRequest("HTTPS required");\r\n        }\r\n\r\n        return Ok(new {\r\n            Message = "This is secure data",\r\n            IsSecure = Request.IsHttps,\r\n            Protocol = Request.Protocol,\r\n            Scheme = Request.Scheme\r\n        });\r\n    }\r\n\r\n    [HttpPost("sensitive-data")]\r\n    public IActionResult PostSensitiveData([FromBody] SensitiveDataModel data)\r\n    {\r\n        // Additional security headers\r\n        Response.Headers.Add("Cache-Control", "no-store, no-cache, must-revalidate");\r\n        Response.Headers.Add("Pragma", "no-cache");\r\n\r\n        return Ok(new { Message = "Data received securely" });\r\n    }\r\n}\r\n\r\npublic class SensitiveDataModel\r\n{\r\n    public string? PersonalInfo { get; set; }\r\n    public string? CreditCardNumber { get; set; }\r\n}\r\n\r\n// Certificate validation middleware\r\npublic class CertificateValidationMiddleware\r\n{\r\n    private readonly RequestDelegate _next;\r\n    private readonly ILogger<CertificateValidationMiddleware> _logger;\r\n\r\n    public CertificateValidationMiddleware(RequestDelegate next, ILogger<CertificateValidationMiddleware> logger)\r\n    {\r\n        _next = next;\r\n        _logger = logger;\r\n    }\r\n\r\n    public async Task InvokeAsync(HttpContext context)\r\n    {\r\n        var clientCert = context.Connection.ClientCertificate;\r\n\r\n        if (clientCert != null)\r\n        {\r\n            _logger.LogInformation("Client certificate: {Subject}", clientCert.Subject);\r\n\r\n            // Validate certificate if required\r\n            if (!IsValidCertificate(clientCert))\r\n            {\r\n                context.Response.StatusCode = 403;\r\n                await context.Response.WriteAsync("Invalid client certificate");\r\n                return;\r\n            }\r\n        }\r\n\r\n        await _next(context);\r\n    }\r\n\r\n    private bool IsValidCertificate(X509Certificate2 certificate)\r\n    {\r\n        // Implement certificate validation logic\r\n        return certificate.NotAfter > DateTime.Now && certificate.NotBefore <= DateTime.Now;\r\n    }\r\n}\r\n\r\n// Docker configuration for HTTPS\r\n# Dockerfile\r\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\r\nWORKDIR /app\r\nEXPOSE 80\r\nEXPOSE 443\r\n\r\n# Copy certificate\r\nCOPY ["certificates/", "/app/certificates/"]\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\r\nWORKDIR /src\r\nCOPY ["SecureApp.csproj", "."]\r\nRUN dotnet restore "./SecureApp.csproj"\r\nCOPY . .\r\nWORKDIR "/src/."\r\nRUN dotnet build "SecureApp.csproj" -c Release -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish "SecureApp.csproj" -c Release -o /app/publish\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\nENTRYPOINT ["dotnet", "SecureApp.dll"]\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"NuGet Packages Required:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.AspNetCore.HttpsPolicy" Version="2.2.0" />\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);