"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[5278],{756:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Topics/CloudTechnologies/AzureCosmosDB","title":"Azure Cosmos DB","description":"Short Introduction","source":"@site/docs/Topics/07_CloudTechnologies/33_AzureCosmosDB.md","sourceDirName":"Topics/07_CloudTechnologies","slug":"/Topics/CloudTechnologies/azure_cosmos_database","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_cosmos_database","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"cosmos","permalink":"/docusaurus_dotnet_overview/docs/tags/cosmos"},{"inline":true,"label":"database","permalink":"/docusaurus_dotnet_overview/docs/tags/database"},{"inline":true,"label":"nosql","permalink":"/docusaurus_dotnet_overview/docs/tags/nosql"}],"version":"current","sidebarPosition":33,"frontMatter":{"slug":"azure_cosmos_database","title":"Azure Cosmos DB","tags":["dotnet","azure","cosmos","database","nosql"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure SQL Database","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_sql_database"},"next":{"title":"Azure Service Bus","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_service_bus"}}');var i=r(4848),o=r(8453);const t={slug:"azure_cosmos_database",title:"Azure Cosmos DB",tags:["dotnet","azure","cosmos","database","nosql"]},a="Azure Cosmos DB",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup and Deployment Steps",id:"setup-and-deployment-steps",level:2},{value:"Azure CLI Setup",id:"azure-cli-setup",level:3},{value:"Bicep Template",id:"bicep-template",level:3},{value:"Typical Usage and Integration with .NET Apps",id:"typical-usage-and-integration-with-net-apps",level:2},{value:"NuGet Package Installation",id:"nuget-package-installation",level:3},{value:"Configuration and Service Registration",id:"configuration-and-service-registration",level:3},{value:"Service Implementation",id:"service-implementation",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs Alternatives",id:"when-to-use-vs-alternatives",level:2},{value:"Use Azure Cosmos DB when",id:"use-azure-cosmos-db-when",level:3},{value:"Don&#39;t use when",id:"dont-use-when",level:3},{value:"Alternatives",id:"alternatives",level:3},{value:"Market Pros/Cons and Cost Considerations",id:"market-proscons-and-cost-considerations",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3},{value:"Cost Considerations",id:"cost-considerations",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"azure-cosmos-db",children:"Azure Cosmos DB"})}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Azure Cosmos DB is Microsoft's globally distributed, multi-model NoSQL database service designed for mission-critical applications requiring low latency, elastic scale, and high availability across multiple geographic regions."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:'"Azure Cosmos DB is a fully managed NoSQL database for modern app development. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale."'}),"\n",(0,i.jsx)(n.h2,{id:"setup-and-deployment-steps",children:"Setup and Deployment Steps"}),"\n",(0,i.jsx)(n.h3,{id:"azure-cli-setup",children:"Azure CLI Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create Cosmos DB account\r\naz cosmosdb create --name mycosmosdb --resource-group myResourceGroup --kind GlobalDocumentDB --locations regionName="East US" failoverPriority=0 isZoneRedundant=False\r\n\r\n# Create database\r\naz cosmosdb sql database create --account-name mycosmosdb --resource-group myResourceGroup --name ToDoList\r\n\r\n# Create container\r\naz cosmosdb sql container create --account-name mycosmosdb --resource-group myResourceGroup --database-name ToDoList --name Items --partition-key-path "/category" --throughput 400\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bicep-template",children:"Bicep Template"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bicep",children:"resource cosmosAccount 'Microsoft.DocumentDB/databaseAccounts@2023-04-15' = {\r\n  name: 'mycosmosdb'\r\n  location: resourceGroup().location\r\n  kind: 'GlobalDocumentDB'\r\n  properties: {\r\n    consistencyPolicy: {\r\n      defaultConsistencyLevel: 'Session'\r\n    }\r\n    locations: [\r\n      {\r\n        locationName: resourceGroup().location\r\n        failoverPriority: 0\r\n        isZoneRedundant: false\r\n      }\r\n    ]\r\n    databaseAccountOfferType: 'Standard'\r\n  }\r\n}\r\n\r\nresource database 'Microsoft.DocumentDB/databaseAccounts/sqlDatabases@2023-04-15' = {\r\n  parent: cosmosAccount\r\n  name: 'ToDoList'\r\n  properties: {\r\n    resource: {\r\n      id: 'ToDoList'\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"typical-usage-and-integration-with-net-apps",children:"Typical Usage and Integration with .NET Apps"}),"\n",(0,i.jsx)(n.h3,{id:"nuget-package-installation",children:"NuGet Package Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.Azure.Cosmos" Version="3.35.4" />\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-and-service-registration",children:"Configuration and Service Registration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// appsettings.json\r\n{\r\n  "CosmosDb": {\r\n    "Account": "https://mycosmosdb.documents.azure.com:443/",\r\n    "Key": "your-primary-key-here",\r\n    "DatabaseName": "ToDoList",\r\n    "ContainerName": "Items"\r\n  }\r\n}\r\n\r\n// Program.cs\r\nusing Microsoft.Azure.Cosmos;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Register Cosmos DB client\r\nbuilder.Services.AddSingleton<CosmosClient>(serviceProvider =>\r\n{\r\n    var configuration = serviceProvider.GetRequiredService<IConfiguration>();\r\n    var account = configuration["CosmosDb:Account"];\r\n    var key = configuration["CosmosDb:Key"];\r\n    return new CosmosClient(account, key);\r\n});\r\n\r\nbuilder.Services.AddScoped<ICosmosDbService, CosmosDbService>();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"service-implementation",children:"Service Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public interface ICosmosDbService\r\n{\r\n    Task<T> GetItemAsync<T>(string id, string partitionKey);\r\n    Task<T> CreateItemAsync<T>(T item, string partitionKey);\r\n    Task<T> UpdateItemAsync<T>(string id, T item, string partitionKey);\r\n    Task DeleteItemAsync(string id, string partitionKey);\r\n    Task<IEnumerable<T>> GetItemsAsync<T>(string queryString);\r\n}\r\n\r\npublic class CosmosDbService : ICosmosDbService\r\n{\r\n    private readonly Container _container;\r\n\r\n    public CosmosDbService(CosmosClient cosmosClient, IConfiguration configuration)\r\n    {\r\n        var databaseName = configuration["CosmosDb:DatabaseName"];\r\n        var containerName = configuration["CosmosDb:ContainerName"];\r\n        _container = cosmosClient.GetContainer(databaseName, containerName);\r\n    }\r\n\r\n    public async Task<T> GetItemAsync<T>(string id, string partitionKey)\r\n    {\r\n        try\r\n        {\r\n            var response = await _container.ReadItemAsync<T>(id, new PartitionKey(partitionKey));\r\n            return response.Resource;\r\n        }\r\n        catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\r\n        {\r\n            return default(T);\r\n        }\r\n    }\r\n\r\n    public async Task<T> CreateItemAsync<T>(T item, string partitionKey)\r\n    {\r\n        var response = await _container.CreateItemAsync(item, new PartitionKey(partitionKey));\r\n        return response.Resource;\r\n    }\r\n\r\n    public async Task<IEnumerable<T>> GetItemsAsync<T>(string queryString)\r\n    {\r\n        var query = _container.GetItemQueryIterator<T>(new QueryDefinition(queryString));\r\n        var results = new List<T>();\r\n\r\n        while (query.HasMoreResults)\r\n        {\r\n            var response = await query.ReadNextAsync();\r\n            results.AddRange(response.ToList());\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n\r\n// Model example\r\npublic class ToDoItem\r\n{\r\n    [JsonPropertyName("id")]\r\n    public string Id { get; set; } = Guid.NewGuid().ToString();\r\n\r\n    [JsonPropertyName("category")]\r\n    public string Category { get; set; }\r\n\r\n    [JsonPropertyName("name")]\r\n    public string Name { get; set; }\r\n\r\n    [JsonPropertyName("description")]\r\n    public string Description { get; set; }\r\n\r\n    [JsonPropertyName("isComplete")]\r\n    public bool IsComplete { get; set; }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Globally distributed applications requiring low latency"}),"\n",(0,i.jsx)(n.li,{children:"IoT applications with high-volume data ingestion"}),"\n",(0,i.jsx)(n.li,{children:"Real-time personalization and recommendations"}),"\n",(0,i.jsx)(n.li,{children:"Content management and catalogs"}),"\n",(0,i.jsx)(n.li,{children:"Gaming leaderboards and user profiles"}),"\n",(0,i.jsx)(n.li,{children:"Financial services requiring multi-region compliance"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-vs-alternatives",children:"When to Use vs Alternatives"}),"\n",(0,i.jsx)(n.h3,{id:"use-azure-cosmos-db-when",children:"Use Azure Cosmos DB when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Global distribution with low latency is critical"}),"\n",(0,i.jsx)(n.li,{children:"Elastic scaling from zero to unlimited is needed"}),"\n",(0,i.jsx)(n.li,{children:"Multiple data models (document, key-value, graph, column) required"}),"\n",(0,i.jsx)(n.li,{children:"99.999% availability SLA is important"}),"\n",(0,i.jsx)(n.li,{children:"Multi-master replication is beneficial"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dont-use-when",children:"Don't use when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple relational queries are primary requirement"}),"\n",(0,i.jsx)(n.li,{children:"Cost optimization is the main concern"}),"\n",(0,i.jsx)(n.li,{children:"ACID transactions across multiple partitions are critical"}),"\n",(0,i.jsx)(n.li,{children:"Complex joins and aggregations are common"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alternatives",children:"Alternatives"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure"}),": SQL Database, Table Storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS"}),": DynamoDB, DocumentDB"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GCP"}),": Firestore, Bigtable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open Source"}),": MongoDB, Cassandra"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"market-proscons-and-cost-considerations",children:"Market Pros/Cons and Cost Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multi-model database (SQL API, MongoDB API, Cassandra API, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Global distribution with automatic failover"}),"\n",(0,i.jsx)(n.li,{children:"Automatic indexing and schema-agnostic"}),"\n",(0,i.jsx)(n.li,{children:"Multiple consistency levels"}),"\n",(0,i.jsx)(n.li,{children:"Serverless and autoscale options"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can be expensive for high-throughput scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Learning curve for partition key design"}),"\n",(0,i.jsx)(n.li,{children:"Limited cross-partition transactions"}),"\n",(0,i.jsx)(n.li,{children:"Query optimization requires understanding of RU consumption"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cost-considerations",children:"Cost Considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Charged based on Request Units (RU/s) and storage"}),"\n",(0,i.jsx)(n.li,{children:"Minimum 400 RU/s for containers (~$24/month)"}),"\n",(0,i.jsx)(n.li,{children:"Serverless option: Pay per request (good for development/testing)"}),"\n",(0,i.jsx)(n.li,{children:"Multi-region replication multiplies costs"}),"\n",(0,i.jsx)(n.li,{children:"Autoscale available to optimize costs for variable workloads"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);