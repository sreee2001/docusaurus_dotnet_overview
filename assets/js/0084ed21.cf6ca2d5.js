"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[7975],{5147:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Topics/DevOps_and_CI_CD/AzureDevOps","title":"Azure DevOps","description":"Short Introduction","source":"@site/docs/Topics/09_DevOps_and_CI_CD/40_AzureDevOps.md","sourceDirName":"Topics/09_DevOps_and_CI_CD","slug":"/Topics/DevOps_and_CI_CD/azure_devops","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/azure_devops","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"devops","permalink":"/docusaurus_dotnet_overview/docs/tags/devops"}],"version":"current","sidebarPosition":40,"frontMatter":{"slug":"azure_devops","title":"Azure DevOps","tags":["dotnet","azure","devops"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure Container Registry","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_registry"},"next":{"title":"GitHub Actions","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/github_actions"}}');var i=r(4848),s=r(8453);const o={slug:"azure_devops",title:"Azure DevOps",tags:["dotnet","azure","devops"]},a="Azure DevOps",l={},p=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Basic Azure DevOps Pipeline (azure-pipelines.yml)",id:"basic-azure-devops-pipeline-azure-pipelinesyml",level:3},{value:"Multi-Stage Pipeline with Docker",id:"multi-stage-pipeline-with-docker",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use Azure DevOps when",id:"use-azure-devops-when",level:3},{value:"Consider alternatives when",id:"consider-alternatives-when",level:3},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"azure-devops",children:"Azure DevOps"})}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Azure DevOps is a comprehensive suite of development tools and services provided by Microsoft for planning, developing, testing, and deploying applications. It includes Azure Repos, Azure Pipelines, Azure Boards, Azure Test Plans, and Azure Artifacts, providing end-to-end DevOps capabilities for .NET applications."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"Azure DevOps provides developer services to support teams to plan work, collaborate on code development, and build and deploy applications. It supports any language, platform, and cloud, offering both cloud-hosted and on-premises solutions for development teams."}),"\n",(0,i.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,i.jsx)(n.h3,{id:"basic-azure-devops-pipeline-azure-pipelinesyml",children:"Basic Azure DevOps Pipeline (azure-pipelines.yml)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# azure-pipelines.yml\r\ntrigger:\r\n  branches:\r\n    include:\r\n      - main\r\n      - develop\r\n  paths:\r\n    include:\r\n      - src/*\r\n      - tests/*\r\n\r\nvariables:\r\n  buildConfiguration: "Release"\r\n  dotNetVersion: "8.x"\r\n  vmImageName: "ubuntu-latest"\r\n\r\nstages:\r\n  - stage: Build\r\n    displayName: "Build and Test"\r\n    jobs:\r\n      - job: Build\r\n        displayName: "Build Job"\r\n        pool:\r\n          vmImage: $(vmImageName)\r\n\r\n        steps:\r\n          - task: UseDotNet@2\r\n            displayName: "Use .NET $(dotNetVersion)"\r\n            inputs:\r\n              packageType: "sdk"\r\n              version: $(dotNetVersion)\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Restore packages"\r\n            inputs:\r\n              command: "restore"\r\n              projects: "**/*.csproj"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Build application"\r\n            inputs:\r\n              command: "build"\r\n              projects: "**/*.csproj"\r\n              arguments: "--configuration $(buildConfiguration) --no-restore"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Run unit tests"\r\n            inputs:\r\n              command: "test"\r\n              projects: "**/*Tests.csproj"\r\n              arguments: \'--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)\'\r\n\r\n          - task: PublishCodeCoverageResults@1\r\n            displayName: "Publish code coverage"\r\n            inputs:\r\n              codeCoverageTool: "Cobertura"\r\n              summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"\r\n\r\n          - task: PublishTestResults@2\r\n            displayName: "Publish test results"\r\n            inputs:\r\n              testResultsFormat: "VSTest"\r\n              testResultsFiles: "$(Agent.TempDirectory)/**/*.trx"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Publish application"\r\n            inputs:\r\n              command: "publish"\r\n              publishWebProjects: true\r\n              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"\r\n\r\n          - task: PublishBuildArtifacts@1\r\n            displayName: "Publish artifacts"\r\n            inputs:\r\n              PathtoPublish: "$(Build.ArtifactStagingDirectory)"\r\n              ArtifactName: "drop"\r\n\r\n  - stage: Deploy\r\n    displayName: "Deploy to Azure"\r\n    dependsOn: Build\r\n    condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/main\'))\r\n    jobs:\r\n      - deployment: Deploy\r\n        displayName: "Deploy Job"\r\n        pool:\r\n          vmImage: $(vmImageName)\r\n        environment: "production"\r\n        strategy:\r\n          runOnce:\r\n            deploy:\r\n              steps:\r\n                - task: AzureWebApp@1\r\n                  displayName: "Deploy to Azure Web App"\r\n                  inputs:\r\n                    azureSubscription: "Azure-Service-Connection"\r\n                    appType: "webAppLinux"\r\n                    appName: "hotel-management-api"\r\n                    package: "$(Pipeline.Workspace)/drop/**/*.zip"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multi-stage-pipeline-with-docker",children:"Multi-Stage Pipeline with Docker"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# azure-pipelines-docker.yml\r\ntrigger:\r\n  branches:\r\n    include:\r\n      - main\r\n  paths:\r\n    include:\r\n      - src/*\r\n      - Dockerfile\r\n\r\nvariables:\r\n  dockerRegistryServiceConnection: "ACR-Service-Connection"\r\n  imageRepository: "hotel-management-api"\r\n  containerRegistry: "hotelmanagementacr.azurecr.io"\r\n  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"\r\n  tag: "$(Build.BuildId)"\r\n  vmImageName: "ubuntu-latest"\r\n\r\nstages:\r\n  - stage: Build\r\n    displayName: Build and Push Docker Image\r\n    jobs:\r\n      - job: Build\r\n        displayName: Build\r\n        pool:\r\n          vmImage: $(vmImageName)\r\n        steps:\r\n          - task: Docker@2\r\n            displayName: Build and push Docker image\r\n            inputs:\r\n              command: buildAndPush\r\n              repository: $(imageRepository)\r\n              dockerfile: $(dockerfilePath)\r\n              containerRegistry: $(dockerRegistryServiceConnection)\r\n              tags: |\r\n                $(tag)\r\n                latest\r\n\r\n  - stage: Deploy\r\n    displayName: Deploy to AKS\r\n    dependsOn: Build\r\n    jobs:\r\n      - deployment: Deploy\r\n        displayName: Deploy\r\n        pool:\r\n          vmImage: $(vmImageName)\r\n        environment: "production.hotel-management"\r\n        strategy:\r\n          runOnce:\r\n            deploy:\r\n              steps:\r\n                - task: KubernetesManifest@0\r\n                  displayName: Deploy to Kubernetes cluster\r\n                  inputs:\r\n                    action: deploy\r\n                    manifests: |\r\n                      $(Pipeline.Workspace)/manifests/deployment.yml\r\n                      $(Pipeline.Workspace)/manifests/service.yml\r\n                    containers: |\r\n                      $(containerRegistry)/$(imageRepository):$(tag)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enterprise Development"}),": Large-scale development with multiple teams"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regulated Industries"}),": Compliance tracking and audit trails"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hybrid Deployments"}),": On-premises and cloud integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Microsoft Ecosystem"}),": Integration with Visual Studio and Microsoft tools"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Work Item Tracking"}),": Project management and requirement tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Release Management"}),": Complex deployment pipelines with approvals"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,i.jsx)(n.h3,{id:"use-azure-devops-when",children:"Use Azure DevOps when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Working in Microsoft-centric environments"}),"\n",(0,i.jsx)(n.li,{children:"Need integrated work item tracking and planning"}),"\n",(0,i.jsx)(n.li,{children:"Require enterprise-grade security and compliance"}),"\n",(0,i.jsx)(n.li,{children:"Building complex, multi-stage deployment pipelines"}),"\n",(0,i.jsx)(n.li,{children:"Need on-premises DevOps capabilities"}),"\n",(0,i.jsx)(n.li,{children:"Working with large teams requiring structured processes"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Primarily using non-Microsoft technologies"}),"\n",(0,i.jsx)(n.li,{children:"Need simpler, lightweight CI/CD solutions"}),"\n",(0,i.jsx)(n.li,{children:"Budget constraints (GitHub Actions often more cost-effective)"}),"\n",(0,i.jsx)(n.li,{children:"Open-source focused development"}),"\n",(0,i.jsx)(n.li,{children:"Small teams with minimal process requirements"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,i.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub Actions"}),": Integrated with GitHub, simpler setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitLab CI/CD"}),": Complete DevOps platform with GitOps"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Jenkins"}),": Open-source, highly customizable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CircleCI"}),": Fast builds, good Docker support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TeamCity"}),": JetBrains' CI/CD solution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS CodePipeline"}),": Native AWS integration"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comprehensive integrated suite"}),"\n",(0,i.jsx)(n.li,{children:"Strong Microsoft ecosystem integration"}),"\n",(0,i.jsx)(n.li,{children:"Enterprise security and compliance features"}),"\n",(0,i.jsx)(n.li,{children:"Flexible deployment options (cloud/on-premises)"}),"\n",(0,i.jsx)(n.li,{children:"Advanced work item tracking and reporting"}),"\n",(0,i.jsx)(n.li,{children:"Mature testing and release management"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can be complex for simple projects"}),"\n",(0,i.jsx)(n.li,{children:"Licensing costs for larger teams"}),"\n",(0,i.jsx)(n.li,{children:"Less community-driven compared to open alternatives"}),"\n",(0,i.jsx)(n.li,{children:"Learning curve for non-Microsoft environments"}),"\n",(0,i.jsx)(n.li,{children:"YAML pipeline syntax can be verbose"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# azure-pipelines-enterprise.yml\r\nname: $(Date:yyyyMMdd)$(Rev:.r)\r\n\r\ntrigger:\r\n  batch: true\r\n  branches:\r\n    include:\r\n      - main\r\n      - develop\r\n      - release/*\r\n  paths:\r\n    exclude:\r\n      - docs/*\r\n      - README.md\r\n\r\nvariables:\r\n  - group: "HotelManagement-Variables"\r\n  - name: buildConfiguration\r\n    value: "Release"\r\n  - name: dotNetVersion\r\n    value: "8.x"\r\n  - name: majorVersion\r\n    value: "1"\r\n  - name: minorVersion\r\n    value: "0"\r\n  - name: patchVersion\r\n    value: $[counter(variables[\'minorVersion\'], 0)]\r\n\r\npool:\r\n  vmImage: "ubuntu-latest"\r\n\r\nstages:\r\n  - stage: Validate\r\n    displayName: "Code Quality and Security"\r\n    jobs:\r\n      - job: StaticAnalysis\r\n        displayName: "Static Code Analysis"\r\n        steps:\r\n          - task: UseDotNet@2\r\n            displayName: "Install .NET SDK"\r\n            inputs:\r\n              packageType: "sdk"\r\n              version: $(dotNetVersion)\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Restore packages"\r\n            inputs:\r\n              command: "restore"\r\n              projects: "**/*.csproj"\r\n\r\n          - task: SonarCloudPrepare@1\r\n            displayName: "Prepare SonarCloud analysis"\r\n            inputs:\r\n              SonarCloud: "SonarCloud-ServiceConnection"\r\n              organization: "hotel-management"\r\n              scannerMode: "MSBuild"\r\n              projectKey: "hotel-management-api"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Build for analysis"\r\n            inputs:\r\n              command: "build"\r\n              projects: "**/*.csproj"\r\n              arguments: "--configuration $(buildConfiguration)"\r\n\r\n          - task: SonarCloudAnalyze@1\r\n            displayName: "Run SonarCloud analysis"\r\n\r\n          - task: SonarCloudPublish@1\r\n            displayName: "Publish SonarCloud results"\r\n\r\n          - task: WhiteSource@21\r\n            displayName: "WhiteSource security scan"\r\n            inputs:\r\n              cwd: "$(System.DefaultWorkingDirectory)"\r\n\r\n  - stage: Build\r\n    displayName: "Build and Test"\r\n    dependsOn: Validate\r\n    jobs:\r\n      - job: BuildAndTest\r\n        displayName: "Build and Test Application"\r\n        steps:\r\n          - task: UseDotNet@2\r\n            displayName: "Install .NET SDK"\r\n            inputs:\r\n              packageType: "sdk"\r\n              version: $(dotNetVersion)\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Restore packages"\r\n            inputs:\r\n              command: "restore"\r\n              projects: "**/*.csproj"\r\n              feedsToUse: "select"\r\n              vstsFeed: "hotel-management-feed"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Build application"\r\n            inputs:\r\n              command: "build"\r\n              projects: "**/*.csproj"\r\n              arguments: "--configuration $(buildConfiguration) --no-restore -p:Version=$(majorVersion).$(minorVersion).$(patchVersion)"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Run unit tests"\r\n            inputs:\r\n              command: "test"\r\n              projects: "**/*UnitTests.csproj"\r\n              arguments: \'--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)/TestResults\'\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Run integration tests"\r\n            inputs:\r\n              command: "test"\r\n              projects: "**/*IntegrationTests.csproj"\r\n              arguments: "--configuration $(buildConfiguration) --no-build --logger trx --results-directory $(Agent.TempDirectory)/TestResults"\r\n\r\n          - task: PublishCodeCoverageResults@1\r\n            displayName: "Publish code coverage"\r\n            inputs:\r\n              codeCoverageTool: "Cobertura"\r\n              summaryFileLocation: "$(Agent.TempDirectory)/TestResults/**/coverage.cobertura.xml"\r\n\r\n          - task: PublishTestResults@2\r\n            displayName: "Publish test results"\r\n            inputs:\r\n              testResultsFormat: "VSTest"\r\n              testResultsFiles: "$(Agent.TempDirectory)/TestResults/**/*.trx"\r\n              publishRunAttachments: true\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Create NuGet packages"\r\n            inputs:\r\n              command: "pack"\r\n              packagesToPack: "**/HotelManagement.Core.csproj;**/HotelManagement.Shared.csproj"\r\n              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/packages -p:PackageVersion=$(majorVersion).$(minorVersion).$(patchVersion)"\r\n\r\n          - task: DotNetCoreCLI@2\r\n            displayName: "Publish web application"\r\n            inputs:\r\n              command: "publish"\r\n              publishWebProjects: true\r\n              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapp --no-build -p:Version=$(majorVersion).$(minorVersion).$(patchVersion)"\r\n\r\n          - task: CopyFiles@2\r\n            displayName: "Copy deployment scripts"\r\n            inputs:\r\n              SourceFolder: "deploy"\r\n              Contents: "**"\r\n              TargetFolder: "$(Build.ArtifactStagingDirectory)/deploy"\r\n\r\n          - task: PublishBuildArtifacts@1\r\n            displayName: "Publish build artifacts"\r\n            inputs:\r\n              PathtoPublish: "$(Build.ArtifactStagingDirectory)"\r\n              ArtifactName: "drop"\r\n\r\n  - stage: DeployDev\r\n    displayName: "Deploy to Development"\r\n    dependsOn: Build\r\n    condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/develop\'))\r\n    variables:\r\n      - group: "Dev-Environment"\r\n    jobs:\r\n      - deployment: DeployToDev\r\n        displayName: "Deploy to Dev Environment"\r\n        pool:\r\n          vmImage: "ubuntu-latest"\r\n        environment: "hotel-management-dev"\r\n        strategy:\r\n          runOnce:\r\n            deploy:\r\n              steps:\r\n                - task: AzureResourceManagerTemplateDeployment@3\r\n                  displayName: "Deploy ARM template"\r\n                  inputs:\r\n                    deploymentScope: "Resource Group"\r\n                    azureResourceManagerConnection: "Azure-Dev-ServiceConnection"\r\n                    subscriptionId: "$(subscriptionId)"\r\n                    action: "Create Or Update Resource Group"\r\n                    resourceGroupName: "$(resourceGroupName)"\r\n                    location: "$(location)"\r\n                    templateLocation: "Linked artifact"\r\n                    csmFile: "$(Pipeline.Workspace)/drop/deploy/infrastructure.json"\r\n                    csmParametersFile: "$(Pipeline.Workspace)/drop/deploy/parameters.dev.json"\r\n\r\n                - task: AzureWebApp@1\r\n                  displayName: "Deploy to Azure Web App"\r\n                  inputs:\r\n                    azureSubscription: "Azure-Dev-ServiceConnection"\r\n                    appType: "webAppLinux"\r\n                    appName: "$(webAppName)"\r\n                    package: "$(Pipeline.Workspace)/drop/webapp/**/*.zip"\r\n                    appSettings: |\r\n                      -ASPNETCORE_ENVIRONMENT Development\r\n                      -ConnectionStrings__DefaultConnection "$(connectionString)"\r\n                      -ApplicationInsights__InstrumentationKey "$(instrumentationKey)"\r\n\r\n  - stage: DeployProd\r\n    displayName: "Deploy to Production"\r\n    dependsOn: Build\r\n    condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/main\'))\r\n    variables:\r\n      - group: "Prod-Environment"\r\n    jobs:\r\n      - deployment: DeployToProd\r\n        displayName: "Deploy to Production Environment"\r\n        pool:\r\n          vmImage: "ubuntu-latest"\r\n        environment: "hotel-management-prod"\r\n        strategy:\r\n          runOnce:\r\n            deploy:\r\n              steps:\r\n                - task: AzureKeyVault@2\r\n                  displayName: "Get secrets from Key Vault"\r\n                  inputs:\r\n                    azureSubscription: "Azure-Prod-ServiceConnection"\r\n                    KeyVaultName: "$(keyVaultName)"\r\n                    SecretsFilter: "*"\r\n\r\n                - task: AzureResourceManagerTemplateDeployment@3\r\n                  displayName: "Deploy ARM template"\r\n                  inputs:\r\n                    deploymentScope: "Resource Group"\r\n                    azureResourceManagerConnection: "Azure-Prod-ServiceConnection"\r\n                    subscriptionId: "$(subscriptionId)"\r\n                    action: "Create Or Update Resource Group"\r\n                    resourceGroupName: "$(resourceGroupName)"\r\n                    location: "$(location)"\r\n                    templateLocation: "Linked artifact"\r\n                    csmFile: "$(Pipeline.Workspace)/drop/deploy/infrastructure.json"\r\n                    csmParametersFile: "$(Pipeline.Workspace)/drop/deploy/parameters.prod.json"\r\n\r\n                - task: AzureWebApp@1\r\n                  displayName: "Deploy to Azure Web App"\r\n                  inputs:\r\n                    azureSubscription: "Azure-Prod-ServiceConnection"\r\n                    appType: "webAppLinux"\r\n                    appName: "$(webAppName)"\r\n                    package: "$(Pipeline.Workspace)/drop/webapp/**/*.zip"\r\n                    deploymentMethod: "zipDeploy"\r\n                    appSettings: |\r\n                      -ASPNETCORE_ENVIRONMENT Production\r\n                      -ConnectionStrings__DefaultConnection "$(prod-connection-string)"\r\n                      -ApplicationInsights__InstrumentationKey "$(prod-instrumentation-key)"\r\n\r\n                - task: AzureCLI@2\r\n                  displayName: "Run database migrations"\r\n                  inputs:\r\n                    azureSubscription: "Azure-Prod-ServiceConnection"\r\n                    scriptType: "bash"\r\n                    scriptLocation: "inlineScript"\r\n                    inlineScript: |\r\n                      az webapp config appsettings set \\\r\n                        --resource-group $(resourceGroupName) \\\r\n                        --name $(webAppName) \\\r\n                        --settings RunMigrations=true\r\n\r\n                      # Wait for app to restart and run migrations\r\n                      sleep 60\r\n\r\n                      az webapp config appsettings delete \\\r\n                        --resource-group $(resourceGroupName) \\\r\n                        --name $(webAppName) \\\r\n                        --setting-names RunMigrations\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);