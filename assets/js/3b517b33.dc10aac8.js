"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[31],{7069:e=>{e.exports=JSON.parse('{"tag":{"label":"quality","permalink":"/docusaurus_dotnet_overview/docs/tags/quality","allTagsPath":"/docusaurus_dotnet_overview/docs/tags","count":5,"items":[{"id":"Topics/Testing/24.2_EndToEndTesting","title":"End to End Testing","description":"End-to-end testing validates complete user workflows by testing the application from the user interface through all layers to the database. It simulates real user interactions to ensure the entire system works together correctly.","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/end_to_end_testing"},{"id":"Topics/Testing/24.1_IntegrationTesting","title":"Integration Testing","description":"Integration testing verifies that different components or systems work correctly together. In .NET, this typically involves testing controllers, databases, external services, and the complete request-response pipeline.","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/integration_testing"},{"id":"Topics/Testing/24.3_LoadTesting","title":"Load Testing","description":"Load testing evaluates how an application performs under expected and peak load conditions. It helps identify performance bottlenecks, resource limitations, and scalability issues before they impact users in production.","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/load_testing"},{"id":"Topics/Testing/TestDrivenDevelopment_TDD","title":"Test Driven Development","description":"Short Introduction","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/tdd"},{"id":"Topics/Testing/UnitTesting","title":"Unit Testing","description":"Unit testing involves testing individual components or methods in isolation to verify they work as expected. It\'s the foundation of a robust testing strategy and enables rapid feedback during development.","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/unit_testing"}],"unlisted":false}}')}}]);