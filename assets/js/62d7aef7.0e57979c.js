"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[5755],{7820:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Topics/Fundamentals/GarbageCollection_GC","title":"Garbage Collection","description":"Short Introduction","source":"@site/docs/Topics/01_Fundamentals/05_GarbageCollection_GC.md","sourceDirName":"Topics/01_Fundamentals","slug":"/Topics/Fundamentals/garbage_collection","permalink":"/docusaurus_dotnet_overview/docs/Topics/Fundamentals/garbage_collection","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"gc","permalink":"/docusaurus_dotnet_overview/docs/tags/gc"},{"inline":true,"label":"garbage collection","permalink":"/docusaurus_dotnet_overview/docs/tags/garbage-collection"},{"inline":true,"label":"memory","permalink":"/docusaurus_dotnet_overview/docs/tags/memory"},{"inline":true,"label":"performance","permalink":"/docusaurus_dotnet_overview/docs/tags/performance"}],"version":"current","sidebarPosition":5,"frontMatter":{"slug":"garbage_collection","title":"Garbage Collection","tags":["dotnet","gc","garbage collection","memory","performance"]},"sidebar":"tutorialSidebar","previous":{"title":"Base Class Library (BCL)","permalink":"/docusaurus_dotnet_overview/docs/Topics/Fundamentals/base_class_library"},"next":{"title":"ASP.NET Core","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/asp_dotnet_core"}}');var i=o(4848),t=o(8453);const s={slug:"garbage_collection",title:"Garbage Collection",tags:["dotnet","gc","garbage collection","memory","performance"]},a="Garbage Collection",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"When to Use / When Not to Use",id:"when-to-use--when-not-to-use",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"garbage-collection",children:"Garbage Collection"})}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Garbage Collection (GC) in .NET automatically manages memory allocation and deallocation, freeing developers from manual memory management."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"Garbage Collection is an automatic memory management feature of .NET that periodically identifies and frees memory that is no longer being used by the application."}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// GC is automatic, but you can interact with it\r\npublic class ResourceIntensiveClass : IDisposable\r\n{\r\n    private bool disposed = false;\r\n\r\n    public void Dispose()\r\n    {\r\n        Dispose(true);\r\n        GC.SuppressFinalize(this);\r\n    }\r\n\r\n    protected virtual void Dispose(bool disposing)\r\n    {\r\n        if (!disposed)\r\n        {\r\n            if (disposing)\r\n            {\r\n                // Dispose managed resources\r\n            }\r\n            // Free unmanaged resources\r\n            disposed = true;\r\n        }\r\n    }\r\n\r\n    ~ResourceIntensiveClass()\r\n    {\r\n        Dispose(false);\r\n    }\r\n}\r\n\r\n// Force garbage collection (generally not recommended)\r\nGC.Collect();\r\nGC.WaitForPendingFinalizers();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use--when-not-to-use",children:"When to Use / When Not to Use"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Generally avoid manual GC calls except:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Memory-intensive applications"}),"\n",(0,i.jsx)(n.li,{children:"After large object disposal"}),"\n",(0,i.jsx)(n.li,{children:"Performance testing scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatic memory management"}),"\n",(0,i.jsx)(n.li,{children:"Prevents memory leaks"}),"\n",(0,i.jsx)(n.li,{children:"Optimized for application patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Non-deterministic timing"}),"\n",(0,i.jsx)(n.li,{children:"Can cause pause times"}),"\n",(0,i.jsx)(n.li,{children:"Less control over memory layout"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var r=o(6540);const i={},t=r.createContext(i);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);