"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[7568],{2089:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Topics/ContainerizationAndOrchestration/AzureContainerApps","title":"Azure Container Apps","description":"Short Introduction","source":"@site/docs/Topics/08_ContainerizationAndOrchestration/38_AzureContainerApps.md","sourceDirName":"Topics/08_ContainerizationAndOrchestration","slug":"/Topics/ContainerizationAndOrchestration/azure_container_apps","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_apps","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"containers","permalink":"/docusaurus_dotnet_overview/docs/tags/containers"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"apps","permalink":"/docusaurus_dotnet_overview/docs/tags/apps"}],"version":"current","sidebarPosition":38,"frontMatter":{"slug":"azure_container_apps","title":"Azure Container Apps","tags":["dotnet","containers","azure","apps"]},"sidebar":"tutorialSidebar","previous":{"title":"Kubernetes","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/kubernetes"},"next":{"title":"Azure Container Registry","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_registry"}}');var i=r(4848),a=r(8453);const s={slug:"azure_container_apps",title:"Azure Container Apps",tags:["dotnet","containers","azure","apps"]},o="Azure Container Apps",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Azure CLI Setup",id:"azure-cli-setup",level:3},{value:"Container App Configuration",id:"container-app-configuration",level:3},{value:"Deployment with Azure CLI",id:"deployment-with-azure-cli",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use Azure Container Apps when",id:"use-azure-container-apps-when",level:3},{value:"Consider alternatives when",id:"consider-alternatives-when",level:3},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:2},{value:"Bicep Template for Infrastructure",id:"bicep-template-for-infrastructure",level:3},{value:"Deployment Script",id:"deployment-script",level:3},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"azure-container-apps",children:"Azure Container Apps"})}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Azure Container Apps is a fully managed serverless container platform that allows you to run containerized applications without managing infrastructure. It provides automatic scaling, traffic splitting, and built-in integration with Azure services, making it ideal for microservices and event-driven applications."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"Azure Container Apps is a fully managed environment that enables you to run microservices and containerized applications on a serverless platform. It's built on Kubernetes but abstracts away cluster management complexity while providing advanced microservices capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,i.jsx)(n.h3,{id:"azure-cli-setup",children:"Azure CLI Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Azure CLI extension\r\naz extension add --name containerapp --upgrade\r\n\r\n# Create resource group\r\naz group create --name rg-hotel-management --location eastus\r\n\r\n# Create Container Apps environment\r\naz containerapp env create \\\r\n  --name hotel-management-env \\\r\n  --resource-group rg-hotel-management \\\r\n  --location eastus\n"})}),"\n",(0,i.jsx)(n.h3,{id:"container-app-configuration",children:"Container App Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# containerapp.yaml\r\nproperties:\r\n  managedEnvironmentId: /subscriptions/{subscription-id}/resourceGroups/rg-hotel-management/providers/Microsoft.App/managedEnvironments/hotel-management-env\r\n  configuration:\r\n    secrets:\r\n      - name: connection-string\r\n        value: "Server=tcp:hotel-sql-server.database.windows.net,1433;Initial Catalog=HotelManagement;Persist Security Info=False;User ID=adminuser;Password=YourPassword123!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"\r\n      - name: jwt-secret\r\n        value: "your-super-secret-jwt-key-that-is-at-least-256-bits-long"\r\n    ingress:\r\n      external: true\r\n      targetPort: 8080\r\n      traffic:\r\n        - weight: 100\r\n          latestRevision: true\r\n    registries:\r\n      - server: hotelmanagementacr.azurecr.io\r\n        username: hotelmanagementacr\r\n        passwordSecretRef: registry-password\r\n  template:\r\n    containers:\r\n      - image: hotelmanagementacr.azurecr.io/hotel-management-api:latest\r\n        name: hotel-api\r\n        env:\r\n          - name: ASPNETCORE_ENVIRONMENT\r\n            value: "Production"\r\n          - name: ConnectionStrings__DefaultConnection\r\n            secretRef: connection-string\r\n          - name: JwtSettings__SecretKey\r\n            secretRef: jwt-secret\r\n        resources:\r\n          cpu: 0.5\r\n          memory: 1Gi\r\n        probes:\r\n          - type: Liveness\r\n            httpGet:\r\n              path: "/health"\r\n              port: 8080\r\n            initialDelaySeconds: 15\r\n            periodSeconds: 30\r\n          - type: Readiness\r\n            httpGet:\r\n              path: "/health/ready"\r\n              port: 8080\r\n            initialDelaySeconds: 5\r\n            periodSeconds: 10\r\n    scale:\r\n      minReplicas: 1\r\n      maxReplicas: 10\r\n      rules:\r\n        - name: http-rule\r\n          http:\r\n            requests: 100\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deployment-with-azure-cli",children:"Deployment with Azure CLI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create container app\r\naz containerapp create \\\r\n  --name hotel-management-api \\\r\n  --resource-group rg-hotel-management \\\r\n  --environment hotel-management-env \\\r\n  --image hotelmanagementacr.azurecr.io/hotel-management-api:latest \\\r\n  --target-port 8080 \\\r\n  --ingress external \\\r\n  --min-replicas 1 \\\r\n  --max-replicas 10 \\\r\n  --cpu 0.5 \\\r\n  --memory 1Gi \\\r\n  --secrets "connection-string=Server=tcp:hotel-sql-server.database.windows.net,1433;Initial Catalog=HotelManagement;User ID=adminuser;Password=YourPassword123!" \\\r\n  --env-vars "ASPNETCORE_ENVIRONMENT=Production" "ConnectionStrings__DefaultConnection=secretref:connection-string"\r\n\r\n# Update container app\r\naz containerapp update \\\r\n  --name hotel-management-api \\\r\n  --resource-group rg-hotel-management \\\r\n  --image hotelmanagementacr.azurecr.io/hotel-management-api:v2.0.0\r\n\r\n# Enable HTTPS\r\naz containerapp ingress enable \\\r\n  --name hotel-management-api \\\r\n  --resource-group rg-hotel-management \\\r\n  --type external \\\r\n  --target-port 8080 \\\r\n  --transport https\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Microservices Architecture"}),": Event-driven and HTTP-based microservices"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Backends"}),": REST APIs with automatic scaling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Background Processing"}),": Event-driven background jobs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Web Applications"}),": Containerized web apps with global distribution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Serverless Workloads"}),": Pay-per-use scaling applications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Development and Testing"}),": Quick deployment for CI/CD pipelines"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,i.jsx)(n.h3,{id:"use-azure-container-apps-when",children:"Use Azure Container Apps when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Building microservices or API-first applications"}),"\n",(0,i.jsx)(n.li,{children:"Need automatic scaling with zero-to-many instances"}),"\n",(0,i.jsx)(n.li,{children:"Want serverless benefits without vendor lock-in"}),"\n",(0,i.jsx)(n.li,{children:"Require event-driven architectures (KEDA integration)"}),"\n",(0,i.jsx)(n.li,{children:"Need simple container deployment without Kubernetes complexity"}),"\n",(0,i.jsx)(n.li,{children:"Building cloud-native applications on Azure"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Need full Kubernetes control and customization"}),"\n",(0,i.jsx)(n.li,{children:"Running Windows containers (limited support)"}),"\n",(0,i.jsx)(n.li,{children:"Require specific networking configurations"}),"\n",(0,i.jsx)(n.li,{children:"Need persistent storage with StatefulSets"}),"\n",(0,i.jsx)(n.li,{children:"Working with legacy applications requiring VMs"}),"\n",(0,i.jsx)(n.li,{children:"Multi-cloud deployment requirements"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,i.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS Fargate"}),": Serverless containers on AWS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Google Cloud Run"}),": Serverless containers on GCP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure Kubernetes Service (AKS)"}),": Full Kubernetes control"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure App Service"}),": Platform-as-a-Service for web apps"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS Lambda"}),": Function-as-a-Service"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure Functions"}),": Serverless functions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fully managed with no infrastructure overhead"}),"\n",(0,i.jsx)(n.li,{children:"Automatic scaling including scale-to-zero"}),"\n",(0,i.jsx)(n.li,{children:"Built-in traffic splitting and blue-green deployments"}),"\n",(0,i.jsx)(n.li,{children:"KEDA integration for event-driven scaling"}),"\n",(0,i.jsx)(n.li,{children:"Pay-per-use pricing model"}),"\n",(0,i.jsx)(n.li,{children:"Simple deployment and management"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Limited to Linux containers primarily"}),"\n",(0,i.jsx)(n.li,{children:"Less control compared to full Kubernetes"}),"\n",(0,i.jsx)(n.li,{children:"Azure-specific (vendor lock-in)"}),"\n",(0,i.jsx)(n.li,{children:"Newer service with evolving features"}),"\n",(0,i.jsx)(n.li,{children:"Limited persistent storage options"}),"\n",(0,i.jsx)(n.li,{children:"Cold start latency for scale-to-zero scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,i.jsx)(n.h3,{id:"bicep-template-for-infrastructure",children:"Bicep Template for Infrastructure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bicep",children:"// main.bicep\r\n@description('Location for all resources')\r\nparam location string = resourceGroup().location\r\n\r\n@description('Name of the Container Apps Environment')\r\nparam environmentName string = 'hotel-management-env'\r\n\r\n@description('Name of the Container App')\r\nparam containerAppName string = 'hotel-management-api'\r\n\r\n@description('Container image')\r\nparam containerImage string = 'hotelmanagementacr.azurecr.io/hotel-management-api:latest'\r\n\r\n// Container Apps Environment\r\nresource environment 'Microsoft.App/managedEnvironments@2023-05-01' = {\r\n  name: environmentName\r\n  location: location\r\n  properties: {\r\n    daprAIInstrumentationKey: ''\r\n    daprAIConnectionString: ''\r\n    vnetConfiguration: {}\r\n    zoneRedundant: false\r\n  }\r\n}\r\n\r\n// Container App\r\nresource containerApp 'Microsoft.App/containerApps@2023-05-01' = {\r\n  name: containerAppName\r\n  location: location\r\n  properties: {\r\n    managedEnvironmentId: environment.id\r\n    configuration: {\r\n      secrets: [\r\n        {\r\n          name: 'connection-string'\r\n          value: 'Server=tcp:hotel-sql-server.database.windows.net,1433;Initial Catalog=HotelManagement;User ID=adminuser;Password=YourPassword123!;'\r\n        }\r\n        {\r\n          name: 'jwt-secret'\r\n          value: 'your-super-secret-jwt-key-that-is-at-least-256-bits-long'\r\n        }\r\n      ]\r\n      ingress: {\r\n        external: true\r\n        targetPort: 8080\r\n        allowInsecure: false\r\n        traffic: [\r\n          {\r\n            weight: 100\r\n            latestRevision: true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    template: {\r\n      containers: [\r\n        {\r\n          image: containerImage\r\n          name: 'hotel-api'\r\n          env: [\r\n            {\r\n              name: 'ASPNETCORE_ENVIRONMENT'\r\n              value: 'Production'\r\n            }\r\n            {\r\n              name: 'ASPNETCORE_URLS'\r\n              value: 'http://+:8080'\r\n            }\r\n            {\r\n              name: 'ConnectionStrings__DefaultConnection'\r\n              secretRef: 'connection-string'\r\n            }\r\n            {\r\n              name: 'JwtSettings__SecretKey'\r\n              secretRef: 'jwt-secret'\r\n            }\r\n          ]\r\n          resources: {\r\n            cpu: json('0.5')\r\n            memory: '1Gi'\r\n          }\r\n          probes: [\r\n            {\r\n              type: 'Liveness'\r\n              httpGet: {\r\n                path: '/health'\r\n                port: 8080\r\n              }\r\n              initialDelaySeconds: 15\r\n              periodSeconds: 30\r\n            }\r\n            {\r\n              type: 'Readiness'\r\n              httpGet: {\r\n                path: '/health/ready'\r\n                port: 8080\r\n              }\r\n              initialDelaySeconds: 5\r\n              periodSeconds: 10\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n      scale: {\r\n        minReplicas: 1\r\n        maxReplicas: 10\r\n        rules: [\r\n          {\r\n            name: 'http-scaling'\r\n            http: {\r\n              requests: 100\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\noutput containerAppFQDN string = containerApp.properties.configuration.ingress.fqdn\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deployment-script",children:"Deployment Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# deploy.sh\r\n\r\n# Variables\r\nRESOURCE_GROUP="rg-hotel-management"\r\nLOCATION="eastus"\r\nACR_NAME="hotelmanagementacr"\r\nAPP_NAME="hotel-management-api"\r\n\r\n# Create resource group\r\naz group create --name $RESOURCE_GROUP --location $LOCATION\r\n\r\n# Deploy infrastructure\r\naz deployment group create \\\r\n  --resource-group $RESOURCE_GROUP \\\r\n  --template-file main.bicep \\\r\n  --parameters containerAppName=$APP_NAME\r\n\r\n# Get the FQDN\r\nFQDN=$(az deployment group show \\\r\n  --resource-group $RESOURCE_GROUP \\\r\n  --name main \\\r\n  --query properties.outputs.containerAppFQDN.value \\\r\n  --output tsv)\r\n\r\necho "Application deployed at: https://$FQDN"\r\n\r\n# Test the deployment\r\ncurl -k "https://$FQDN/health"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/deploy-to-containerapp.yml\r\nname: Deploy to Azure Container Apps\r\n\r\non:\r\n  push:\r\n    branches: [main]\r\n  workflow_dispatch:\r\n\r\nenv:\r\n  REGISTRY_NAME: hotelmanagementacr\r\n  RESOURCE_GROUP: rg-hotel-management\r\n  CONTAINER_APP_NAME: hotel-management-api\r\n\r\njobs:\r\n  build-and-deploy:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n\r\n      - name: Setup .NET\r\n        uses: actions/setup-dotnet@v3\r\n        with:\r\n          dotnet-version: "8.0.x"\r\n\r\n      - name: Restore dependencies\r\n        run: dotnet restore\r\n\r\n      - name: Build\r\n        run: dotnet build --no-restore -c Release\r\n\r\n      - name: Test\r\n        run: dotnet test --no-build --verbosity normal\r\n\r\n      - name: Azure Login\r\n        uses: azure/login@v1\r\n        with:\r\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\r\n\r\n      - name: Build and push Docker image\r\n        run: |\r\n          az acr build --registry $REGISTRY_NAME \\\r\n            --image $CONTAINER_APP_NAME:${{ github.sha }} \\\r\n            --image $CONTAINER_APP_NAME:latest .\r\n\r\n      - name: Deploy to Container App\r\n        run: |\r\n          az containerapp update \\\r\n            --name $CONTAINER_APP_NAME \\\r\n            --resource-group $RESOURCE_GROUP \\\r\n            --image $REGISTRY_NAME.azurecr.io/$CONTAINER_APP_NAME:${{ github.sha }}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);