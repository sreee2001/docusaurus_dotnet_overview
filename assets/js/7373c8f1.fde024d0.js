"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8221],{5349:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Topics/AdvancedTopics/gRPC","title":"gRPC","description":"52. gRPC","source":"@site/docs/Topics/12_AdvancedTopics/52_gRPC.md","sourceDirName":"Topics/12_AdvancedTopics","slug":"/Topics/AdvancedTopics/gRPC","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/gRPC","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":52,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Https_and_TLS","permalink":"/docusaurus_dotnet_overview/docs/Topics/Security/Https_and_TLS"},"next":{"title":"GraphQL","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/GraphQL"}}');var t=r(4848),i=r(8453);const s={},a=void 0,c={},l=[{value:"52. gRPC",id:"52-grpc",level:2},{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Use Cases",id:"use-cases",level:3},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:3},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"52-grpc",children:"52. gRPC"}),"\n",(0,t.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsx)(n.p,{children:"gRPC is a modern, open-source, high-performance Remote Procedure Call (RPC) framework that can run anywhere. It uses HTTP/2 for transport, Protocol Buffers as the interface description language, and provides features like authentication, bidirectional streaming, flow control, blocking or nonblocking bindings, and cancellation and timeouts."}),"\n",(0,t.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsx)(n.p,{children:"gRPC is a language-agnostic, high-performance Remote Procedure Call (RPC) framework. gRPC uses HTTP/2 as its transport protocol and Protocol Buffers (protobuf) as its message format, enabling efficient communication between services in distributed systems."}),"\n",(0,t.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet add package Grpc.AspNetCore\r\ndotnet add package Grpc.Tools\r\ndotnet add package Google.Protobuf\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Proto Definition:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'// Protos/hotel.proto\r\nsyntax = "proto3";\r\n\r\noption csharp_namespace = "HotelManagement.Grpc";\r\n\r\npackage hotel;\r\n\r\n// Hotel service definition\r\nservice HotelService {\r\n  rpc GetRoom (GetRoomRequest) returns (RoomResponse);\r\n  rpc CreateBooking (CreateBookingRequest) returns (BookingResponse);\r\n  rpc GetBookings (GetBookingsRequest) returns (stream BookingResponse);\r\n  rpc BookingStream (stream CreateBookingRequest) returns (stream BookingResponse);\r\n}\r\n\r\n// Messages\r\nmessage GetRoomRequest {\r\n  int32 room_id = 1;\r\n}\r\n\r\nmessage RoomResponse {\r\n  int32 id = 1;\r\n  string name = 2;\r\n  string type = 3;\r\n  double price_per_night = 4;\r\n  int32 max_occupancy = 5;\r\n  repeated string amenities = 6;\r\n  bool is_available = 7;\r\n}\r\n\r\nmessage CreateBookingRequest {\r\n  string customer_id = 1;\r\n  int32 room_id = 2;\r\n  string check_in = 3;  // ISO 8601 date string\r\n  string check_out = 4; // ISO 8601 date string\r\n  int32 guests = 5;\r\n}\r\n\r\nmessage BookingResponse {\r\n  int32 id = 1;\r\n  string customer_id = 2;\r\n  int32 room_id = 3;\r\n  string check_in = 4;\r\n  string check_out = 5;\r\n  double total_amount = 6;\r\n  string status = 7;\r\n  string created_at = 8;\r\n}\r\n\r\nmessage GetBookingsRequest {\r\n  string customer_id = 1;\r\n  int32 page = 2;\r\n  int32 page_size = 3;\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"gRPC Server Implementation:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add gRPC services\r\nbuilder.Services.AddGrpc(options =>\r\n{\r\n    options.EnableDetailedErrors = builder.Environment.IsDevelopment();\r\n    options.MaxReceiveMessageSize = 4 * 1024 * 1024; // 4MB\r\n    options.MaxSendMessageSize = 4 * 1024 * 1024; // 4MB\r\n});\r\n\r\n// Add application services\r\nbuilder.Services.AddScoped<IRoomRepository, RoomRepository>();\r\nbuilder.Services.AddScoped<IBookingRepository, BookingRepository>();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure gRPC endpoints\r\napp.MapGrpcService<HotelGrpcService>();\r\n\r\n// Enable gRPC-Web for browser clients\r\napp.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });\r\n\r\n// Add gRPC reflection for development\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.MapGrpcReflectionService();\r\n}\r\n\r\napp.Run();\r\n\r\n// Services/HotelGrpcService.cs\r\nusing Grpc.Core;\r\nusing HotelManagement.Grpc;\r\n\r\npublic class HotelGrpcService : HotelService.HotelServiceBase\r\n{\r\n    private readonly IRoomRepository _roomRepository;\r\n    private readonly IBookingRepository _bookingRepository;\r\n    private readonly ILogger<HotelGrpcService> _logger;\r\n\r\n    public HotelGrpcService(\r\n        IRoomRepository roomRepository,\r\n        IBookingRepository bookingRepository,\r\n        ILogger<HotelGrpcService> logger)\r\n    {\r\n        _roomRepository = roomRepository;\r\n        _bookingRepository = bookingRepository;\r\n        _logger = logger;\r\n    }\r\n\r\n    public override async Task<RoomResponse> GetRoom(GetRoomRequest request, ServerCallContext context)\r\n    {\r\n        try\r\n        {\r\n            var room = await _roomRepository.GetByIdAsync(request.RoomId);\r\n            if (room == null)\r\n            {\r\n                throw new RpcException(new Status(StatusCode.NotFound, $"Room {request.RoomId} not found"));\r\n            }\r\n\r\n            return new RoomResponse\r\n            {\r\n                Id = room.Id,\r\n                Name = room.Name,\r\n                Type = room.Type,\r\n                PricePerNight = (double)room.PricePerNight,\r\n                MaxOccupancy = room.MaxOccupancy,\r\n                IsAvailable = room.IsAvailable\r\n            };\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, "Error getting room {RoomId}", request.RoomId);\r\n            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));\r\n        }\r\n    }\r\n\r\n    public override async Task<BookingResponse> CreateBooking(CreateBookingRequest request, ServerCallContext context)\r\n    {\r\n        try\r\n        {\r\n            // Validate dates\r\n            if (!DateTime.TryParse(request.CheckIn, out var checkIn) ||\r\n                !DateTime.TryParse(request.CheckOut, out var checkOut))\r\n            {\r\n                throw new RpcException(new Status(StatusCode.InvalidArgument, "Invalid date format"));\r\n            }\r\n\r\n            if (checkOut <= checkIn)\r\n            {\r\n                throw new RpcException(new Status(StatusCode.InvalidArgument, "Check-out must be after check-in"));\r\n            }\r\n\r\n            // Check room availability\r\n            var room = await _roomRepository.GetByIdAsync(request.RoomId);\r\n            if (room == null || !room.IsAvailable)\r\n            {\r\n                throw new RpcException(new Status(StatusCode.FailedPrecondition, "Room not available"));\r\n            }\r\n\r\n            // Create booking\r\n            var booking = new Booking\r\n            {\r\n                CustomerId = request.CustomerId,\r\n                RoomId = request.RoomId,\r\n                CheckIn = checkIn,\r\n                CheckOut = checkOut,\r\n                Guests = request.Guests,\r\n                TotalAmount = (decimal)room.PricePerNight * (checkOut - checkIn).Days,\r\n                Status = "Confirmed",\r\n                CreatedAt = DateTime.UtcNow\r\n            };\r\n\r\n            await _bookingRepository.AddAsync(booking);\r\n\r\n            return new BookingResponse\r\n            {\r\n                Id = booking.Id,\r\n                CustomerId = booking.CustomerId,\r\n                RoomId = booking.RoomId,\r\n                CheckIn = booking.CheckIn.ToString("O"),\r\n                CheckOut = booking.CheckOut.ToString("O"),\r\n                TotalAmount = (double)booking.TotalAmount,\r\n                Status = booking.Status,\r\n                CreatedAt = booking.CreatedAt.ToString("O")\r\n            };\r\n        }\r\n        catch (RpcException)\r\n        {\r\n            throw;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, "Error creating booking");\r\n            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));\r\n        }\r\n    }\r\n\r\n    public override async Task GetBookings(GetBookingsRequest request,\r\n        IServerStreamWriter<BookingResponse> responseStream, ServerCallContext context)\r\n    {\r\n        try\r\n        {\r\n            var bookings = await _bookingRepository.GetByCustomerIdAsync(request.CustomerId,\r\n                request.Page, request.PageSize);\r\n\r\n            foreach (var booking in bookings)\r\n            {\r\n                if (context.CancellationToken.IsCancellationRequested)\r\n                    break;\r\n\r\n                var response = new BookingResponse\r\n                {\r\n                    Id = booking.Id,\r\n                    CustomerId = booking.CustomerId,\r\n                    RoomId = booking.RoomId,\r\n                    CheckIn = booking.CheckIn.ToString("O"),\r\n                    CheckOut = booking.CheckOut.ToString("O"),\r\n                    TotalAmount = (double)booking.TotalAmount,\r\n                    Status = booking.Status,\r\n                    CreatedAt = booking.CreatedAt.ToString("O")\r\n                };\r\n\r\n                await responseStream.WriteAsync(response);\r\n                await Task.Delay(100, context.CancellationToken); // Simulate processing time\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, "Error streaming bookings for customer {CustomerId}", request.CustomerId);\r\n            throw new RpcException(new Status(StatusCode.Internal, "Internal server error"));\r\n        }\r\n    }\r\n\r\n    public override async Task<BookingResponse> BookingStream(\r\n        IAsyncStreamReader<CreateBookingRequest> requestStream,\r\n        ServerCallContext context)\r\n    {\r\n        var bookingCount = 0;\r\n        var totalAmount = 0.0;\r\n\r\n        await foreach (var request in requestStream.ReadAllAsync())\r\n        {\r\n            try\r\n            {\r\n                var booking = await CreateBooking(request, context);\r\n                bookingCount++;\r\n                totalAmount += booking.TotalAmount;\r\n            }\r\n            catch (RpcException ex)\r\n            {\r\n                _logger.LogWarning("Failed to create booking in stream: {Error}", ex.Status.Detail);\r\n            }\r\n        }\r\n\r\n        return new BookingResponse\r\n        {\r\n            Id = bookingCount,\r\n            TotalAmount = totalAmount,\r\n            Status = $"Processed {bookingCount} bookings"\r\n        };\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"gRPC Client:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Client/Program.cs\r\nusing Grpc.Net.Client;\r\nusing HotelManagement.Grpc;\r\n\r\n// Create gRPC channel\r\nusing var channel = GrpcChannel.ForAddress("https://localhost:7001");\r\nvar client = new HotelService.HotelServiceClient(channel);\r\n\r\n// Unary call\r\nvar roomRequest = new GetRoomRequest { RoomId = 1 };\r\nvar roomResponse = await client.GetRoomAsync(roomRequest);\r\nConsole.WriteLine($"Room: {roomResponse.Name} - ${roomResponse.PricePerNight}/night");\r\n\r\n// Server streaming\r\nvar bookingsRequest = new GetBookingsRequest\r\n{\r\n    CustomerId = "CUST001",\r\n    Page = 1,\r\n    PageSize = 10\r\n};\r\n\r\nusing var streamingCall = client.GetBookings(bookingsRequest);\r\nawait foreach (var booking in streamingCall.ResponseStream.ReadAllAsync())\r\n{\r\n    Console.WriteLine($"Booking {booking.Id}: {booking.Status}");\r\n}\r\n\r\n// Client streaming example would go here...\n'})}),"\n",(0,t.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"High-Performance APIs"}),": Low-latency, high-throughput service communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Microservices Communication"}),": Efficient inter-service communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Real-time Systems"}),": Streaming data and bidirectional communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mobile Applications"}),": Efficient mobile-to-server communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IoT Applications"}),": Device-to-cloud communication with binary protocols"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-language Environments"}),": Language-agnostic service interfaces"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use gRPC when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need high-performance, low-latency communication"}),"\n",(0,t.jsx)(n.li,{children:"Building microservices with type-safe contracts"}),"\n",(0,t.jsx)(n.li,{children:"Require streaming capabilities"}),"\n",(0,t.jsx)(n.li,{children:"Working in polyglot environments"}),"\n",(0,t.jsx)(n.li,{children:"Need efficient binary serialization"}),"\n",(0,t.jsx)(n.li,{children:"Building internal service APIs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Consider alternatives when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Building public web APIs (REST is more accessible)"}),"\n",(0,t.jsx)(n.li,{children:"Working with web browsers (limited gRPC support)"}),"\n",(0,t.jsx)(n.li,{children:"Need human-readable messages for debugging"}),"\n",(0,t.jsx)(n.li,{children:"Working with legacy systems"}),"\n",(0,t.jsx)(n.li,{children:"Team lacks Protocol Buffers expertise"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,t.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REST APIs"}),": HTTP-based, human-readable, widely supported"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Apache Thrift"}),": Cross-language RPC framework"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Apache Avro"}),": Data serialization system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MessagePack"}),": Efficient binary serialization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JSON-RPC"}),": Lightweight remote procedure call protocol"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WebSockets"}),": Real-time bidirectional communication"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"High performance and efficiency"}),"\n",(0,t.jsx)(n.li,{children:"Strong typing with Protocol Buffers"}),"\n",(0,t.jsx)(n.li,{children:"Built-in streaming support"}),"\n",(0,t.jsx)(n.li,{children:"Language agnostic"}),"\n",(0,t.jsx)(n.li,{children:"HTTP/2 benefits (multiplexing, compression)"}),"\n",(0,t.jsx)(n.li,{children:"Excellent tooling and code generation"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Limited browser support"}),"\n",(0,t.jsx)(n.li,{children:"Learning curve for Protocol Buffers"}),"\n",(0,t.jsx)(n.li,{children:"Binary format makes debugging harder"}),"\n",(0,t.jsx)(n.li,{children:"Requires HTTP/2 infrastructure"}),"\n",(0,t.jsx)(n.li,{children:"Less human-readable than JSON/XML"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Complete gRPC Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- HotelManagement.Grpc.csproj --\x3e\r\n<Project Sdk="Microsoft.NET.Sdk.Web">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include="Grpc.AspNetCore" Version="2.57.0" />\r\n    <PackageReference Include="Grpc.AspNetCore.Server.Reflection" Version="2.57.0" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Protobuf Include="Protos\\hotel.proto" GrpcServices="Server" />\r\n  </ItemGroup>\r\n</Project>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(6540);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);