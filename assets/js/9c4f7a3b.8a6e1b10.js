"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[9066],{2802:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Topics/WebTechnologies/WebAPI","title":"Web API\'s","description":"Short Introduction","source":"@site/docs/Topics/03_WebTechnologies/14_WebAPI.md","sourceDirName":"Topics/03_WebTechnologies","slug":"/Topics/WebTechnologies/web_api","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/web_api","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"web_api","permalink":"/docusaurus_dotnet_overview/docs/tags/web-api"},{"inline":true,"label":"architecture","permalink":"/docusaurus_dotnet_overview/docs/tags/architecture"},{"inline":true,"label":"pattern","permalink":"/docusaurus_dotnet_overview/docs/tags/pattern"},{"inline":true,"label":"microservices","permalink":"/docusaurus_dotnet_overview/docs/tags/microservices"}],"version":"current","sidebarPosition":14,"frontMatter":{"slug":"web_api","title":"Web API\'s","tags":["dotnet","core","web_api","architecture","pattern","microservices"]},"sidebar":"tutorialSidebar","previous":{"title":"Model-View-Controller","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/mvc"},"next":{"title":"Razor Pages","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/razor_pages"}}');var s=t(4848),o=t(8453);const i={slug:"web_api",title:"Web API's",tags:["dotnet","core","web_api","architecture","pattern","microservices"]},a="Web APIs",c={},d=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"DTOs (Data Transfer Objects)",id:"dtos-data-transfer-objects",level:2},{value:"API Documentation with Swagger",id:"api-documentation-with-swagger",level:2},{value:"Use Cases",id:"use-cases",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"web-apis",children:"Web APIs"})}),"\n",(0,s.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,s.jsx)(r.p,{children:"Web APIs in ASP.NET Core provide a framework for building HTTP-based services that can be consumed by various clients including web applications, mobile apps, and other services."}),"\n",(0,s.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,s.jsx)(r.p,{children:"ASP.NET Core Web API is a framework for building HTTP services that can reach a broad range of clients, including browsers, mobile devices, and traditional desktop applications."}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'// API Controller\r\n[ApiController]\r\n[Route("api/[controller]")]\r\npublic class ProductsController : ControllerBase\r\n{\r\n    private readonly IProductService _productService;\r\n    private readonly IMapper _mapper;\r\n\r\n    public ProductsController(IProductService productService, IMapper mapper)\r\n    {\r\n        _productService = productService;\r\n        _mapper = mapper;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets all products\r\n    /// </summary>\r\n    /// <returns>List of products</returns>\r\n    [HttpGet]\r\n    [ProducesResponseType(typeof(IEnumerable<ProductDto>), StatusCodes.Status200OK)]\r\n    public async Task<ActionResult<IEnumerable<ProductDto>>> GetProducts()\r\n    {\r\n        var products = await _productService.GetAllProductsAsync();\r\n        var dtos = _mapper.Map<IEnumerable<ProductDto>>(products);\r\n        return Ok(dtos);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets a product by ID\r\n    /// </summary>\r\n    /// <param name="id">Product ID</param>\r\n    /// <returns>Product details</returns>\r\n    [HttpGet("{id}")]\r\n    [ProducesResponseType(typeof(ProductDto), StatusCodes.Status200OK)]\r\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\r\n    public async Task<ActionResult<ProductDto>> GetProduct(int id)\r\n    {\r\n        var product = await _productService.GetProductByIdAsync(id);\r\n        if (product == null)\r\n            return NotFound();\r\n\r\n        var dto = _mapper.Map<ProductDto>(product);\r\n        return Ok(dto);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Creates a new product\r\n    /// </summary>\r\n    /// <param name="dto">Product creation data</param>\r\n    /// <returns>Created product</returns>\r\n    [HttpPost]\r\n    [ProducesResponseType(typeof(ProductDto), StatusCodes.Status201Created)]\r\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\r\n    public async Task<ActionResult<ProductDto>> CreateProduct(CreateProductDto dto)\r\n    {\r\n        if (!ModelState.IsValid)\r\n            return BadRequest(ModelState);\r\n\r\n        var product = await _productService.CreateProductAsync(dto);\r\n        var productDto = _mapper.Map<ProductDto>(product);\r\n\r\n        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, productDto);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Updates an existing product\r\n    /// </summary>\r\n    /// <param name="id">Product ID</param>\r\n    /// <param name="dto">Product update data</param>\r\n    /// <returns>No content</returns>\r\n    [HttpPut("{id}")]\r\n    [ProducesResponseType(StatusCodes.Status204NoContent)]\r\n    [ProducesResponseType(StatusCodes.Status400BadRequest)]\r\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\r\n    public async Task<IActionResult> UpdateProduct(int id, UpdateProductDto dto)\r\n    {\r\n        if (id != dto.Id)\r\n            return BadRequest();\r\n\r\n        if (!ModelState.IsValid)\r\n            return BadRequest(ModelState);\r\n\r\n        var exists = await _productService.ProductExistsAsync(id);\r\n        if (!exists)\r\n            return NotFound();\r\n\r\n        await _productService.UpdateProductAsync(dto);\r\n        return NoContent();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Deletes a product\r\n    /// </summary>\r\n    /// <param name="id">Product ID</param>\r\n    /// <returns>No content</returns>\r\n    [HttpDelete("{id}")]\r\n    [ProducesResponseType(StatusCodes.Status204NoContent)]\r\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\r\n    public async Task<IActionResult> DeleteProduct(int id)\r\n    {\r\n        var exists = await _productService.ProductExistsAsync(id);\r\n        if (!exists)\r\n            return NotFound();\r\n\r\n        await _productService.DeleteProductAsync(id);\r\n        return NoContent();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"dtos-data-transfer-objects",children:"DTOs (Data Transfer Objects)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"public class ProductDto\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; } = string.Empty;\r\n    public decimal Price { get; set; }\r\n    public string Description { get; set; } = string.Empty;\r\n    public string CategoryName { get; set; } = string.Empty;\r\n}\r\n\r\npublic class CreateProductDto\r\n{\r\n    [Required]\r\n    [StringLength(100)]\r\n    public string Name { get; set; } = string.Empty;\r\n\r\n    [Required]\r\n    [Range(0.01, double.MaxValue)]\r\n    public decimal Price { get; set; }\r\n\r\n    [StringLength(500)]\r\n    public string Description { get; set; } = string.Empty;\r\n\r\n    [Required]\r\n    public int CategoryId { get; set; }\r\n}\r\n\r\npublic class UpdateProductDto\r\n{\r\n    public int Id { get; set; }\r\n\r\n    [Required]\r\n    [StringLength(100)]\r\n    public string Name { get; set; } = string.Empty;\r\n\r\n    [Required]\r\n    [Range(0.01, double.MaxValue)]\r\n    public decimal Price { get; set; }\r\n\r\n    [StringLength(500)]\r\n    public string Description { get; set; } = string.Empty;\r\n\r\n    [Required]\r\n    public int CategoryId { get; set; }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"api-documentation-with-swagger",children:"API Documentation with Swagger"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'// Program.cs\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen(c =>\r\n{\r\n    c.SwaggerDoc("v1", new OpenApiInfo\r\n    {\r\n        Title = "Products API",\r\n        Version = "v1",\r\n        Description = "API for managing products"\r\n    });\r\n\r\n    // Include XML comments\r\n    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";\r\n    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\r\n    c.IncludeXmlComments(xmlPath);\r\n});\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI(c =>\r\n    {\r\n        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Products API V1");\r\n    });\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Mobile app backends"}),"\n",(0,s.jsx)(r.li,{children:"Microservices"}),"\n",(0,s.jsx)(r.li,{children:"Integration with third-party systems"}),"\n",(0,s.jsx)(r.li,{children:"Single Page Applications (SPAs)"}),"\n",(0,s.jsx)(r.li,{children:"Inter-service communication"}),"\n"]})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(6540);const s={},o=n.createContext(s);function i(e){const r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);