"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[4904],{7767:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Topics/DataAccessAndPersistence/EntityFrameworkCoreAdvanced","title":"Entity Framework Core Advanced","description":"Short Introduction","source":"@site/docs/Topics/04_DataAccessAndPersistence/18_EntityFrameworkCoreAdvanced.md","sourceDirName":"Topics/04_DataAccessAndPersistence","slug":"/Topics/DataAccessAndPersistence/entity_framework_core_advanced","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/entity_framework_core_advanced","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"entity framework","permalink":"/docusaurus_dotnet_overview/docs/tags/entity-framework"},{"inline":true,"label":"advanced","permalink":"/docusaurus_dotnet_overview/docs/tags/advanced"},{"inline":true,"label":"query","permalink":"/docusaurus_dotnet_overview/docs/tags/query"},{"inline":true,"label":"linq","permalink":"/docusaurus_dotnet_overview/docs/tags/linq"},{"inline":true,"label":"sql","permalink":"/docusaurus_dotnet_overview/docs/tags/sql"},{"inline":true,"label":"database","permalink":"/docusaurus_dotnet_overview/docs/tags/database"}],"version":"current","sidebarPosition":18,"frontMatter":{"slug":"entity_framework_core_advanced","title":"Entity Framework Core Advanced","tags":["dotnet","core","entity framework","advanced","query","linq","sql","database"]},"sidebar":"tutorialSidebar","previous":{"title":"SignalR","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/signalr"},"next":{"title":"Dapper","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/dapper"}}');var a=n(4848),i=n(8453);const o={slug:"entity_framework_core_advanced",title:"Entity Framework Core Advanced",tags:["dotnet","core","entity framework","advanced","query","linq","sql","database"]},s="Entity Framework Core Advanced",d={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Advanced Querying",id:"advanced-querying",level:2},{value:"Advanced Configurations",id:"advanced-configurations",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Migrations and Database Management",id:"migrations-and-database-management",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"entity-framework-core-advanced",children:"Entity Framework Core Advanced"})}),"\n",(0,a.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,a.jsx)(r.p,{children:"Advanced Entity Framework Core topics including performance optimization, advanced queries, migrations, and database design patterns."}),"\n",(0,a.jsx)(r.h2,{id:"advanced-querying",children:"Advanced Querying"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'// Complex queries with LINQ\r\npublic class ProductService : IProductService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n\r\n    public ProductService(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n\r\n    // Projection to avoid loading full entities\r\n    public async Task<IEnumerable<ProductSummaryDto>> GetProductSummariesAsync()\r\n    {\r\n        return await _context.Products\r\n            .Select(p => new ProductSummaryDto\r\n            {\r\n                Id = p.Id,\r\n                Name = p.Name,\r\n                Price = p.Price,\r\n                CategoryName = p.Category!.Name\r\n            })\r\n            .ToListAsync();\r\n    }\r\n\r\n    // Filtered and paged results\r\n    public async Task<PagedResult<Product>> GetProductsPagedAsync(\r\n        int page, int pageSize, string? searchTerm = null)\r\n    {\r\n        var query = _context.Products.Include(p => p.Category).AsQueryable();\r\n\r\n        if (!string.IsNullOrEmpty(searchTerm))\r\n        {\r\n            query = query.Where(p => p.Name.Contains(searchTerm) ||\r\n                                   p.Description.Contains(searchTerm));\r\n        }\r\n\r\n        var totalCount = await query.CountAsync();\r\n        var items = await query\r\n            .Skip((page - 1) * pageSize)\r\n            .Take(pageSize)\r\n            .ToListAsync();\r\n\r\n        return new PagedResult<Product>\r\n        {\r\n            Items = items,\r\n            TotalCount = totalCount,\r\n            Page = page,\r\n            PageSize = pageSize\r\n        };\r\n    }\r\n\r\n    // Raw SQL queries\r\n    public async Task<IEnumerable<Product>> GetExpensiveProductsAsync(decimal minPrice)\r\n    {\r\n        return await _context.Products\r\n            .FromSqlRaw("SELECT * FROM Products WHERE Price >= {0}", minPrice)\r\n            .ToListAsync();\r\n    }\r\n\r\n    // Stored procedure execution\r\n    public async Task<IEnumerable<ProductSalesReport>> GetSalesReportAsync(\r\n        DateTime startDate, DateTime endDate)\r\n    {\r\n        return await _context.Set<ProductSalesReport>()\r\n            .FromSqlRaw("EXEC GetProductSalesReport @StartDate = {0}, @EndDate = {1}",\r\n                       startDate, endDate)\r\n            .ToListAsync();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"advanced-configurations",children:"Advanced Configurations"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'public class ApplicationDbContext : DbContext\r\n{\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        // Indexes\r\n        modelBuilder.Entity<Product>()\r\n            .HasIndex(p => p.Name)\r\n            .IsUnique();\r\n\r\n        modelBuilder.Entity<Product>()\r\n            .HasIndex(p => new { p.CategoryId, p.Price });\r\n\r\n        // Value conversions\r\n        modelBuilder.Entity<Order>()\r\n            .Property(e => e.Status)\r\n            .HasConversion<string>();\r\n\r\n        // Shadow properties\r\n        modelBuilder.Entity<Product>()\r\n            .Property<DateTime>("LastModified");\r\n\r\n        // Global query filters\r\n        modelBuilder.Entity<Product>()\r\n            .HasQueryFilter(p => !p.IsDeleted);\r\n\r\n        // Table splitting\r\n        modelBuilder.Entity<Customer>()\r\n            .ToTable("Customers");\r\n\r\n        modelBuilder.Entity<CustomerDetails>()\r\n            .ToTable("Customers");\r\n\r\n        modelBuilder.Entity<Customer>()\r\n            .HasOne(c => c.Details)\r\n            .WithOne(d => d.Customer)\r\n            .HasForeignKey<CustomerDetails>(d => d.CustomerId);\r\n\r\n        // Owned types\r\n        modelBuilder.Entity<Order>()\r\n            .OwnsOne(o => o.ShippingAddress, sa =>\r\n            {\r\n                sa.Property(a => a.Street).HasColumnName("ShippingStreet");\r\n                sa.Property(a => a.City).HasColumnName("ShippingCity");\r\n                sa.Property(a => a.ZipCode).HasColumnName("ShippingZipCode");\r\n            });\r\n    }\r\n\r\n    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)\r\n    {\r\n        // Automatically set LastModified for all entities\r\n        var entries = ChangeTracker.Entries()\r\n            .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);\r\n\r\n        foreach (var entry in entries)\r\n        {\r\n            entry.Property("LastModified").CurrentValue = DateTime.UtcNow;\r\n        }\r\n\r\n        return await base.SaveChangesAsync(cancellationToken);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'public class OptimizedProductService : IProductService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n\r\n    public OptimizedProductService(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n\r\n    // Split queries for multiple includes\r\n    public async Task<IEnumerable<Order>> GetOrdersWithItemsAsync()\r\n    {\r\n        return await _context.Orders\r\n            .AsSplitQuery()\r\n            .Include(o => o.Items)\r\n                .ThenInclude(i => i.Product)\r\n            .Include(o => o.Customer)\r\n            .ToListAsync();\r\n    }\r\n\r\n    // No-tracking queries for read-only scenarios\r\n    public async Task<IEnumerable<Product>> GetProductsReadOnlyAsync()\r\n    {\r\n        return await _context.Products\r\n            .AsNoTracking()\r\n            .Include(p => p.Category)\r\n            .ToListAsync();\r\n    }\r\n\r\n    // Compiled queries for frequently executed queries\r\n    private static readonly Func<ApplicationDbContext, int, Task<Product?>> GetProductByIdCompiled =\r\n        EF.CompileAsyncQuery((ApplicationDbContext context, int id) =>\r\n            context.Products.FirstOrDefault(p => p.Id == id));\r\n\r\n    public async Task<Product?> GetProductByIdAsync(int id)\r\n    {\r\n        return await GetProductByIdCompiled(_context, id);\r\n    }\r\n\r\n    // Bulk operations\r\n    public async Task UpdateProductPricesAsync(decimal multiplier)\r\n    {\r\n        await _context.Database.ExecuteSqlRawAsync(\r\n            "UPDATE Products SET Price = Price * {0}", multiplier);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"migrations-and-database-management",children:"Migrations and Database Management"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",children:'// Custom migration\r\npublic partial class AddProductIndexes : Migration\r\n{\r\n    protected override void Up(MigrationBuilder migrationBuilder)\r\n    {\r\n        migrationBuilder.CreateIndex(\r\n            name: "IX_Products_Name",\r\n            table: "Products",\r\n            column: "Name",\r\n            unique: true);\r\n\r\n        migrationBuilder.CreateIndex(\r\n            name: "IX_Products_CategoryId_Price",\r\n            table: "Products",\r\n            columns: new[] { "CategoryId", "Price" });\r\n\r\n        // Custom SQL\r\n        migrationBuilder.Sql(@"\r\n            CREATE VIEW ProductSummary AS\r\n            SELECT p.Id, p.Name, p.Price, c.Name as CategoryName\r\n            FROM Products p\r\n            INNER JOIN Categories c ON p.CategoryId = c.Id\r\n        ");\r\n    }\r\n\r\n    protected override void Down(MigrationBuilder migrationBuilder)\r\n    {\r\n        migrationBuilder.DropIndex(\r\n            name: "IX_Products_Name",\r\n            table: "Products");\r\n\r\n        migrationBuilder.DropIndex(\r\n            name: "IX_Products_CategoryId_Price",\r\n            table: "Products");\r\n\r\n        migrationBuilder.Sql("DROP VIEW ProductSummary");\r\n    }\r\n}\n'})})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(6540);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);