"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8706],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},9598:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Topics/CoreDevelopment/EntityFrameworkCore","title":"Entity Framework Core","description":"Short Introduction","source":"@site/docs/Topics/02_CoreDevelopment/07_EntityFrameworkCore.md","sourceDirName":"Topics/02_CoreDevelopment","slug":"/Topics/CoreDevelopment/entity_framework_core","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/entity_framework_core","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"entity framework","permalink":"/docusaurus_dotnet_overview/docs/tags/entity-framework"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"}],"version":"current","sidebarPosition":7,"frontMatter":{"slug":"entity_framework_core","title":"Entity Framework Core","tags":["dotnet","entity framework","core"]},"sidebar":"tutorialSidebar","previous":{"title":"ASP.NET Core","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/asp_dotnet_core"},"next":{"title":"Dependency Injection (DI)","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/dependency_injection"}}');var i=t(4848),o=t(8453);const s={slug:"entity_framework_core",title:"Entity Framework Core",tags:["dotnet","entity framework","core"]},a="Entity Framework Core",c={},l=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use / When Not to Use",id:"when-to-use--when-not-to-use",level:2},{value:"Use EF Core when:",id:"use-ef-core-when",level:3},{value:"Consider alternatives when:",id:"consider-alternatives-when",level:3},{value:"Market Alternatives",id:"market-alternatives",level:2},{value:"Sample Usage",id:"sample-usage",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"entity-framework-core",children:"Entity Framework Core"})}),"\n",(0,i.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Entity Framework Core is a modern object-database mapper for .NET that supports LINQ queries, change tracking, updates, and schema migrations."}),"\n",(0,i.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(n.p,{children:"Entity Framework Core (EF Core) is a lightweight, extensible, open source and cross-platform version of the popular Entity Framework data access technology."}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// DbContext definition\r\npublic class ApplicationDbContext : DbContext\r\n{\r\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\r\n        : base(options) { }\r\n\r\n    public DbSet<Product> Products { get; set; }\r\n    public DbSet<Category> Categories { get; set; }\r\n\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        modelBuilder.Entity<Product>(entity =>\r\n        {\r\n            entity.HasKey(e => e.Id);\r\n            entity.Property(e => e.Name).IsRequired().HasMaxLength(100);\r\n            entity.Property(e => e.Price).HasColumnType("decimal(18,2)");\r\n            entity.HasOne(e => e.Category)\r\n                  .WithMany(c => c.Products)\r\n                  .HasForeignKey(e => e.CategoryId);\r\n        });\r\n    }\r\n}\r\n\r\n// Service registration\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(connectionString));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Data access layer"}),"\n",(0,i.jsx)(n.li,{children:"Object-relational mapping"}),"\n",(0,i.jsx)(n.li,{children:"Database migrations"}),"\n",(0,i.jsx)(n.li,{children:"Complex queries with LINQ"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use--when-not-to-use",children:"When to Use / When Not to Use"}),"\n",(0,i.jsx)(n.h3,{id:"use-ef-core-when",children:"Use EF Core when:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Working with relational databases"}),"\n",(0,i.jsx)(n.li,{children:"Need object-relational mapping"}),"\n",(0,i.jsx)(n.li,{children:"Want type-safe queries"}),"\n",(0,i.jsx)(n.li,{children:"Require change tracking"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple data access requirements"}),"\n",(0,i.jsx)(n.li,{children:"Performance is critical"}),"\n",(0,i.jsx)(n.li,{children:"Working with non-relational data"}),"\n",(0,i.jsx)(n.li,{children:"Team prefers SQL-first approach"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"market-alternatives",children:"Market Alternatives"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dapper (.NET)"}),"\n",(0,i.jsx)(n.li,{children:"Hibernate (Java)"}),"\n",(0,i.jsx)(n.li,{children:"Sequelize (Node.js)"}),"\n",(0,i.jsx)(n.li,{children:"Django ORM (Python)"}),"\n",(0,i.jsx)(n.li,{children:"ActiveRecord (Ruby)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sample-usage",children:"Sample Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// Repository pattern with EF Core\r\npublic class ProductRepository : IProductRepository\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n\r\n    public ProductRepository(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n\r\n    public async Task<IEnumerable<Product>> GetAllAsync()\r\n    {\r\n        return await _context.Products\r\n            .Include(p => p.Category)\r\n            .ToListAsync();\r\n    }\r\n\r\n    public async Task<Product?> GetByIdAsync(int id)\r\n    {\r\n        return await _context.Products\r\n            .Include(p => p.Category)\r\n            .FirstOrDefaultAsync(p => p.Id == id);\r\n    }\r\n\r\n    public async Task<Product> CreateAsync(Product product)\r\n    {\r\n        _context.Products.Add(product);\r\n        await _context.SaveChangesAsync();\r\n        return product;\r\n    }\r\n\r\n    public async Task UpdateAsync(Product product)\r\n    {\r\n        _context.Entry(product).State = EntityState.Modified;\r\n        await _context.SaveChangesAsync();\r\n    }\r\n\r\n    public async Task DeleteAsync(int id)\r\n    {\r\n        var product = await _context.Products.FindAsync(id);\r\n        if (product != null)\r\n        {\r\n            _context.Products.Remove(product);\r\n            await _context.SaveChangesAsync();\r\n        }\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);