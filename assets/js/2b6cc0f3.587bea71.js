"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[3482],{3330:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Topics/CoreDevelopment/ConfigurationManagement","title":"Configuration Management","description":"Short Introduction","source":"@site/docs/Topics/02_CoreDevelopment/09_ConfigurationManagement.md","sourceDirName":"Topics/02_CoreDevelopment","slug":"/Topics/CoreDevelopment/configuration_management","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/configuration_management","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"configuration","permalink":"/docusaurus_dotnet_overview/docs/tags/configuration"},{"inline":true,"label":"management","permalink":"/docusaurus_dotnet_overview/docs/tags/management"}],"version":"current","sidebarPosition":9,"frontMatter":{"slug":"configuration_management","title":"Configuration Management","tags":["dotnet","core","configuration","management"]},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection (DI)","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/dependency_injection"},"next":{"title":"Logging","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/logging"}}');var t=i(4848),o=i(8453);const a={slug:"configuration_management",title:"Configuration Management",tags:["dotnet","core","configuration","management"]},s="Configuration Management",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration Providers",id:"configuration-providers",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Sample Usage",id:"sample-usage",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"configuration-management",children:"Configuration Management"})}),"\n",(0,t.jsx)(e.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsx)(e.p,{children:"Configuration management in .NET Core provides a flexible system for managing application settings from various sources like files, environment variables, and cloud services."}),"\n",(0,t.jsx)(e.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsx)(e.p,{children:"The .NET configuration system provides a key-value based configuration API that works with a variety of configuration providers to supply configuration data to applications."}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'// appsettings.json\r\n{\r\n  "Logging": {\r\n    "LogLevel": {\r\n      "Default": "Information",\r\n      "Microsoft.AspNetCore": "Warning"\r\n    }\r\n  },\r\n  "ConnectionStrings": {\r\n    "DefaultConnection": "Server=(localdb)\\\\mssqllocaldb;Database=MyApp;Trusted_Connection=true"\r\n  },\r\n  "EmailSettings": {\r\n    "SmtpServer": "smtp.gmail.com",\r\n    "Port": 587,\r\n    "Username": "user@example.com",\r\n    "Password": "password"\r\n  }\r\n}\r\n\r\n// Configuration classes\r\npublic class EmailSettings\r\n{\r\n    public string SmtpServer { get; set; } = string.Empty;\r\n    public int Port { get; set; }\r\n    public string Username { get; set; } = string.Empty;\r\n    public string Password { get; set; } = string.Empty;\r\n}\r\n\r\n// Program.cs\r\nbuilder.Services.Configure<EmailSettings>(\r\n    builder.Configuration.GetSection("EmailSettings"));\n'})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-providers",children:"Configuration Providers"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"JSON files (appsettings.json)"}),"\n",(0,t.jsx)(e.li,{children:"Environment variables"}),"\n",(0,t.jsx)(e.li,{children:"Command line arguments"}),"\n",(0,t.jsx)(e.li,{children:"Azure Key Vault"}),"\n",(0,t.jsx)(e.li,{children:"User secrets (development)"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Application settings"}),"\n",(0,t.jsx)(e.li,{children:"Connection strings"}),"\n",(0,t.jsx)(e.li,{children:"Feature flags"}),"\n",(0,t.jsx)(e.li,{children:"Environment-specific configuration"}),"\n",(0,t.jsx)(e.li,{children:"Secrets management"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"sample-usage",children:"Sample Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'// Using IOptions pattern\r\npublic class EmailService : IEmailService\r\n{\r\n    private readonly EmailSettings _emailSettings;\r\n    private readonly ILogger<EmailService> _logger;\r\n\r\n    public EmailService(IOptions<EmailSettings> emailSettings, ILogger<EmailService> logger)\r\n    {\r\n        _emailSettings = emailSettings.Value;\r\n        _logger = logger;\r\n    }\r\n\r\n    public async Task SendEmailAsync(string to, string subject, string body)\r\n    {\r\n        using var client = new SmtpClient(_emailSettings.SmtpServer, _emailSettings.Port);\r\n        // Configure and send email\r\n    }\r\n}\r\n\r\n// Direct configuration access\r\npublic class DatabaseService\r\n{\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public DatabaseService(IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n    }\r\n\r\n    public string GetConnectionString()\r\n    {\r\n        return _configuration.GetConnectionString("DefaultConnection")\r\n               ?? throw new InvalidOperationException("Connection string not found");\r\n    }\r\n}\n'})})]})}function g(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var r=i(6540);const t={},o=r.createContext(t);function a(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);