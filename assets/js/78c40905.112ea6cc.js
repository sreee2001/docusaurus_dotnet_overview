"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8979],{6991:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Topics/WebTechnologies/ModelViewController_MVC","title":"Model-View-Controller","description":"Short Introduction","source":"@site/docs/Topics/03_WebTechnologies/13_ModelViewController_MVC.md","sourceDirName":"Topics/03_WebTechnologies","slug":"/Topics/WebTechnologies/mvc","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/mvc","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"mvc","permalink":"/docusaurus_dotnet_overview/docs/tags/mvc"},{"inline":true,"label":"architecture","permalink":"/docusaurus_dotnet_overview/docs/tags/architecture"},{"inline":true,"label":"pattern","permalink":"/docusaurus_dotnet_overview/docs/tags/pattern"}],"version":"current","sidebarPosition":13,"frontMatter":{"slug":"mvc","title":"Model-View-Controller","tags":["dotnet","core","mvc","architecture","pattern"]},"sidebar":"tutorialSidebar","previous":{"title":"Authentication & Authorization","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/authentication_authorization"},"next":{"title":"Web API\'s","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/web_api"}}');var i=n(4848),o=n(8453);const l={slug:"mvc",title:"Model-View-Controller",tags:["dotnet","core","mvc","architecture","pattern"]},c="MVC (Model-View-Controller)",s={},a=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"View (Razor)",id:"view-razor",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use / When Not to Use",id:"when-to-use--when-not-to-use",level:2},{value:"Use MVC when:",id:"use-mvc-when",level:3},{value:"Consider alternatives when:",id:"consider-alternatives-when",level:3}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"mvc-model-view-controller",children:"MVC (Model-View-Controller)"})}),"\n",(0,i.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(r.p,{children:"MVC is an architectural pattern that separates an application into three main components: Model (data), View (presentation), and Controller (logic)."}),"\n",(0,i.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(r.p,{children:"Model-View-Controller (MVC) is an architectural pattern that separates an application into three main logical components: the model, the view, and the controller, each with distinct responsibilities."}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'// Model\r\npublic class Product\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; } = string.Empty;\r\n    public decimal Price { get; set; }\r\n    public string Description { get; set; } = string.Empty;\r\n    public int CategoryId { get; set; }\r\n    public Category? Category { get; set; }\r\n}\r\n\r\npublic class ProductViewModel\r\n{\r\n    public int Id { get; set; }\r\n    public string Name { get; set; } = string.Empty;\r\n    public decimal Price { get; set; }\r\n    public string FormattedPrice => Price.ToString("C");\r\n    public string CategoryName { get; set; } = string.Empty;\r\n}\r\n\r\n// Controller\r\npublic class ProductsController : Controller\r\n{\r\n    private readonly IProductService _productService;\r\n\r\n    public ProductsController(IProductService productService)\r\n    {\r\n        _productService = productService;\r\n    }\r\n\r\n    public async Task<IActionResult> Index()\r\n    {\r\n        var products = await _productService.GetAllProductsAsync();\r\n        var viewModels = products.Select(p => new ProductViewModel\r\n        {\r\n            Id = p.Id,\r\n            Name = p.Name,\r\n            Price = p.Price,\r\n            CategoryName = p.Category?.Name ?? "Unknown"\r\n        });\r\n        return View(viewModels);\r\n    }\r\n\r\n    public async Task<IActionResult> Details(int id)\r\n    {\r\n        var product = await _productService.GetProductByIdAsync(id);\r\n        if (product == null)\r\n            return NotFound();\r\n\r\n        var viewModel = new ProductViewModel\r\n        {\r\n            Id = product.Id,\r\n            Name = product.Name,\r\n            Price = product.Price,\r\n            CategoryName = product.Category?.Name ?? "Unknown"\r\n        };\r\n\r\n        return View(viewModel);\r\n    }\r\n\r\n    [HttpPost]\r\n    public async Task<IActionResult> Create(CreateProductDto dto)\r\n    {\r\n        if (!ModelState.IsValid)\r\n            return View(dto);\r\n\r\n        await _productService.CreateProductAsync(dto);\r\n        return RedirectToAction(nameof(Index));\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"view-razor",children:"View (Razor)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-html",children:'@model IEnumerable<ProductViewModel>\r\n@{\r\n    ViewData["Title"] = "Products";\r\n}\r\n\r\n<h1>Products</h1>\r\n\r\n<div class="row">\r\n    @foreach (var product in Model)\r\n    {\r\n        <div class="col-md-4 mb-3">\r\n            <div class="card">\r\n                <div class="card-body">\r\n                    <h5 class="card-title">@product.Name</h5>\r\n                    <p class="card-text">@product.FormattedPrice</p>\r\n                    <p class="card-text"><small class="text-muted">@product.CategoryName</small></p>\r\n                    <a href="@Url.Action("Details", new { id = product.Id })" class="btn btn-primary">View Details</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n</div>\n'})}),"\n",(0,i.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Traditional web applications"}),"\n",(0,i.jsx)(r.li,{children:"Server-rendered applications"}),"\n",(0,i.jsx)(r.li,{children:"Applications with complex UI logic"}),"\n",(0,i.jsx)(r.li,{children:"Multi-page applications"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"when-to-use--when-not-to-use",children:"When to Use / When Not to Use"}),"\n",(0,i.jsx)(r.h3,{id:"use-mvc-when",children:"Use MVC when:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Building traditional web applications"}),"\n",(0,i.jsx)(r.li,{children:"Need server-side rendering"}),"\n",(0,i.jsx)(r.li,{children:"SEO is important"}),"\n",(0,i.jsx)(r.li,{children:"Team familiar with MVC pattern"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"consider-alternatives-when",children:"Consider alternatives when:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Building SPAs"}),"\n",(0,i.jsx)(r.li,{children:"Need real-time updates"}),"\n",(0,i.jsx)(r.li,{children:"API-only applications"}),"\n",(0,i.jsx)(r.li,{children:"Simple static sites"}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>c});var t=n(6540);const i={},o=t.createContext(i);function l(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);