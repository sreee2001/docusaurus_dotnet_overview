"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[465],{6944:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Topics/Testing/UnitTesting","title":"Unit Testing","description":"Unit testing involves testing individual components or methods in isolation to verify they work as expected. It\'s the foundation of a robust testing strategy and enables rapid feedback during development.","source":"@site/docs/Topics/05_Testing/23_UnitTesting.md","sourceDirName":"Topics/05_Testing","slug":"/Topics/Testing/unit_testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/unit_testing","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"testing","permalink":"/docusaurus_dotnet_overview/docs/tags/testing"},{"inline":true,"label":"unit_testing","permalink":"/docusaurus_dotnet_overview/docs/tags/unit-testing"},{"inline":true,"label":"quality","permalink":"/docusaurus_dotnet_overview/docs/tags/quality"}],"version":"current","sidebarPosition":23,"frontMatter":{"slug":"unit_testing","title":"Unit Testing","tags":["dotnet","testing","unit_testing","quality"]},"sidebar":"tutorialSidebar","previous":{"title":"Unit of Work","permalink":"/docusaurus_dotnet_overview/docs/Topics/DataAccessAndPersistence/unit_of_work"},"next":{"title":"Test Driven Development","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/tdd"}}');var s=r(4848),i=r(8453);const o={slug:"unit_testing",title:"Unit Testing",tags:["dotnet","testing","unit_testing","quality"]},a="Unit Testing",c={},l=[{value:"Official Definition/Standards",id:"official-definitionstandards",level:2},{value:"Setup and Usage (Tools, Packages, Test Runners)",id:"setup-and-usage-tools-packages-test-runners",level:2},{value:"Primary Testing Frameworks:",id:"primary-testing-frameworks",level:3},{value:"Essential Packages:",id:"essential-packages",level:3},{value:"Test Runners:",id:"test-runners",level:3},{value:"Typical Test Architecture and Patterns",id:"typical-test-architecture-and-patterns",level:2},{value:"Common Patterns:",id:"common-patterns",level:3},{value:"Project Structure:",id:"project-structure",level:3},{value:"Example Test Code",id:"example-test-code",level:2},{value:"When to Use and When Not to Use",id:"when-to-use-and-when-not-to-use",level:2},{value:"Use Unit Testing when:",id:"use-unit-testing-when",level:3},{value:"Don&#39;t use Unit Testing when:",id:"dont-use-unit-testing-when",level:3},{value:"Pros and Cons and Alternatives",id:"pros-and-cons-and-alternatives",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Alternatives:",id:"alternatives",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"unit-testing",children:"Unit Testing"})}),"\n",(0,s.jsx)(n.p,{children:"Unit testing involves testing individual components or methods in isolation to verify they work as expected. It's the foundation of a robust testing strategy and enables rapid feedback during development."}),"\n",(0,s.jsx)(n.h2,{id:"official-definitionstandards",children:"Official Definition/Standards"}),"\n",(0,s.jsx)(n.p,{children:"Unit testing is a software testing method where individual units or components of software are tested in isolation. In .NET, the standard approach follows the AAA pattern (Arrange, Act, Assert) and uses frameworks like xUnit, NUnit, or MSTest with mocking libraries like Moq."}),"\n",(0,s.jsx)(n.h2,{id:"setup-and-usage-tools-packages-test-runners",children:"Setup and Usage (Tools, Packages, Test Runners)"}),"\n",(0,s.jsx)(n.h3,{id:"primary-testing-frameworks",children:"Primary Testing Frameworks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"xUnit.net"}),": Modern, extensible testing framework (recommended for new projects)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NUnit"}),": Feature-rich framework with extensive assertions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MSTest"}),": Microsoft's testing framework, integrated with Visual Studio"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"essential-packages",children:"Essential Packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet add package xunit\r\ndotnet add package xunit.runner.visualstudio\r\ndotnet add package Microsoft.NET.Test.Sdk\r\ndotnet add package Moq  # For mocking\r\ndotnet add package FluentAssertions  # Enhanced assertions\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-runners",children:"Test Runners:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Visual Studio Test Explorer"}),"\n",(0,s.jsx)(n.li,{children:"dotnet test CLI command"}),"\n",(0,s.jsx)(n.li,{children:"JetBrains Rider"}),"\n",(0,s.jsx)(n.li,{children:"VS Code with C# extension"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"typical-test-architecture-and-patterns",children:"Typical Test Architecture and Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AAA Pattern"}),": Arrange (setup), Act (execute), Assert (verify)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Given-When-Then"}),": BDD-style test structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Fixtures"}),": Shared setup and teardown logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parametrized Tests"}),": Data-driven testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mock/Stub/Fake"}),": Test doubles for dependencies"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"project-structure",children:"Project Structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MyProject.sln\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u2514\u2500\u2500 MyProject/\r\n\u2502       \u251c\u2500\u2500 Services/\r\n\u2502       \u2514\u2500\u2500 Models/\r\n\u2514\u2500\u2500 tests/\r\n    \u2514\u2500\u2500 MyProject.Tests/\r\n        \u251c\u2500\u2500 Services/\r\n        \u2514\u2500\u2500 TestData/\n"})}),"\n",(0,s.jsx)(n.h2,{id:"example-test-code",children:"Example Test Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Package references in test project:\r\n// <PackageReference Include="xunit" Version="2.4.2" />\r\n// <PackageReference Include="xunit.runner.visualstudio" Version="2.4.5" />\r\n// <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.8.0" />\r\n// <PackageReference Include="Moq" Version="4.20.69" />\r\n// <PackageReference Include="FluentAssertions" Version="6.12.0" />\r\n\r\nusing Xunit;\r\nusing Moq;\r\nusing FluentAssertions;\r\n\r\n// System under test\r\npublic class BookingService\r\n{\r\n    private readonly IBookingRepository _bookingRepository;\r\n    private readonly IRoomService _roomService;\r\n    private readonly IEmailService _emailService;\r\n\r\n    public BookingService(IBookingRepository bookingRepository, IRoomService roomService, IEmailService emailService)\r\n    {\r\n        _bookingRepository = bookingRepository;\r\n        _roomService = roomService;\r\n        _emailService = emailService;\r\n    }\r\n\r\n    public async Task<BookingResult> CreateBookingAsync(CreateBookingRequest request)\r\n    {\r\n        if (request.CheckInDate >= request.CheckOutDate)\r\n            return BookingResult.Failure("Check-in date must be before check-out date");\r\n\r\n        var isAvailable = await _roomService.IsRoomAvailableAsync(request.RoomId, request.CheckInDate, request.CheckOutDate);\r\n        if (!isAvailable)\r\n            return BookingResult.Failure("Room is not available for the selected dates");\r\n\r\n        var booking = new Booking\r\n        {\r\n            GuestId = request.GuestId,\r\n            RoomId = request.RoomId,\r\n            CheckInDate = request.CheckInDate,\r\n            CheckOutDate = request.CheckOutDate,\r\n            TotalAmount = request.TotalAmount\r\n        };\r\n\r\n        var savedBooking = await _bookingRepository.AddAsync(booking);\r\n        await _emailService.SendBookingConfirmationAsync(savedBooking);\r\n\r\n        return BookingResult.Success(savedBooking);\r\n    }\r\n}\r\n\r\npublic class BookingResult\r\n{\r\n    public bool IsSuccess { get; private set; }\r\n    public string ErrorMessage { get; private set; } = string.Empty;\r\n    public Booking? Booking { get; private set; }\r\n\r\n    public static BookingResult Success(Booking booking) => new() { IsSuccess = true, Booking = booking };\r\n    public static BookingResult Failure(string error) => new() { IsSuccess = false, ErrorMessage = error };\r\n}\r\n\r\n// Unit Tests\r\npublic class BookingServiceTests\r\n{\r\n    private readonly Mock<IBookingRepository> _mockBookingRepository;\r\n    private readonly Mock<IRoomService> _mockRoomService;\r\n    private readonly Mock<IEmailService> _mockEmailService;\r\n    private readonly BookingService _bookingService;\r\n\r\n    public BookingServiceTests()\r\n    {\r\n        _mockBookingRepository = new Mock<IBookingRepository>();\r\n        _mockRoomService = new Mock<IRoomService>();\r\n        _mockEmailService = new Mock<IEmailService>();\r\n        _bookingService = new BookingService(_mockBookingRepository.Object, _mockRoomService.Object, _mockEmailService.Object);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateBookingAsync_WithValidRequest_ReturnsSuccessResult()\r\n    {\r\n        // Arrange\r\n        var request = new CreateBookingRequest\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = 200m\r\n        };\r\n\r\n        var expectedBooking = new Booking\r\n        {\r\n            Id = 1,\r\n            GuestId = request.GuestId,\r\n            RoomId = request.RoomId,\r\n            CheckInDate = request.CheckInDate,\r\n            CheckOutDate = request.CheckOutDate,\r\n            TotalAmount = request.TotalAmount\r\n        };\r\n\r\n        _mockRoomService.Setup(x => x.IsRoomAvailableAsync(request.RoomId, request.CheckInDate, request.CheckOutDate))\r\n                       .ReturnsAsync(true);\r\n        _mockBookingRepository.Setup(x => x.AddAsync(It.IsAny<Booking>()))\r\n                              .ReturnsAsync(expectedBooking);\r\n        _mockEmailService.Setup(x => x.SendBookingConfirmationAsync(It.IsAny<Booking>()))\r\n                         .Returns(Task.CompletedTask);\r\n\r\n        // Act\r\n        var result = await _bookingService.CreateBookingAsync(request);\r\n\r\n        // Assert\r\n        result.IsSuccess.Should().BeTrue();\r\n        result.Booking.Should().NotBeNull();\r\n        result.Booking.Id.Should().Be(1);\r\n        result.ErrorMessage.Should().BeEmpty();\r\n\r\n        // Verify interactions\r\n        _mockRoomService.Verify(x => x.IsRoomAvailableAsync(request.RoomId, request.CheckInDate, request.CheckOutDate), Times.Once);\r\n        _mockBookingRepository.Verify(x => x.AddAsync(It.IsAny<Booking>()), Times.Once);\r\n        _mockEmailService.Verify(x => x.SendBookingConfirmationAsync(expectedBooking), Times.Once);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateBookingAsync_WithInvalidDates_ReturnsFailureResult()\r\n    {\r\n        // Arrange\r\n        var request = new CreateBookingRequest\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(3),\r\n            CheckOutDate = DateTime.Today.AddDays(1), // Invalid: check-out before check-in\r\n            TotalAmount = 200m\r\n        };\r\n\r\n        // Act\r\n        var result = await _bookingService.CreateBookingAsync(request);\r\n\r\n        // Assert\r\n        result.IsSuccess.Should().BeFalse();\r\n        result.ErrorMessage.Should().Be("Check-in date must be before check-out date");\r\n        result.Booking.Should().BeNull();\r\n\r\n        // Verify no repository or email service calls were made\r\n        _mockRoomService.Verify(x => x.IsRoomAvailableAsync(It.IsAny<int>(), It.IsAny<DateTime>(), It.IsAny<DateTime>()), Times.Never);\r\n        _mockBookingRepository.Verify(x => x.AddAsync(It.IsAny<Booking>()), Times.Never);\r\n        _mockEmailService.Verify(x => x.SendBookingConfirmationAsync(It.IsAny<Booking>()), Times.Never);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateBookingAsync_WithUnavailableRoom_ReturnsFailureResult()\r\n    {\r\n        // Arrange\r\n        var request = new CreateBookingRequest\r\n        {\r\n            GuestId = 1,\r\n            RoomId = 101,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = 200m\r\n        };\r\n\r\n        _mockRoomService.Setup(x => x.IsRoomAvailableAsync(request.RoomId, request.CheckInDate, request.CheckOutDate))\r\n                       .ReturnsAsync(false);\r\n\r\n        // Act\r\n        var result = await _bookingService.CreateBookingAsync(request);\r\n\r\n        // Assert\r\n        result.IsSuccess.Should().BeFalse();\r\n        result.ErrorMessage.Should().Be("Room is not available for the selected dates");\r\n        result.Booking.Should().BeNull();\r\n\r\n        _mockBookingRepository.Verify(x => x.AddAsync(It.IsAny<Booking>()), Times.Never);\r\n        _mockEmailService.Verify(x => x.SendBookingConfirmationAsync(It.IsAny<Booking>()), Times.Never);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(1, 101, 100.50)]\r\n    [InlineData(2, 102, 250.75)]\r\n    [InlineData(3, 103, 399.99)]\r\n    public async Task CreateBookingAsync_WithDifferentValidInputs_ReturnsSuccessResult(int guestId, int roomId, decimal totalAmount)\r\n    {\r\n        // Arrange\r\n        var request = new CreateBookingRequest\r\n        {\r\n            GuestId = guestId,\r\n            RoomId = roomId,\r\n            CheckInDate = DateTime.Today.AddDays(1),\r\n            CheckOutDate = DateTime.Today.AddDays(3),\r\n            TotalAmount = totalAmount\r\n        };\r\n\r\n        _mockRoomService.Setup(x => x.IsRoomAvailableAsync(It.IsAny<int>(), It.IsAny<DateTime>(), It.IsAny<DateTime>()))\r\n                       .ReturnsAsync(true);\r\n        _mockBookingRepository.Setup(x => x.AddAsync(It.IsAny<Booking>()))\r\n                              .ReturnsAsync(new Booking { Id = 1 });\r\n\r\n        // Act\r\n        var result = await _bookingService.CreateBookingAsync(request);\r\n\r\n        // Assert\r\n        result.IsSuccess.Should().BeTrue();\r\n    }\r\n}\r\n\r\n// Test data classes for complex scenarios\r\npublic class BookingTestData\r\n{\r\n    public static IEnumerable<object[]> GetValidBookingRequests()\r\n    {\r\n        yield return new object[]\r\n        {\r\n            new CreateBookingRequest\r\n            {\r\n                GuestId = 1,\r\n                RoomId = 101,\r\n                CheckInDate = DateTime.Today.AddDays(1),\r\n                CheckOutDate = DateTime.Today.AddDays(2),\r\n                TotalAmount = 99.99m\r\n            }\r\n        };\r\n\r\n        yield return new object[]\r\n        {\r\n            new CreateBookingRequest\r\n            {\r\n                GuestId = 2,\r\n                RoomId = 102,\r\n                CheckInDate = DateTime.Today.AddDays(5),\r\n                CheckOutDate = DateTime.Today.AddDays(7),\r\n                TotalAmount = 199.98m\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\npublic class BookingServiceComplexTests\r\n{\r\n    [Theory]\r\n    [MemberData(nameof(BookingTestData.GetValidBookingRequests), MemberType = typeof(BookingTestData))]\r\n    public async Task CreateBookingAsync_WithComplexTestData_ReturnsSuccessResult(CreateBookingRequest request)\r\n    {\r\n        // Arrange\r\n        var mockRepository = new Mock<IBookingRepository>();\r\n        var mockRoomService = new Mock<IRoomService>();\r\n        var mockEmailService = new Mock<IEmailService>();\r\n        var service = new BookingService(mockRepository.Object, mockRoomService.Object, mockEmailService.Object);\r\n\r\n        mockRoomService.Setup(x => x.IsRoomAvailableAsync(It.IsAny<int>(), It.IsAny<DateTime>(), It.IsAny<DateTime>()))\r\n                       .ReturnsAsync(true);\r\n        mockRepository.Setup(x => x.AddAsync(It.IsAny<Booking>()))\r\n                      .ReturnsAsync(new Booking { Id = 1 });\r\n\r\n        // Act\r\n        var result = await service.CreateBookingAsync(request);\r\n\r\n        // Assert\r\n        result.IsSuccess.Should().BeTrue();\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-and-when-not-to-use",children:"When to Use and When Not to Use"}),"\n",(0,s.jsx)(n.h3,{id:"use-unit-testing-when",children:"Use Unit Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Testing business logic in isolation"}),"\n",(0,s.jsx)(n.li,{children:"Verifying individual method behavior"}),"\n",(0,s.jsx)(n.li,{children:"Ensuring code coverage for critical paths"}),"\n",(0,s.jsx)(n.li,{children:"Enabling refactoring with confidence"}),"\n",(0,s.jsx)(n.li,{children:"Supporting continuous integration"}),"\n",(0,s.jsx)(n.li,{children:"Documenting expected behavior"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dont-use-unit-testing-when",children:"Don't use Unit Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Testing UI interactions (use integration tests)"}),"\n",(0,s.jsx)(n.li,{children:"Testing database queries (use integration tests)"}),"\n",(0,s.jsx)(n.li,{children:"Testing third-party library integrations"}),"\n",(0,s.jsx)(n.li,{children:"Over-testing simple property getters/setters"}),"\n",(0,s.jsx)(n.li,{children:"Testing framework code that's already tested"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons-and-alternatives",children:"Pros and Cons and Alternatives"}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fast execution and feedback"}),"\n",(0,s.jsx)(n.li,{children:"Isolates problems to specific components"}),"\n",(0,s.jsx)(n.li,{children:"Enables safe refactoring"}),"\n",(0,s.jsx)(n.li,{children:"Serves as living documentation"}),"\n",(0,s.jsx)(n.li,{children:"Supports test-driven development"}),"\n",(0,s.jsx)(n.li,{children:"Easy to automate in CI/CD"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Can miss integration issues"}),"\n",(0,s.jsx)(n.li,{children:"Requires mocking dependencies"}),"\n",(0,s.jsx)(n.li,{children:"May test implementation details"}),"\n",(0,s.jsx)(n.li,{children:"Maintenance overhead for brittle tests"}),"\n",(0,s.jsx)(n.li,{children:"False confidence from excessive mocking"}),"\n",(0,s.jsx)(n.li,{children:"Time investment for comprehensive coverage"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integration testing for broader coverage"}),"\n",(0,s.jsx)(n.li,{children:"Property-based testing (FsCheck)"}),"\n",(0,s.jsx)(n.li,{children:"Mutation testing for test quality"}),"\n",(0,s.jsx)(n.li,{children:"Static analysis tools"}),"\n",(0,s.jsx)(n.li,{children:"Code reviews and pair programming"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);