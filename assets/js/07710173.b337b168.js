"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[1691],{8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var o=n(6540);const i={},t=o.createContext(i);function s(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(t.Provider,{value:r},e.children)}},8989:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"Topics/CoreDevelopment/Logging","title":"Logging","description":"Short Introduction","source":"@site/docs/Topics/02_CoreDevelopment/10_Logging.md","sourceDirName":"Topics/02_CoreDevelopment","slug":"/Topics/CoreDevelopment/logging","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/logging","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"logging","permalink":"/docusaurus_dotnet_overview/docs/tags/logging"},{"inline":true,"label":"DI","permalink":"/docusaurus_dotnet_overview/docs/tags/di"}],"version":"current","sidebarPosition":10,"frontMatter":{"slug":"logging","title":"Logging","tags":["dotnet","core","logging","DI"]},"sidebar":"tutorialSidebar","previous":{"title":"Configuration Management","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/configuration_management"},"next":{"title":"Middleware","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/middleware"}}');var i=n(4848),t=n(8453);const s={slug:"logging",title:"Logging",tags:["dotnet","core","logging","DI"]},l="Logging",d={},g=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Log Levels",id:"log-levels",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Sample Usage",id:"sample-usage",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"logging",children:"Logging"})}),"\n",(0,i.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(r.p,{children:"Logging in .NET Core provides a built-in, extensible logging framework that supports multiple logging providers and structured logging."}),"\n",(0,i.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(r.p,{children:"The .NET logging system provides a logging API that works with a variety of built-in and third-party logging providers, enabling developers to log messages with different severity levels."}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"// Program.cs - Configure logging\r\nbuilder.Logging.ClearProviders();\r\nbuilder.Logging.AddConsole();\r\nbuilder.Logging.AddDebug();\r\nbuilder.Logging.AddEventSourceLogger();\r\n\r\n// Add Serilog (popular third-party logger)\r\nbuilder.Host.UseSerilog((context, configuration) =>\r\n    configuration.ReadFrom.Configuration(context.Configuration));\n"})}),"\n",(0,i.jsx)(r.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Trace"}),": Very detailed logs"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Debug"}),": Debug information"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Information"}),": General information"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Warning"}),": Warning messages"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error"}),": Error messages"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Critical"}),": Critical errors"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Application monitoring"}),"\n",(0,i.jsx)(r.li,{children:"Debugging and troubleshooting"}),"\n",(0,i.jsx)(r.li,{children:"Audit trails"}),"\n",(0,i.jsx)(r.li,{children:"Performance monitoring"}),"\n",(0,i.jsx)(r.li,{children:"Security monitoring"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"sample-usage",children:"Sample Usage"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class OrderService : IOrderService\r\n{\r\n    private readonly ILogger<OrderService> _logger;\r\n    private readonly IOrderRepository _orderRepository;\r\n\r\n    public OrderService(ILogger<OrderService> logger, IOrderRepository orderRepository)\r\n    {\r\n        _logger = logger;\r\n        _orderRepository = orderRepository;\r\n    }\r\n\r\n    public async Task<Order> CreateOrderAsync(CreateOrderDto dto)\r\n    {\r\n        _logger.LogInformation("Creating order for customer {CustomerId}", dto.CustomerId);\r\n\r\n        try\r\n        {\r\n            var order = new Order\r\n            {\r\n                CustomerId = dto.CustomerId,\r\n                OrderDate = DateTime.UtcNow,\r\n                Items = dto.Items.Select(i => new OrderItem\r\n                {\r\n                    ProductId = i.ProductId,\r\n                    Quantity = i.Quantity\r\n                }).ToList()\r\n            };\r\n\r\n            var createdOrder = await _orderRepository.CreateAsync(order);\r\n\r\n            _logger.LogInformation("Order {OrderId} created successfully for customer {CustomerId}",\r\n                createdOrder.Id, dto.CustomerId);\r\n\r\n            return createdOrder;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, "Failed to create order for customer {CustomerId}", dto.CustomerId);\r\n            throw;\r\n        }\r\n    }\r\n}\r\n\r\n// Structured logging with Serilog\r\nLog.Information("User {UserId} placed order {OrderId} for {Amount:C}",\r\n    userId, orderId, totalAmount);\n'})})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);