"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[7938],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},9805:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Topics/ContainerizationAndOrchestration/Kubernetes","title":"Kubernetes","description":"Short Introduction","source":"@site/docs/Topics/08_ContainerizationAndOrchestration/37_Kubernetes.md","sourceDirName":"Topics/08_ContainerizationAndOrchestration","slug":"/Topics/ContainerizationAndOrchestration/kubernetes","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/kubernetes","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"containers","permalink":"/docusaurus_dotnet_overview/docs/tags/containers"},{"inline":true,"label":"kubernetes","permalink":"/docusaurus_dotnet_overview/docs/tags/kubernetes"}],"version":"current","sidebarPosition":37,"frontMatter":{"slug":"kubernetes","title":"Kubernetes","tags":["dotnet","containers","kubernetes"]},"sidebar":"tutorialSidebar","previous":{"title":"Docker","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/docker"},"next":{"title":"Azure Container Apps","permalink":"/docusaurus_dotnet_overview/docs/Topics/ContainerizationAndOrchestration/azure_container_apps"}}');var a=r(4848),s=r(8453);const i={slug:"kubernetes",title:"Kubernetes",tags:["dotnet","containers","kubernetes"]},o="Kubernetes",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Basic Kubernetes Deployment for .NET API",id:"basic-kubernetes-deployment-for-net-api",level:3},{value:"ConfigMap and Secrets",id:"configmap-and-secrets",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use Kubernetes when",id:"use-kubernetes-when",level:3},{value:"Consider alternatives when",id:"consider-alternatives-when",level:3},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:2},{value:"Complete Kubernetes Setup",id:"complete-kubernetes-setup",level:3},{value:"Deployment Commands",id:"deployment-commands",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"kubernetes",children:"Kubernetes"})}),"\n",(0,a.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,a.jsx)(n.p,{children:"Kubernetes is an open-source container orchestration platform that automates deployment, scaling, and management of containerized applications. For .NET applications, Kubernetes provides robust orchestration capabilities, enabling high availability, auto-scaling, and declarative configuration management across clusters."}),"\n",(0,a.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,a.jsx)(n.p,{children:"Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem with services, support, and tools widely available."}),"\n",(0,a.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,a.jsx)(n.h3,{id:"basic-kubernetes-deployment-for-net-api",children:"Basic Kubernetes Deployment for .NET API"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# k8s/namespace.yaml\r\napiVersion: v1\r\nkind: Namespace\r\nmetadata:\r\n  name: hotel-management\r\n---\r\n# k8s/deployment.yaml\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: hotel-api\r\n  namespace: hotel-management\r\nspec:\r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      app: hotel-api\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: hotel-api\r\n    spec:\r\n      containers:\r\n        - name: hotel-api\r\n          image: hotel-management-api:latest\r\n          ports:\r\n            - containerPort: 8080\r\n          env:\r\n            - name: ASPNETCORE_ENVIRONMENT\r\n              value: "Production"\r\n            - name: ConnectionStrings__DefaultConnection\r\n              valueFrom:\r\n                secretKeyRef:\r\n                  name: hotel-secrets\r\n                  key: connection-string\r\n          resources:\r\n            requests:\r\n              memory: "256Mi"\r\n              cpu: "250m"\r\n            limits:\r\n              memory: "512Mi"\r\n              cpu: "500m"\r\n          livenessProbe:\r\n            httpGet:\r\n              path: /health\r\n              port: 8080\r\n            initialDelaySeconds: 30\r\n            periodSeconds: 10\r\n          readinessProbe:\r\n            httpGet:\r\n              path: /health/ready\r\n              port: 8080\r\n            initialDelaySeconds: 5\r\n            periodSeconds: 5\r\n---\r\n# k8s/service.yaml\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: hotel-api-service\r\n  namespace: hotel-management\r\nspec:\r\n  selector:\r\n    app: hotel-api\r\n  ports:\r\n    - protocol: TCP\r\n      port: 80\r\n      targetPort: 8080\r\n  type: ClusterIP\r\n---\r\n# k8s/ingress.yaml\r\napiVersion: networking.k8s.io/v1\r\nkind: Ingress\r\nmetadata:\r\n  name: hotel-api-ingress\r\n  namespace: hotel-management\r\n  annotations:\r\n    nginx.ingress.kubernetes.io/rewrite-target: /\r\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\r\nspec:\r\n  tls:\r\n    - hosts:\r\n        - api.hotelmanagement.com\r\n      secretName: hotel-api-tls\r\n  rules:\r\n    - host: api.hotelmanagement.com\r\n      http:\r\n        paths:\r\n          - path: /\r\n            pathType: Prefix\r\n            backend:\r\n              service:\r\n                name: hotel-api-service\r\n                port:\r\n                  number: 80\n'})}),"\n",(0,a.jsx)(n.h3,{id:"configmap-and-secrets",children:"ConfigMap and Secrets"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# k8s/configmap.yaml\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: hotel-config\r\n  namespace: hotel-management\r\ndata:\r\n  appsettings.json: |\r\n    {\r\n      "Logging": {\r\n        "LogLevel": {\r\n          "Default": "Information",\r\n          "Microsoft.AspNetCore": "Warning"\r\n        }\r\n      },\r\n      "AllowedHosts": "*",\r\n      "Redis": {\r\n        "ConnectionString": "redis-service:6379"\r\n      }\r\n    }\r\n---\r\n# k8s/secret.yaml\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: hotel-secrets\r\n  namespace: hotel-management\r\ntype: Opaque\r\ndata:\r\n  connection-string: U2VydmVyPXNxbC1zZXJ2aWNlO0RhdGFiYXNlPUhvdGVsTWFuYWdlbWVudDtVc2VyIElkPXNhO1Bhc3N3b3JkPVlvdXJQYXNzd29yZDEyMyE7VHJ1c3RTZXJ2ZXJDZXJ0aWZpY2F0ZT10cnVl\n'})}),"\n",(0,a.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Microservices Orchestration"}),": Managing multiple interconnected services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Auto-scaling"}),": Horizontal and vertical scaling based on metrics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"High Availability"}),": Multi-replica deployments with health checks"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rolling Updates"}),": Zero-downtime deployments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Service Discovery"}),": Internal communication between services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration Management"}),": Centralized config and secrets management"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,a.jsx)(n.h3,{id:"use-kubernetes-when",children:"Use Kubernetes when"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Running multiple microservices"}),"\n",(0,a.jsx)(n.li,{children:"Need high availability and scalability"}),"\n",(0,a.jsx)(n.li,{children:"Managing complex deployment scenarios"}),"\n",(0,a.jsx)(n.li,{children:"Operating in multi-environment setups"}),"\n",(0,a.jsx)(n.li,{children:"Requiring advanced networking and storage"}),"\n",(0,a.jsx)(n.li,{children:"Team has container orchestration expertise"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Simple single-service applications"}),"\n",(0,a.jsx)(n.li,{children:"Small team with limited DevOps expertise"}),"\n",(0,a.jsx)(n.li,{children:"Development or testing environments only"}),"\n",(0,a.jsx)(n.li,{children:"Tight budget constraints (managed services cost)"}),"\n",(0,a.jsx)(n.li,{children:"Windows-first applications with specific OS dependencies"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,a.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Docker Swarm"}),": Simpler container orchestration"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Amazon ECS/Fargate"}),": AWS-managed container services"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Azure Container Instances"}),": Serverless containers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"HashiCorp Nomad"}),": Simple, flexible orchestrator"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"OpenShift"}),": Enterprise Kubernetes platform"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Industry standard with large ecosystem"}),"\n",(0,a.jsx)(n.li,{children:"Powerful orchestration and scaling capabilities"}),"\n",(0,a.jsx)(n.li,{children:"Declarative configuration management"}),"\n",(0,a.jsx)(n.li,{children:"Strong community and vendor support"}),"\n",(0,a.jsx)(n.li,{children:"Cloud-agnostic deployment"}),"\n",(0,a.jsx)(n.li,{children:"Advanced networking and storage options"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Steep learning curve and complexity"}),"\n",(0,a.jsx)(n.li,{children:"Resource overhead for small applications"}),"\n",(0,a.jsx)(n.li,{children:"Requires dedicated DevOps expertise"}),"\n",(0,a.jsx)(n.li,{children:"Potential over-engineering for simple scenarios"}),"\n",(0,a.jsx)(n.li,{children:"Configuration management complexity"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,a.jsx)(n.h3,{id:"complete-kubernetes-setup",children:"Complete Kubernetes Setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# k8s/hotel-management-complete.yaml\r\napiVersion: v1\r\nkind: Namespace\r\nmetadata:\r\n  name: hotel-management\r\n---\r\napiVersion: v1\r\nkind: ConfigMap\r\nmetadata:\r\n  name: hotel-config\r\n  namespace: hotel-management\r\ndata:\r\n  appsettings.Production.json: |\r\n    {\r\n      "Logging": {\r\n        "LogLevel": {\r\n          "Default": "Information",\r\n          "Microsoft.AspNetCore": "Warning"\r\n        }\r\n      },\r\n      "ConnectionStrings": {\r\n        "DefaultConnection": "Server=sql-service;Database=HotelManagement;User Id=sa;Password=YourPassword123!;TrustServerCertificate=true"\r\n      },\r\n      "Redis": {\r\n        "ConnectionString": "redis-service:6379"\r\n      },\r\n      "JwtSettings": {\r\n        "Issuer": "HotelManagement.Api",\r\n        "Audience": "HotelManagement.Client"\r\n      }\r\n    }\r\n---\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: hotel-secrets\r\n  namespace: hotel-management\r\ntype: Opaque\r\nstringData:\r\n  jwt-secret: "your-super-secret-jwt-key-that-is-at-least-256-bits-long"\r\n  sql-password: "YourPassword123!"\r\n  redis-password: "YourRedisPassword123!"\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: hotel-api\r\n  namespace: hotel-management\r\n  labels:\r\n    app: hotel-api\r\nspec:\r\n  replicas: 3\r\n  strategy:\r\n    type: RollingUpdate\r\n    rollingUpdate:\r\n      maxUnavailable: 1\r\n      maxSurge: 1\r\n  selector:\r\n    matchLabels:\r\n      app: hotel-api\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: hotel-api\r\n    spec:\r\n      containers:\r\n        - name: hotel-api\r\n          image: hotel-management-api:1.0.0\r\n          imagePullPolicy: IfNotPresent\r\n          ports:\r\n            - containerPort: 8080\r\n              name: http\r\n          env:\r\n            - name: ASPNETCORE_ENVIRONMENT\r\n              value: "Production"\r\n            - name: ASPNETCORE_URLS\r\n              value: "http://+:8080"\r\n            - name: JwtSettings__SecretKey\r\n              valueFrom:\r\n                secretKeyRef:\r\n                  name: hotel-secrets\r\n                  key: jwt-secret\r\n          volumeMounts:\r\n            - name: config-volume\r\n              mountPath: /app/appsettings.Production.json\r\n              subPath: appsettings.Production.json\r\n          resources:\r\n            requests:\r\n              memory: "256Mi"\r\n              cpu: "250m"\r\n            limits:\r\n              memory: "512Mi"\r\n              cpu: "500m"\r\n          livenessProbe:\r\n            httpGet:\r\n              path: /health\r\n              port: 8080\r\n            initialDelaySeconds: 30\r\n            periodSeconds: 10\r\n            timeoutSeconds: 5\r\n            failureThreshold: 3\r\n          readinessProbe:\r\n            httpGet:\r\n              path: /health/ready\r\n              port: 8080\r\n            initialDelaySeconds: 5\r\n            periodSeconds: 5\r\n            timeoutSeconds: 3\r\n            failureThreshold: 3\r\n      volumes:\r\n        - name: config-volume\r\n          configMap:\r\n            name: hotel-config\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: hotel-api-service\r\n  namespace: hotel-management\r\nspec:\r\n  selector:\r\n    app: hotel-api\r\n  ports:\r\n    - name: http\r\n      protocol: TCP\r\n      port: 80\r\n      targetPort: 8080\r\n  type: ClusterIP\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: sql-server\r\n  namespace: hotel-management\r\nspec:\r\n  replicas: 1\r\n  selector:\r\n    matchLabels:\r\n      app: sql-server\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: sql-server\r\n    spec:\r\n      containers:\r\n        - name: sql-server\r\n          image: mcr.microsoft.com/mssql/server:2022-latest\r\n          ports:\r\n            - containerPort: 1433\r\n          env:\r\n            - name: ACCEPT_EULA\r\n              value: "Y"\r\n            - name: SA_PASSWORD\r\n              valueFrom:\r\n                secretKeyRef:\r\n                  name: hotel-secrets\r\n                  key: sql-password\r\n            - name: MSSQL_PID\r\n              value: "Express"\r\n          resources:\r\n            requests:\r\n              memory: "1Gi"\r\n              cpu: "500m"\r\n            limits:\r\n              memory: "2Gi"\r\n              cpu: "1000m"\r\n          volumeMounts:\r\n            - name: sql-data\r\n              mountPath: /var/opt/mssql\r\n      volumes:\r\n        - name: sql-data\r\n          persistentVolumeClaim:\r\n            claimName: sql-pvc\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  name: sql-service\r\n  namespace: hotel-management\r\nspec:\r\n  selector:\r\n    app: sql-server\r\n  ports:\r\n    - port: 1433\r\n      targetPort: 1433\r\n  type: ClusterIP\r\n---\r\napiVersion: v1\r\nkind: PersistentVolumeClaim\r\nmetadata:\r\n  name: sql-pvc\r\n  namespace: hotel-management\r\nspec:\r\n  accessModes:\r\n    - ReadWriteOnce\r\n  resources:\r\n    requests:\r\n      storage: 10Gi\r\n---\r\napiVersion: autoscaling/v2\r\nkind: HorizontalPodAutoscaler\r\nmetadata:\r\n  name: hotel-api-hpa\r\n  namespace: hotel-management\r\nspec:\r\n  scaleTargetRef:\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    name: hotel-api\r\n  minReplicas: 2\r\n  maxReplicas: 10\r\n  metrics:\r\n    - type: Resource\r\n      resource:\r\n        name: cpu\r\n        target:\r\n          type: Utilization\r\n          averageUtilization: 70\r\n    - type: Resource\r\n      resource:\r\n        name: memory\r\n        target:\r\n          type: Utilization\r\n          averageUtilization: 80\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deployment-commands",children:"Deployment Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Apply all configurations\r\nkubectl apply -f k8s/hotel-management-complete.yaml\r\n\r\n# Check deployment status\r\nkubectl get deployments -n hotel-management\r\nkubectl get pods -n hotel-management\r\nkubectl get services -n hotel-management\r\n\r\n# View logs\r\nkubectl logs -f deployment/hotel-api -n hotel-management\r\n\r\n# Scale deployment\r\nkubectl scale deployment hotel-api --replicas=5 -n hotel-management\r\n\r\n# Update deployment with new image\r\nkubectl set image deployment/hotel-api hotel-api=hotel-management-api:1.1.0 -n hotel-management\r\n\r\n# Port forward for local testing\r\nkubectl port-forward service/hotel-api-service 8080:80 -n hotel-management\r\n\r\n# Execute commands in pod\r\nkubectl exec -it deployment/hotel-api -n hotel-management -- /bin/bash\r\n\r\n# Clean up\r\nkubectl delete namespace hotel-management\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);