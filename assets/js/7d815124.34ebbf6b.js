"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8803],{4059:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Topics/CloudTechnologies/AzureServiceBus","title":"Azure Service Bus","description":"Short Introduction","source":"@site/docs/Topics/07_CloudTechnologies/34_AzureServiceBus.md","sourceDirName":"Topics/07_CloudTechnologies","slug":"/Topics/CloudTechnologies/azure_service_bus","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_service_bus","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"service_bus","permalink":"/docusaurus_dotnet_overview/docs/tags/service-bus"},{"inline":true,"label":"message","permalink":"/docusaurus_dotnet_overview/docs/tags/message"},{"inline":true,"label":"broker","permalink":"/docusaurus_dotnet_overview/docs/tags/broker"}],"version":"current","sidebarPosition":34,"frontMatter":{"slug":"azure_service_bus","title":"Azure Service Bus","tags":["dotnet","azure","service_bus","message","broker"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure Cosmos DB","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_cosmos_database"},"next":{"title":"Azure Key Vault","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_key_vault"}}');var i=s(4848),a=s(8453);const t={slug:"azure_service_bus",title:"Azure Service Bus",tags:["dotnet","azure","service_bus","message","broker"]},o="Azure Service Bus",c={},l=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup and Deployment Steps",id:"setup-and-deployment-steps",level:2},{value:"Azure CLI Setup",id:"azure-cli-setup",level:3},{value:"Bicep Template",id:"bicep-template",level:3},{value:"Typical Usage and Integration with .NET Apps",id:"typical-usage-and-integration-with-net-apps",level:2},{value:"NuGet Package",id:"nuget-package",level:3},{value:"Service Registration and Configuration",id:"service-registration-and-configuration",level:3},{value:"Message Service Implementation",id:"message-service-implementation",level:3},{value:"Background Service for Message Processing",id:"background-service-for-message-processing",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs Alternatives",id:"when-to-use-vs-alternatives",level:2},{value:"Use Azure Service Bus when",id:"use-azure-service-bus-when",level:3},{value:"Don&#39;t use when",id:"dont-use-when",level:3},{value:"Alternatives",id:"alternatives",level:3},{value:"Market Pros/Cons and Cost Considerations",id:"market-proscons-and-cost-considerations",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3},{value:"Cost Considerations",id:"cost-considerations",level:3}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"azure-service-bus",children:"Azure Service Bus"})}),"\n",(0,i.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(r.p,{children:"Azure Service Bus is a fully managed enterprise message broker with message queues and publish-subscribe topics. It provides reliable cloud messaging between applications and services, supporting advanced messaging patterns like sessions, transactions, and dead lettering."}),"\n",(0,i.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(r.p,{children:'"Azure Service Bus is a fully managed enterprise integration message broker. Service Bus can decouple applications and services. Service Bus offers a reliable and secure platform for asynchronous transfer of data and state."'}),"\n",(0,i.jsx)(r.h2,{id:"setup-and-deployment-steps",children:"Setup and Deployment Steps"}),"\n",(0,i.jsx)(r.h3,{id:"azure-cli-setup",children:"Azure CLI Setup"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Create Service Bus namespace\r\naz servicebus namespace create --resource-group myResourceGroup --name myservicebus --location eastus --sku Standard\r\n\r\n# Create queue\r\naz servicebus queue create --resource-group myResourceGroup --namespace-name myservicebus --name myqueue --max-size 1024\r\n\r\n# Create topic\r\naz servicebus topic create --resource-group myResourceGroup --namespace-name myservicebus --name mytopic\r\n\r\n# Create subscription\r\naz servicebus topic subscription create --resource-group myResourceGroup --namespace-name myservicebus --topic-name mytopic --name mysubscription\n"})}),"\n",(0,i.jsx)(r.h3,{id:"bicep-template",children:"Bicep Template"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bicep",children:"resource serviceBusNamespace 'Microsoft.ServiceBus/namespaces@2022-10-01-preview' = {\r\n  name: 'myservicebus'\r\n  location: resourceGroup().location\r\n  sku: {\r\n    name: 'Standard'\r\n    tier: 'Standard'\r\n  }\r\n}\r\n\r\nresource serviceBusQueue 'Microsoft.ServiceBus/namespaces/queues@2022-10-01-preview' = {\r\n  parent: serviceBusNamespace\r\n  name: 'orders'\r\n  properties: {\r\n    maxSizeInMegabytes: 1024\r\n    defaultMessageTimeToLive: 'P14D'\r\n    deadLetteringOnMessageExpiration: true\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"typical-usage-and-integration-with-net-apps",children:"Typical Usage and Integration with .NET Apps"}),"\n",(0,i.jsx)(r.h3,{id:"nuget-package",children:"NuGet Package"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<PackageReference Include="Azure.Messaging.ServiceBus" Version="7.17.0" />\n'})}),"\n",(0,i.jsx)(r.h3,{id:"service-registration-and-configuration",children:"Service Registration and Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'// appsettings.json\r\n{\r\n  "ServiceBus": {\r\n    "ConnectionString": "Endpoint=sb://myservicebus.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key"\r\n  }\r\n}\r\n\r\n// Program.cs\r\nusing Azure.Messaging.ServiceBus;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddSingleton<ServiceBusClient>(provider =>\r\n{\r\n    var connectionString = builder.Configuration.GetConnectionString("ServiceBus");\r\n    return new ServiceBusClient(connectionString);\r\n});\r\n\r\nbuilder.Services.AddScoped<IMessageService, MessageService>();\n'})}),"\n",(0,i.jsx)(r.h3,{id:"message-service-implementation",children:"Message Service Implementation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public interface IMessageService\r\n{\r\n    Task SendMessageAsync<T>(string queueName, T message);\r\n    Task<T> ReceiveMessageAsync<T>(string queueName);\r\n    Task PublishMessageAsync<T>(string topicName, T message);\r\n    Task StartProcessingAsync<T>(string queueName, Func<T, Task> messageHandler);\r\n}\r\n\r\npublic class MessageService : IMessageService\r\n{\r\n    private readonly ServiceBusClient _client;\r\n    private readonly ILogger<MessageService> _logger;\r\n\r\n    public MessageService(ServiceBusClient client, ILogger<MessageService> logger)\r\n    {\r\n        _client = client;\r\n        _logger = logger;\r\n    }\r\n\r\n    public async Task SendMessageAsync<T>(string queueName, T message)\r\n    {\r\n        var sender = _client.CreateSender(queueName);\r\n        var json = JsonSerializer.Serialize(message);\r\n        var serviceBusMessage = new ServiceBusMessage(json)\r\n        {\r\n            ContentType = "application/json",\r\n            MessageId = Guid.NewGuid().ToString()\r\n        };\r\n\r\n        await sender.SendMessageAsync(serviceBusMessage);\r\n        _logger.LogInformation($"Message sent to queue {queueName}: {serviceBusMessage.MessageId}");\r\n    }\r\n\r\n    public async Task PublishMessageAsync<T>(string topicName, T message)\r\n    {\r\n        var sender = _client.CreateSender(topicName);\r\n        var json = JsonSerializer.Serialize(message);\r\n        var serviceBusMessage = new ServiceBusMessage(json)\r\n        {\r\n            ContentType = "application/json",\r\n            Subject = typeof(T).Name\r\n        };\r\n\r\n        await sender.SendMessageAsync(serviceBusMessage);\r\n        _logger.LogInformation($"Message published to topic {topicName}");\r\n    }\r\n\r\n    public async Task StartProcessingAsync<T>(string queueName, Func<T, Task> messageHandler)\r\n    {\r\n        var processor = _client.CreateProcessor(queueName);\r\n\r\n        processor.ProcessMessageAsync += async args =>\r\n        {\r\n            try\r\n            {\r\n                var json = args.Message.Body.ToString();\r\n                var message = JsonSerializer.Deserialize<T>(json);\r\n                await messageHandler(message);\r\n                await args.CompleteMessageAsync(args.Message);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                _logger.LogError(ex, "Error processing message");\r\n                await args.DeadLetterMessageAsync(args.Message);\r\n            }\r\n        };\r\n\r\n        processor.ProcessErrorAsync += args =>\r\n        {\r\n            _logger.LogError(args.Exception, "Error occurred while processing messages");\r\n            return Task.CompletedTask;\r\n        };\r\n\r\n        await processor.StartProcessingAsync();\r\n    }\r\n}\r\n\r\n// Message Models\r\npublic class OrderCreatedEvent\r\n{\r\n    public int OrderId { get; set; }\r\n    public string CustomerEmail { get; set; }\r\n    public decimal Amount { get; set; }\r\n    public DateTime CreatedAt { get; set; }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"background-service-for-message-processing",children:"Background Service for Message Processing"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public class OrderProcessingService : BackgroundService\r\n{\r\n    private readonly IMessageService _messageService;\r\n    private readonly ILogger<OrderProcessingService> _logger;\r\n\r\n    public OrderProcessingService(IMessageService messageService, ILogger<OrderProcessingService> logger)\r\n    {\r\n        _messageService = messageService;\r\n        _logger = logger;\r\n    }\r\n\r\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\r\n    {\r\n        await _messageService.StartProcessingAsync<OrderCreatedEvent>("orders", async order =>\r\n        {\r\n            _logger.LogInformation($"Processing order {order.OrderId} for {order.CustomerEmail}");\r\n\r\n            // Process the order\r\n            await Task.Delay(1000); // Simulate processing\r\n\r\n            _logger.LogInformation($"Order {order.OrderId} processed successfully");\r\n        });\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Decoupling microservices communication"}),"\n",(0,i.jsx)(r.li,{children:"Reliable message delivery with retry mechanisms"}),"\n",(0,i.jsx)(r.li,{children:"Event-driven architectures"}),"\n",(0,i.jsx)(r.li,{children:"Load leveling between applications"}),"\n",(0,i.jsx)(r.li,{children:"Integration with legacy systems"}),"\n",(0,i.jsx)(r.li,{children:"Workflow orchestration and saga patterns"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"when-to-use-vs-alternatives",children:"When to Use vs Alternatives"}),"\n",(0,i.jsx)(r.h3,{id:"use-azure-service-bus-when",children:"Use Azure Service Bus when"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Advanced messaging features needed (sessions, transactions, duplicate detection)"}),"\n",(0,i.jsx)(r.li,{children:"Enterprise-grade reliability and security required"}),"\n",(0,i.jsx)(r.li,{children:"Integration with Azure ecosystem is important"}),"\n",(0,i.jsx)(r.li,{children:"Complex routing and filtering capabilities needed"}),"\n",(0,i.jsx)(r.li,{children:"FIFO (First-In-First-Out) ordering is critical"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"dont-use-when",children:"Don't use when"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Simple queue requirements (Azure Storage Queues sufficient)"}),"\n",(0,i.jsx)(r.li,{children:"Cost optimization is primary concern"}),"\n",(0,i.jsx)(r.li,{children:"Ultra-high throughput needed (consider Event Hubs)"}),"\n",(0,i.jsx)(r.li,{children:"Real-time communication required (use SignalR)"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"alternatives",children:"Alternatives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Azure"}),": Storage Queues (simpler), Event Hubs (high throughput), Event Grid (event routing)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"AWS"}),": SQS, SNS, Amazon MQ"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"GCP"}),": Cloud Tasks, Pub/Sub"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Open Source"}),": RabbitMQ, Apache Kafka"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"market-proscons-and-cost-considerations",children:"Market Pros/Cons and Cost Considerations"}),"\n",(0,i.jsx)(r.h3,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Enterprise messaging features (sessions, transactions, duplicate detection)"}),"\n",(0,i.jsx)(r.li,{children:"Dead letter queues for failed messages"}),"\n",(0,i.jsx)(r.li,{children:"Auto-scaling and high availability"}),"\n",(0,i.jsx)(r.li,{children:"Advanced security with Azure AD integration"}),"\n",(0,i.jsx)(r.li,{children:"Message scheduling and deferral"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cons",children:"Cons"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"More expensive than simple queue solutions"}),"\n",(0,i.jsx)(r.li,{children:"Complexity overhead for simple scenarios"}),"\n",(0,i.jsx)(r.li,{children:"Learning curve for advanced features"}),"\n",(0,i.jsx)(r.li,{children:"Potential vendor lock-in"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cost-considerations",children:"Cost Considerations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Basic tier: ~$0.05 per million operations"}),"\n",(0,i.jsx)(r.li,{children:"Standard tier: ~$10/month base + $0.80 per million operations"}),"\n",(0,i.jsx)(r.li,{children:"Premium tier: ~$677/month for dedicated capacity"}),"\n",(0,i.jsx)(r.li,{children:"Additional charges for message storage and throughput units"}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>o});var n=s(6540);const i={},a=n.createContext(i);function t(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);