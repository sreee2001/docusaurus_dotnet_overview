"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[2175],{5573:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Topics/CoreDevelopment/AuthenticationAndAuthorization","title":"Authentication & Authorization","description":"Short Introduction","source":"@site/docs/Topics/02_CoreDevelopment/12_AuthenticationAndAuthorization.md","sourceDirName":"Topics/02_CoreDevelopment","slug":"/Topics/CoreDevelopment/authentication_authorization","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/authentication_authorization","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"core","permalink":"/docusaurus_dotnet_overview/docs/tags/core"},{"inline":true,"label":"authentication","permalink":"/docusaurus_dotnet_overview/docs/tags/authentication"},{"inline":true,"label":"authorization","permalink":"/docusaurus_dotnet_overview/docs/tags/authorization"}],"version":"current","sidebarPosition":12,"frontMatter":{"slug":"authentication_authorization","title":"Authentication & Authorization","tags":["dotnet","core","authentication","authorization"]},"sidebar":"tutorialSidebar","previous":{"title":"Middleware","permalink":"/docusaurus_dotnet_overview/docs/Topics/CoreDevelopment/middleware"},"next":{"title":"Model-View-Controller","permalink":"/docusaurus_dotnet_overview/docs/Topics/WebTechnologies/mvc"}}');var t=r(4848),s=r(8453);const o={slug:"authentication_authorization",title:"Authentication & Authorization",tags:["dotnet","core","authentication","authorization"]},a="Authentication & Authorization",l={},c=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Authentication Schemes",id:"authentication-schemes",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use When:",id:"use-when",level:3},{value:"Don&#39;t Use When:",id:"dont-use-when",level:3},{value:"Market Alternatives &amp; Adoption",id:"market-alternatives--adoption",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Market Position:",id:"market-position",level:3},{value:"Pros and Cons",id:"pros-and-cons",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Sample Usage",id:"sample-usage",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"authentication--authorization",children:"Authentication & Authorization"})}),"\n",(0,t.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Authentication and Authorization are fundamental security concepts in .NET Core applications."}),"\n",(0,t.jsx)(n.li,{children:'Authentication verifies user identity, "who you are"'}),"\n",(0,t.jsx)(n.li,{children:'Authorization determines what authenticated users can access, "what you can do.".'}),"\n",(0,t.jsx)(n.li,{children:"ASP.NET Core provides comprehensive built-in support for both."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Authentication is the process of determining whether someone or something is who or what it declares to be."}),"\n",(0,t.jsx)(n.li,{children:"Authorization is the process of giving someone permission to do or have something."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install required packages\r\ndotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore\r\ndotnet add package Microsoft.AspNetCore.Authentication.JwtBearer\r\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nusing Microsoft.AspNetCore.Identity;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add Entity Framework\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n// Add Identity\r\nbuilder.Services.AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n{\r\n    options.Password.RequireDigit = true;\r\n    options.Password.RequiredLength = 8;\r\n    options.Password.RequireNonAlphanumeric = false;\r\n    options.User.RequireUniqueEmail = true;\r\n})\r\n.AddEntityFrameworkStores<ApplicationDbContext>()\r\n.AddDefaultTokenProviders();\r\n\r\n// Add Authentication\r\nbuilder.Services.AddAuthentication(options =>\r\n{\r\n    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n})\r\n.AddJwtBearer(options =>\r\n{\r\n    options.TokenValidationParameters = new TokenValidationParameters\r\n    {\r\n        ValidateIssuer = true,\r\n        ValidateAudience = true,\r\n        ValidateLifetime = true,\r\n        ValidateIssuerSigningKey = true,\r\n        ValidIssuer = builder.Configuration["Jwt:Issuer"],\r\n        ValidAudience = builder.Configuration["Jwt:Audience"],\r\n        IssuerSigningKey = new SymmetricSecurityKey(\r\n            Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))\r\n    };\r\n});\r\n\r\n// Add Authorization\r\nbuilder.Services.AddAuthorization(options =>\r\n{\r\n    options.AddPolicy("AdminOnly", policy => policy.RequireRole("Admin"));\r\n    options.AddPolicy("MinimumAge", policy =>\r\n        policy.RequireClaim("age", "18", "19", "20")); // 18+\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Program.cs - Configure authentication\r\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n    .AddJwtBearer(options =>\r\n    {\r\n        options.TokenValidationParameters = new TokenValidationParameters\r\n        {\r\n            ValidateIssuer = true,\r\n            ValidateAudience = true,\r\n            ValidateLifetime = true,\r\n            ValidateIssuerSigningKey = true,\r\n            ValidIssuer = builder.Configuration["Jwt:Issuer"],\r\n            ValidAudience = builder.Configuration["Jwt:Audience"],\r\n            IssuerSigningKey = new SymmetricSecurityKey(\r\n                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))\r\n        };\r\n    });\r\n\r\nbuilder.Services.AddAuthorization(options =>\r\n{\r\n    options.AddPolicy("AdminOnly", policy =>\r\n        policy.RequireRole("Admin"));\r\n    options.AddPolicy("ManagerOrAdmin", policy =>\r\n        policy.RequireRole("Manager", "Admin"));\r\n});\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"authentication-schemes",children:"Authentication Schemes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cookie Authentication"}),": Traditional web applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JWT Bearer"}),": APIs and SPAs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Identity Server"}),": Enterprise SSO"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OAuth 2.0"}),": Third-party providers"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"User login/logout systems"}),"\n",(0,t.jsx)(n.li,{children:"API security with JWT tokens"}),"\n",(0,t.jsx)(n.li,{children:"Role-based access control (RBAC)"}),"\n",(0,t.jsx)(n.li,{children:"Claims-based authorization"}),"\n",(0,t.jsx)(n.li,{children:"Multi-factor authentication"}),"\n",(0,t.jsx)(n.li,{children:"Social login integration"}),"\n",(0,t.jsx)(n.li,{children:"Enterprise single sign-on (SSO)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,t.jsx)(n.h3,{id:"use-when",children:"Use When:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Application requires user accounts"}),"\n",(0,t.jsx)(n.li,{children:"Different user privilege levels needed"}),"\n",(0,t.jsx)(n.li,{children:"Protecting sensitive data/operations"}),"\n",(0,t.jsx)(n.li,{children:"Compliance requirements (GDPR, HIPAA)"}),"\n",(0,t.jsx)(n.li,{children:"API security is required"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dont-use-when",children:"Don't Use When:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simple public applications"}),"\n",(0,t.jsx)(n.li,{children:"No user-specific functionality"}),"\n",(0,t.jsx)(n.li,{children:"Performance is absolutely critical"}),"\n",(0,t.jsx)(n.li,{children:"Very basic internal tools"}),"\n",(0,t.jsx)(n.li,{children:"Proof-of-concept applications"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"market-alternatives--adoption",children:"Market Alternatives & Adoption"}),"\n",(0,t.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Auth0 (SaaS identity platform)"}),"\n",(0,t.jsx)(n.li,{children:"Azure Active Directory B2C"}),"\n",(0,t.jsx)(n.li,{children:"Firebase Authentication"}),"\n",(0,t.jsx)(n.li,{children:"AWS Cognito"}),"\n",(0,t.jsx)(n.li,{children:"Okta"}),"\n",(0,t.jsx)(n.li,{children:"Custom JWT implementation"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"market-position",children:"Market Position:"}),"\n",(0,t.jsx)(n.p,{children:".NET Identity is the de-facto standard for .NET applications with extensive enterprise adoption."}),"\n",(0,t.jsx)(n.h2,{id:"pros-and-cons",children:"Pros and Cons"}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Comprehensive built-in solution"}),"\n",(0,t.jsx)(n.li,{children:"Highly configurable"}),"\n",(0,t.jsx)(n.li,{children:"Extensive customization options"}),"\n",(0,t.jsx)(n.li,{children:"Strong security defaults"}),"\n",(0,t.jsx)(n.li,{children:"Good performance"}),"\n",(0,t.jsx)(n.li,{children:"Integrates well with EF Core"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can be complex for simple scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Steep learning curve for advanced features"}),"\n",(0,t.jsx)(n.li,{children:"Database overhead for simple apps"}),"\n",(0,t.jsx)(n.li,{children:"UI scaffolding is basic"}),"\n",(0,t.jsx)(n.li,{children:"Migration complexity"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sample-usage",children:"Sample Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// JWT service\r\npublic class JwtService : IJwtService\r\n{\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public JwtService(IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n    }\r\n\r\n    public string GenerateToken(User user)\r\n    {\r\n        var tokenHandler = new JwtSecurityTokenHandler();\r\n        var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"]!);\r\n\r\n        var tokenDescriptor = new SecurityTokenDescriptor\r\n        {\r\n            Subject = new ClaimsIdentity(new[]\r\n            {\r\n                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\r\n                new Claim(ClaimTypes.Name, user.Username),\r\n                new Claim(ClaimTypes.Email, user.Email),\r\n                new Claim(ClaimTypes.Role, user.Role)\r\n            }),\r\n            Expires = DateTime.UtcNow.AddHours(1),\r\n            SigningCredentials = new SigningCredentials(\r\n                new SymmetricSecurityKey(key),\r\n                SecurityAlgorithms.HmacSha256Signature)\r\n        };\r\n\r\n        var token = tokenHandler.CreateToken(tokenDescriptor);\r\n        return tokenHandler.WriteToken(token);\r\n    }\r\n}\r\n\r\n// Protected controller\r\n[ApiController]\r\n[Route("api/[controller]")]\r\n[Authorize]\r\npublic class UsersController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Authorize(Roles = "Admin")]\r\n    public async Task<ActionResult<IEnumerable<User>>> GetUsers()\r\n    {\r\n        // Only admins can access this endpoint\r\n        return Ok(await _userService.GetAllUsersAsync());\r\n    }\r\n\r\n    [HttpGet("me")]\r\n    public async Task<ActionResult<User>> GetCurrentUser()\r\n    {\r\n        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\r\n        var user = await _userService.GetUserByIdAsync(int.Parse(userId!));\r\n        return Ok(user);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Models/ApplicationUser.cs\r\npublic class ApplicationUser : IdentityUser\r\n{\r\n    public string FirstName { get; set; }\r\n    public string LastName { get; set; }\r\n    public DateTime DateCreated { get; set; }\r\n    public bool IsActive { get; set; }\r\n}\r\n\r\n// Data/ApplicationDbContext.cs\r\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser>\r\n{\r\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n    protected override void OnModelCreating(ModelBuilder builder)\r\n    {\r\n        base.OnModelCreating(builder);\r\n\r\n        // Seed roles\r\n        builder.Entity<IdentityRole>().HasData(\r\n            new IdentityRole { Id = "1", Name = "Admin", NormalizedName = "ADMIN" },\r\n            new IdentityRole { Id = "2", Name = "User", NormalizedName = "USER" }\r\n        );\r\n    }\r\n}\r\n\r\n// DTOs/AuthDto.cs\r\npublic class LoginDto\r\n{\r\n    [Required]\r\n    [EmailAddress]\r\n    public string Email { get; set; }\r\n\r\n    [Required]\r\n    public string Password { get; set; }\r\n}\r\n\r\npublic class RegisterDto\r\n{\r\n    [Required]\r\n    [EmailAddress]\r\n    public string Email { get; set; }\r\n\r\n    [Required]\r\n    [StringLength(100, MinimumLength = 8)]\r\n    public string Password { get; set; }\r\n\r\n    [Required]\r\n    public string FirstName { get; set; }\r\n\r\n    [Required]\r\n    public string LastName { get; set; }\r\n}\r\n\r\npublic class AuthResponseDto\r\n{\r\n    public string Token { get; set; }\r\n    public DateTime Expiration { get; set; }\r\n    public string UserId { get; set; }\r\n    public string Email { get; set; }\r\n    public List<string> Roles { get; set; }\r\n}\r\n\r\n// Services/IAuthService.cs\r\npublic interface IAuthService\r\n{\r\n    Task<AuthResponseDto> LoginAsync(LoginDto loginDto);\r\n    Task<AuthResponseDto> RegisterAsync(RegisterDto registerDto);\r\n    Task<bool> AssignRoleAsync(string userId, string role);\r\n    string GenerateJwtToken(ApplicationUser user, IList<string> roles);\r\n}\r\n\r\n// Services/AuthService.cs\r\npublic class AuthService : IAuthService\r\n{\r\n    private readonly UserManager<ApplicationUser> _userManager;\r\n    private readonly SignInManager<ApplicationUser> _signInManager;\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public AuthService(\r\n        UserManager<ApplicationUser> userManager,\r\n        SignInManager<ApplicationUser> signInManager,\r\n        IConfiguration configuration)\r\n    {\r\n        _userManager = userManager;\r\n        _signInManager = signInManager;\r\n        _configuration = configuration;\r\n    }\r\n\r\n    public async Task<AuthResponseDto> LoginAsync(LoginDto loginDto)\r\n    {\r\n        var user = await _userManager.FindByEmailAsync(loginDto.Email);\r\n        if (user == null)\r\n            throw new UnauthorizedAccessException("Invalid credentials");\r\n\r\n        var result = await _signInManager.CheckPasswordSignInAsync(user, loginDto.Password, false);\r\n        if (!result.Succeeded)\r\n            throw new UnauthorizedAccessException("Invalid credentials");\r\n\r\n        var roles = await _userManager.GetRolesAsync(user);\r\n        var token = GenerateJwtToken(user, roles);\r\n\r\n        return new AuthResponseDto\r\n        {\r\n            Token = token,\r\n            Expiration = DateTime.Now.AddHours(1),\r\n            UserId = user.Id,\r\n            Email = user.Email,\r\n            Roles = roles.ToList()\r\n        };\r\n    }\r\n\r\n    public async Task<AuthResponseDto> RegisterAsync(RegisterDto registerDto)\r\n    {\r\n        var user = new ApplicationUser\r\n        {\r\n            UserName = registerDto.Email,\r\n            Email = registerDto.Email,\r\n            FirstName = registerDto.FirstName,\r\n            LastName = registerDto.LastName,\r\n            DateCreated = DateTime.UtcNow,\r\n            IsActive = true\r\n        };\r\n\r\n        var result = await _userManager.CreateAsync(user, registerDto.Password);\r\n        if (!result.Succeeded)\r\n            throw new InvalidOperationException(string.Join(", ", result.Errors.Select(e => e.Description)));\r\n\r\n        await _userManager.AddToRoleAsync(user, "User");\r\n\r\n        var roles = await _userManager.GetRolesAsync(user);\r\n        var token = GenerateJwtToken(user, roles);\r\n\r\n        return new AuthResponseDto\r\n        {\r\n            Token = token,\r\n            Expiration = DateTime.Now.AddHours(1),\r\n            UserId = user.Id,\r\n            Email = user.Email,\r\n            Roles = roles.ToList()\r\n        };\r\n    }\r\n\r\n    public async Task<bool> AssignRoleAsync(string userId, string role)\r\n    {\r\n        var user = await _userManager.FindByIdAsync(userId);\r\n        if (user == null) return false;\r\n\r\n        var result = await _userManager.AddToRoleAsync(user, role);\r\n        return result.Succeeded;\r\n    }\r\n\r\n    public string GenerateJwtToken(ApplicationUser user, IList<string> roles)\r\n    {\r\n        var claims = new List<Claim>\r\n        {\r\n            new Claim(JwtRegisteredClaimNames.Sub, user.Id),\r\n            new Claim(JwtRegisteredClaimNames.Email, user.Email),\r\n            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\r\n            new Claim("firstName", user.FirstName),\r\n            new Claim("lastName", user.LastName)\r\n        };\r\n\r\n        foreach (var role in roles)\r\n        {\r\n            claims.Add(new Claim(ClaimTypes.Role, role));\r\n        }\r\n\r\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));\r\n        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\r\n\r\n        var token = new JwtSecurityToken(\r\n            issuer: _configuration["Jwt:Issuer"],\r\n            audience: _configuration["Jwt:Audience"],\r\n            claims: claims,\r\n            expires: DateTime.Now.AddHours(1),\r\n            signingCredentials: credentials\r\n        );\r\n\r\n        return new JwtSecurityTokenHandler().WriteToken(token);\r\n    }\r\n}\r\n\r\n// Controllers/AuthController.cs\r\n[ApiController]\r\n[Route("api/[controller]")]\r\npublic class AuthController : ControllerBase\r\n{\r\n    private readonly IAuthService _authService;\r\n\r\n    public AuthController(IAuthService authService)\r\n    {\r\n        _authService = authService;\r\n    }\r\n\r\n    [HttpPost("login")]\r\n    public async Task<ActionResult<AuthResponseDto>> Login(LoginDto loginDto)\r\n    {\r\n        try\r\n        {\r\n            var response = await _authService.LoginAsync(loginDto);\r\n            return Ok(response);\r\n        }\r\n        catch (UnauthorizedAccessException ex)\r\n        {\r\n            return Unauthorized(new { message = ex.Message });\r\n        }\r\n    }\r\n\r\n    [HttpPost("register")]\r\n    public async Task<ActionResult<AuthResponseDto>> Register(RegisterDto registerDto)\r\n    {\r\n        try\r\n        {\r\n            var response = await _authService.RegisterAsync(registerDto);\r\n            return Ok(response);\r\n        }\r\n        catch (InvalidOperationException ex)\r\n        {\r\n            return BadRequest(new { message = ex.Message });\r\n        }\r\n    }\r\n\r\n    [HttpGet("profile")]\r\n    [Authorize]\r\n    public async Task<ActionResult> GetProfile()\r\n    {\r\n        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\r\n        var email = User.FindFirst(ClaimTypes.Email)?.Value;\r\n        var roles = User.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();\r\n\r\n        return Ok(new { userId, email, roles });\r\n    }\r\n\r\n    [HttpPost("assign-role")]\r\n    [Authorize(Roles = "Admin")]\r\n    public async Task<ActionResult> AssignRole([FromBody] AssignRoleDto dto)\r\n    {\r\n        var success = await _authService.AssignRoleAsync(dto.UserId, dto.Role);\r\n        if (!success)\r\n            return BadRequest("Failed to assign role");\r\n\r\n        return Ok("Role assigned successfully");\r\n    }\r\n}\r\n\r\n// Protected Controller Example\r\n[ApiController]\r\n[Route("api/[controller]")]\r\n[Authorize] // Requires authentication\r\npublic class SecureController : ControllerBase\r\n{\r\n    [HttpGet("admin-only")]\r\n    [Authorize(Roles = "Admin")] // Requires Admin role\r\n    public ActionResult AdminOnly()\r\n    {\r\n        return Ok("This is admin-only content");\r\n    }\r\n\r\n    [HttpGet("policy-based")]\r\n    [Authorize(Policy = "MinimumAge")] // Requires custom policy\r\n    public ActionResult PolicyBased()\r\n    {\r\n        return Ok("This requires minimum age policy");\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);