"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[1003],{8097:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Topics/CloudTechnologies/AzureKeyVault","title":"Azure Key Vault","description":"Short Introduction","source":"@site/docs/Topics/07_CloudTechnologies/35_AzureKeyVault.md","sourceDirName":"Topics/07_CloudTechnologies","slug":"/Topics/CloudTechnologies/azure_key_vault","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_key_vault","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"azure","permalink":"/docusaurus_dotnet_overview/docs/tags/azure"},{"inline":true,"label":"key","permalink":"/docusaurus_dotnet_overview/docs/tags/key"},{"inline":true,"label":"vault","permalink":"/docusaurus_dotnet_overview/docs/tags/vault"},{"inline":true,"label":"secure","permalink":"/docusaurus_dotnet_overview/docs/tags/secure"},{"inline":true,"label":"storage","permalink":"/docusaurus_dotnet_overview/docs/tags/storage"},{"inline":true,"label":"secrets","permalink":"/docusaurus_dotnet_overview/docs/tags/secrets"},{"inline":true,"label":"certificates","permalink":"/docusaurus_dotnet_overview/docs/tags/certificates"}],"version":"current","sidebarPosition":35,"frontMatter":{"slug":"azure_key_vault","title":"Azure Key Vault","tags":["dotnet","azure","key","vault","secure","storage","secrets","certificates"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure Service Bus","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_service_bus"},"next":{"title":"Azure Storage (Blob, Queue, Table)","permalink":"/docusaurus_dotnet_overview/docs/Topics/CloudTechnologies/azure_storage"}}');var i=n(4848),s=n(8453);const a={slug:"azure_key_vault",title:"Azure Key Vault",tags:["dotnet","azure","key","vault","secure","storage","secrets","certificates"]},c="Azure Key Vault",l={},o=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup and Deployment Steps",id:"setup-and-deployment-steps",level:2},{value:"Azure CLI Setup",id:"azure-cli-setup",level:3},{value:"Bicep Template",id:"bicep-template",level:3},{value:"Typical Usage and Integration with .NET Apps",id:"typical-usage-and-integration-with-net-apps",level:2},{value:"NuGet Packages",id:"nuget-packages",level:3},{value:"Configuration Integration",id:"configuration-integration",level:3},{value:"Direct Key Vault Access Service",id:"direct-key-vault-access-service",level:3},{value:"Using Secrets in Controllers",id:"using-secrets-in-controllers",level:3},{value:"Certificate Management",id:"certificate-management",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs Alternatives",id:"when-to-use-vs-alternatives",level:2},{value:"Use Azure Key Vault when",id:"use-azure-key-vault-when",level:3},{value:"Don&#39;t use when",id:"dont-use-when",level:3},{value:"Alternatives",id:"alternatives",level:3},{value:"Market Pros/Cons and Cost Considerations",id:"market-proscons-and-cost-considerations",level:2},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3},{value:"Cost Considerations",id:"cost-considerations",level:3}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"azure-key-vault",children:"Azure Key Vault"})}),"\n",(0,i.jsx)(r.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,i.jsx)(r.p,{children:"Azure Key Vault is a cloud service for securely storing and accessing secrets, keys, and certificates. It provides centralized storage for application secrets with hardware security module (HSM) protection and fine-grained access control."}),"\n",(0,i.jsx)(r.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,i.jsx)(r.p,{children:'"Azure Key Vault is a tool for securely storing and accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, or cryptographic keys."'}),"\n",(0,i.jsx)(r.h2,{id:"setup-and-deployment-steps",children:"Setup and Deployment Steps"}),"\n",(0,i.jsx)(r.h3,{id:"azure-cli-setup",children:"Azure CLI Setup"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# Create Key Vault\r\naz keyvault create --name mykeyvault --resource-group myResourceGroup --location eastus --enabled-for-template-deployment\r\n\r\n# Add secrets\r\naz keyvault secret set --vault-name mykeyvault --name "ConnectionString" --value "Server=myserver;Database=mydb;User Id=myuser;Password=mypass;"\r\n\r\n# Add certificate\r\naz keyvault certificate import --vault-name mykeyvault --name "ssl-cert" --file certificate.pfx\r\n\r\n# Create managed identity for app\r\naz webapp identity assign --name mywebapp --resource-group myResourceGroup\r\n\r\n# Grant access to Key Vault\r\naz keyvault set-policy --name mykeyvault --object-id <managed-identity-object-id> --secret-permissions get list\n'})}),"\n",(0,i.jsx)(r.h3,{id:"bicep-template",children:"Bicep Template"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bicep",children:"resource keyVault 'Microsoft.KeyVault/vaults@2023-02-01' = {\r\n  name: 'mykeyvault'\r\n  location: resourceGroup().location\r\n  properties: {\r\n    tenantId: subscription().tenantId\r\n    sku: {\r\n      family: 'A'\r\n      name: 'standard'\r\n    }\r\n    accessPolicies: []\r\n    enabledForTemplateDeployment: true\r\n    enabledForDiskEncryption: true\r\n    enabledForDeployment: true\r\n  }\r\n}\r\n\r\nresource secret 'Microsoft.KeyVault/vaults/secrets@2023-02-01' = {\r\n  parent: keyVault\r\n  name: 'ConnectionString'\r\n  properties: {\r\n    value: 'Server=myserver;Database=mydb;Integrated Security=true;'\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"typical-usage-and-integration-with-net-apps",children:"Typical Usage and Integration with .NET Apps"}),"\n",(0,i.jsx)(r.h3,{id:"nuget-packages",children:"NuGet Packages"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xml",children:'<PackageReference Include="Azure.Extensions.AspNetCore.Configuration.Secrets" Version="1.3.0" />\r\n<PackageReference Include="Azure.Identity" Version="1.10.3" />\r\n<PackageReference Include="Azure.Security.KeyVault.Secrets" Version="4.5.0" />\n'})}),"\n",(0,i.jsx)(r.h3,{id:"configuration-integration",children:"Configuration Integration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'// Program.cs\r\nusing Azure.Identity;\r\nusing Azure.Extensions.AspNetCore.Configuration.Secrets;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add Key Vault configuration\r\nif (!builder.Environment.IsDevelopment())\r\n{\r\n    var keyVaultUri = builder.Configuration["KeyVaultUri"];\r\n    builder.Configuration.AddAzureKeyVault(\r\n        new Uri(keyVaultUri),\r\n        new DefaultAzureCredential());\r\n}\r\n\r\n// Alternative: Specific credential\r\n// builder.Configuration.AddAzureKeyVault(\r\n//     new Uri(keyVaultUri),\r\n//     new ManagedIdentityCredential());\r\n\r\nvar app = builder.Build();\n'})}),"\n",(0,i.jsx)(r.h3,{id:"direct-key-vault-access-service",children:"Direct Key Vault Access Service"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'using Azure.Security.KeyVault.Secrets;\r\nusing Azure.Identity;\r\n\r\npublic interface IKeyVaultService\r\n{\r\n    Task<string> GetSecretAsync(string secretName);\r\n    Task SetSecretAsync(string secretName, string secretValue);\r\n    Task<IEnumerable<string>> ListSecretsAsync();\r\n    Task DeleteSecretAsync(string secretName);\r\n}\r\n\r\npublic class KeyVaultService : IKeyVaultService\r\n{\r\n    private readonly SecretClient _secretClient;\r\n    private readonly ILogger<KeyVaultService> _logger;\r\n\r\n    public KeyVaultService(IConfiguration configuration, ILogger<KeyVaultService> logger)\r\n    {\r\n        var keyVaultUri = configuration["KeyVaultUri"];\r\n        _secretClient = new SecretClient(new Uri(keyVaultUri), new DefaultAzureCredential());\r\n        _logger = logger;\r\n    }\r\n\r\n    public async Task<string> GetSecretAsync(string secretName)\r\n    {\r\n        try\r\n        {\r\n            var secret = await _secretClient.GetSecretAsync(secretName);\r\n            return secret.Value.Value;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, $"Failed to retrieve secret: {secretName}");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    public async Task SetSecretAsync(string secretName, string secretValue)\r\n    {\r\n        try\r\n        {\r\n            await _secretClient.SetSecretAsync(secretName, secretValue);\r\n            _logger.LogInformation($"Secret {secretName} updated successfully");\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, $"Failed to set secret: {secretName}");\r\n            throw;\r\n        }\r\n    }\r\n\r\n    public async Task<IEnumerable<string>> ListSecretsAsync()\r\n    {\r\n        var secretNames = new List<string>();\r\n        await foreach (var secret in _secretClient.GetPropertiesOfSecretsAsync())\r\n        {\r\n            secretNames.Add(secret.Name);\r\n        }\r\n        return secretNames;\r\n    }\r\n\r\n    public async Task DeleteSecretAsync(string secretName)\r\n    {\r\n        await _secretClient.StartDeleteSecretAsync(secretName);\r\n        _logger.LogInformation($"Secret {secretName} deleted");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"using-secrets-in-controllers",children:"Using Secrets in Controllers"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'[ApiController]\r\n[Route("api/[controller]")]\r\npublic class ConfigController : ControllerBase\r\n{\r\n    private readonly IConfiguration _configuration;\r\n    private readonly IKeyVaultService _keyVaultService;\r\n\r\n    public ConfigController(IConfiguration configuration, IKeyVaultService keyVaultService)\r\n    {\r\n        _configuration = configuration;\r\n        _keyVaultService = keyVaultService;\r\n    }\r\n\r\n    [HttpGet("database-connection")]\r\n    public async Task<IActionResult> GetDatabaseConnection()\r\n    {\r\n        // This automatically comes from Key Vault if configured\r\n        var connectionString = _configuration.GetConnectionString("DefaultConnection");\r\n\r\n        // Or get directly from Key Vault service\r\n        var directSecret = await _keyVaultService.GetSecretAsync("ConnectionString");\r\n\r\n        return Ok(new { HasConnection = !string.IsNullOrEmpty(connectionString) });\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"certificate-management",children:"Certificate Management"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"using Azure.Security.KeyVault.Certificates;\r\n\r\npublic class CertificateService\r\n{\r\n    private readonly CertificateClient _certificateClient;\r\n\r\n    public CertificateService(string keyVaultUri)\r\n    {\r\n        _certificateClient = new CertificateClient(new Uri(keyVaultUri), new DefaultAzureCredential());\r\n    }\r\n\r\n    public async Task<X509Certificate2> GetCertificateAsync(string certificateName)\r\n    {\r\n        var certificate = await _certificateClient.DownloadCertificateAsync(certificateName);\r\n        return certificate.Value;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Secure storage of connection strings and API keys"}),"\n",(0,i.jsx)(r.li,{children:"Certificate management for SSL/TLS"}),"\n",(0,i.jsx)(r.li,{children:"Encryption key management"}),"\n",(0,i.jsx)(r.li,{children:"Database passwords and service credentials"}),"\n",(0,i.jsx)(r.li,{children:"OAuth client secrets"}),"\n",(0,i.jsx)(r.li,{children:"Configuration secrets for different environments"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"when-to-use-vs-alternatives",children:"When to Use vs Alternatives"}),"\n",(0,i.jsx)(r.h3,{id:"use-azure-key-vault-when",children:"Use Azure Key Vault when"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Centralized secret management across multiple applications"}),"\n",(0,i.jsx)(r.li,{children:"Compliance requirements for secret storage"}),"\n",(0,i.jsx)(r.li,{children:"Integration with Azure services and managed identities"}),"\n",(0,i.jsx)(r.li,{children:"Hardware security module (HSM) protection needed"}),"\n",(0,i.jsx)(r.li,{children:"Audit logging of secret access required"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"dont-use-when",children:"Don't use when"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Simple applications with few secrets"}),"\n",(0,i.jsx)(r.li,{children:"Cost optimization is critical for small projects"}),"\n",(0,i.jsx)(r.li,{children:"Secrets don't need centralized management"}),"\n",(0,i.jsx)(r.li,{children:"Non-Azure environments primarily"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"alternatives",children:"Alternatives"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Azure"}),": App Configuration (for non-secret config), Azure Managed HSM"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"AWS"}),": AWS Secrets Manager, AWS Systems Manager Parameter Store"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"GCP"}),": Secret Manager"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Open Source"}),": HashiCorp Vault, Kubernetes Secrets"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"market-proscons-and-cost-considerations",children:"Market Pros/Cons and Cost Considerations"}),"\n",(0,i.jsx)(r.h3,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Hardware security module (HSM) backing"}),"\n",(0,i.jsx)(r.li,{children:"Integration with Azure Active Directory"}),"\n",(0,i.jsx)(r.li,{children:"Automatic secret rotation capabilities"}),"\n",(0,i.jsx)(r.li,{children:"Comprehensive audit logging"}),"\n",(0,i.jsx)(r.li,{children:"Managed identities eliminate credential management"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cons",children:"Cons"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Additional complexity for simple scenarios"}),"\n",(0,i.jsx)(r.li,{children:"Network dependency for secret retrieval"}),"\n",(0,i.jsx)(r.li,{children:"Cost for high-volume secret operations"}),"\n",(0,i.jsx)(r.li,{children:"Learning curve for proper implementation"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cost-considerations",children:"Cost Considerations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Standard tier: ~$0.03 per 10,000 transactions"}),"\n",(0,i.jsx)(r.li,{children:"Premium tier (HSM): ~$1.00 per 10,000 transactions + $5/hour per HSM"}),"\n",(0,i.jsx)(r.li,{children:"Certificate operations: ~$3.00 per certificate request"}),"\n",(0,i.jsx)(r.li,{children:"No charge for storage of secrets, keys, and certificates"}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);