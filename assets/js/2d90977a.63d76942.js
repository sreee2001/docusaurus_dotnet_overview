"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8246],{949:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Topics/Testing/24.3_LoadTesting","title":"Load Testing","description":"Load testing evaluates how an application performs under expected and peak load conditions. It helps identify performance bottlenecks, resource limitations, and scalability issues before they impact users in production.","source":"@site/docs/Topics/05_Testing/24.3_LoadTesting.md","sourceDirName":"Topics/05_Testing","slug":"/Topics/Testing/load_testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/load_testing","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"testing","permalink":"/docusaurus_dotnet_overview/docs/tags/testing"},{"inline":true,"label":"load_testing","permalink":"/docusaurus_dotnet_overview/docs/tags/load-testing"},{"inline":true,"label":"quality","permalink":"/docusaurus_dotnet_overview/docs/tags/quality"},{"inline":true,"label":"performance","permalink":"/docusaurus_dotnet_overview/docs/tags/performance"}],"version":"current","frontMatter":{"slug":"load_testing","title":"Load Testing","tags":["dotnet","testing","load_testing","quality","performance"]},"sidebar":"tutorialSidebar","previous":{"title":"End to End Testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/end_to_end_testing"},"next":{"title":"Caching","permalink":"/docusaurus_dotnet_overview/docs/Topics/PerformanceAndScalability/caching"}}');var s=r(4848),i=r(8453);const a={slug:"load_testing",title:"Load Testing",tags:["dotnet","testing","load_testing","quality","performance"]},o="Load Testing",d={},l=[{value:"Official Definition/Standards",id:"official-definitionstandards",level:2},{value:"Setup and Usage (Tools, Packages, Test Runners)",id:"setup-and-usage-tools-packages-test-runners",level:2},{value:"Primary Load Testing Tools:",id:"primary-load-testing-tools",level:3},{value:"Essential Packages:",id:"essential-packages",level:3},{value:"Test Infrastructure:",id:"test-infrastructure",level:3},{value:"Typical Test Architecture and Patterns",id:"typical-test-architecture-and-patterns",level:2},{value:"Common Patterns:",id:"common-patterns",level:3},{value:"Example Load Test Code",id:"example-load-test-code",level:2},{value:"When to Use and When Not to Use",id:"when-to-use-and-when-not-to-use",level:2},{value:"Use Load Testing when:",id:"use-load-testing-when",level:3},{value:"Don&#39;t use Load Testing when:",id:"dont-use-load-testing-when",level:3},{value:"Pros and Cons and Alternatives",id:"pros-and-cons-and-alternatives",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Alternatives:",id:"alternatives",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"load-testing",children:"Load Testing"})}),"\n",(0,s.jsx)(n.p,{children:"Load testing evaluates how an application performs under expected and peak load conditions. It helps identify performance bottlenecks, resource limitations, and scalability issues before they impact users in production."}),"\n",(0,s.jsx)(n.h2,{id:"official-definitionstandards",children:"Official Definition/Standards"}),"\n",(0,s.jsx)(n.p,{children:"Load testing is a type of performance testing that simulates realistic user loads to evaluate application behavior under normal and anticipated peak conditions. It measures response times, throughput, resource utilization, and identifies the breaking point of applications."}),"\n",(0,s.jsx)(n.h2,{id:"setup-and-usage-tools-packages-test-runners",children:"Setup and Usage (Tools, Packages, Test Runners)"}),"\n",(0,s.jsx)(n.h3,{id:"primary-load-testing-tools",children:"Primary Load Testing Tools:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NBomber"}),": .NET-native load testing framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"k6"}),": Modern JavaScript-based load testing tool"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Apache JMeter"}),": GUI-based, widely-used performance testing tool"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Artillery"}),": Node.js-based, cloud-native testing framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Azure Load Testing"}),": Cloud-based service for load testing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"essential-packages",children:"Essential Packages:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# NBomber for .NET\r\ndotnet add package NBomber\r\ndotnet add package NBomber.Http\r\n\r\n# For HTTP client testing\r\ndotnet add package Microsoft.Extensions.Http\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-infrastructure",children:"Test Infrastructure:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load generators and test agents"}),"\n",(0,s.jsx)(n.li,{children:"Monitoring and metrics collection"}),"\n",(0,s.jsx)(n.li,{children:"Resource monitoring (CPU, memory, database)"}),"\n",(0,s.jsx)(n.li,{children:"Network and latency simulation"}),"\n",(0,s.jsx)(n.li,{children:"Distributed testing capabilities"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"typical-test-architecture-and-patterns",children:"Typical Test Architecture and Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ramp-up Testing"}),": Gradually increase load"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sustained Load"}),": Maintain constant load over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spike Testing"}),": Sudden load increases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Volume Testing"}),": Large amounts of data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stress Testing"}),": Beyond normal capacity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Soak Testing"}),": Extended duration testing"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-load-test-code",children:"Example Load Test Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Package references:\r\n// <PackageReference Include="NBomber" Version="5.0.0" />\r\n// <PackageReference Include="NBomber.Http" Version="5.0.0" />\r\n\r\nusing NBomber.CSharp;\r\nusing NBomber.Http.CSharp;\r\n\r\n// NBomber Load Testing Example\r\npublic class HotelApiLoadTests\r\n{\r\n    public static void RunBookingLoadTest()\r\n    {\r\n        // HTTP client configuration\r\n        using var httpClient = new HttpClient();\r\n        httpClient.BaseAddress = new Uri("https://localhost:7001");\r\n\r\n        // Test scenario for booking API\r\n        var bookingScenario = Scenario.Create("booking_api_test", async context =>\r\n        {\r\n            var bookingRequest = CreateBookingRequest();\r\n\r\n            var response = await httpClient.PostAsJsonAsync("/api/bookings", bookingRequest);\r\n\r\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\r\n        })\r\n        .WithLoadSimulations(\r\n            Simulation.InjectPerSec(rate: 10, during: TimeSpan.FromMinutes(5)), // Warm-up\r\n            Simulation.InjectPerSec(rate: 50, during: TimeSpan.FromMinutes(10)), // Normal load\r\n            Simulation.InjectPerSec(rate: 100, during: TimeSpan.FromMinutes(5))  // Peak load\r\n        );\r\n\r\n        // Test scenario for search API\r\n        var searchScenario = Scenario.Create("search_api_test", async context =>\r\n        {\r\n            var searchQuery = "?checkin=2024-12-01&checkout=2024-12-03&guests=2";\r\n\r\n            var response = await httpClient.GetAsync($"/api/rooms/search{searchQuery}");\r\n\r\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\r\n        })\r\n        .WithLoadSimulations(\r\n            Simulation.InjectPerSec(rate: 20, during: TimeSpan.FromMinutes(15))\r\n        );\r\n\r\n        // Run the load test\r\n        NBomberRunner\r\n            .RegisterScenarios(bookingScenario, searchScenario)\r\n            .WithReportFolder("load_test_reports")\r\n            .WithReportFormats(ReportFormat.Txt, ReportFormat.Html, ReportFormat.Csv)\r\n            .Run();\r\n    }\r\n\r\n    private static CreateBookingRequest CreateBookingRequest()\r\n    {\r\n        var random = new Random();\r\n        return new CreateBookingRequest\r\n        {\r\n            GuestId = random.Next(1, 1000),\r\n            RoomId = random.Next(101, 200),\r\n            CheckInDate = DateTime.Today.AddDays(random.Next(1, 30)),\r\n            CheckOutDate = DateTime.Today.AddDays(random.Next(31, 60)),\r\n            TotalAmount = random.Next(100, 500)\r\n        };\r\n    }\r\n}\r\n\r\n// Advanced NBomber scenario with data feeding\r\npublic class AdvancedLoadTests\r\n{\r\n    public static void RunDataDrivenLoadTest()\r\n    {\r\n        // Data feed for test data\r\n        var guestData = Data.Feed(() => new\r\n        {\r\n            GuestId = Random.Shared.Next(1, 1000),\r\n            RoomType = new[] { "Standard", "Deluxe", "Suite" }[Random.Shared.Next(0, 3)],\r\n            Duration = Random.Shared.Next(1, 7)\r\n        });\r\n\r\n        var bookingWithDataFeed = Scenario.Create("booking_with_data_feed", async context =>\r\n        {\r\n            var data = context.Data;\r\n\r\n            // Search for rooms first\r\n            using var httpClient = new HttpClient();\r\n            httpClient.BaseAddress = new Uri("https://localhost:7001");\r\n\r\n            var searchResponse = await httpClient.GetAsync(\r\n                $"/api/rooms/search?type={data.RoomType}&duration={data.Duration}");\r\n\r\n            if (!searchResponse.IsSuccessStatusCode)\r\n                return Response.Fail("Search failed");\r\n\r\n            // Create booking\r\n            var bookingRequest = new CreateBookingRequest\r\n            {\r\n                GuestId = data.GuestId,\r\n                RoomId = Random.Shared.Next(101, 200),\r\n                CheckInDate = DateTime.Today.AddDays(1),\r\n                CheckOutDate = DateTime.Today.AddDays(1 + data.Duration),\r\n                TotalAmount = 100 * data.Duration\r\n            };\r\n\r\n            var bookingResponse = await httpClient.PostAsJsonAsync("/api/bookings", bookingRequest);\r\n\r\n            return bookingResponse.IsSuccessStatusCode ? Response.Ok() : Response.Fail("Booking failed");\r\n        })\r\n        .WithDataFeed(guestData)\r\n        .WithLoadSimulations(\r\n            Simulation.InjectPerSec(rate: 10, during: TimeSpan.FromMinutes(2)),\r\n            Simulation.InjectPerSec(rate: 25, during: TimeSpan.FromMinutes(5)),\r\n            Simulation.InjectPerSec(rate: 50, during: TimeSpan.FromMinutes(3))\r\n        );\r\n\r\n        NBomberRunner\r\n            .RegisterScenarios(bookingWithDataFeed)\r\n            .WithReportFolder("advanced_load_test_reports")\r\n            .Run();\r\n    }\r\n\r\n    // Stress testing to find breaking point\r\n    public static void RunStressTest()\r\n    {\r\n        var stressScenario = Scenario.Create("stress_test", async context =>\r\n        {\r\n            using var httpClient = new HttpClient();\r\n            httpClient.BaseAddress = new Uri("https://localhost:7001");\r\n            httpClient.Timeout = TimeSpan.FromSeconds(30);\r\n\r\n            var response = await httpClient.GetAsync("/api/rooms");\r\n\r\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\r\n        })\r\n        .WithLoadSimulations(\r\n            Simulation.InjectPerSec(rate: 10, during: TimeSpan.FromMinutes(1)),   // Baseline\r\n            Simulation.InjectPerSec(rate: 50, during: TimeSpan.FromMinutes(2)),   // Normal\r\n            Simulation.InjectPerSec(rate: 100, during: TimeSpan.FromMinutes(2)),  // High\r\n            Simulation.InjectPerSec(rate: 200, during: TimeSpan.FromMinutes(2)),  // Very high\r\n            Simulation.InjectPerSec(rate: 500, during: TimeSpan.FromMinutes(2)),  // Extreme\r\n            Simulation.InjectPerSec(rate: 1000, during: TimeSpan.FromMinutes(1))  // Breaking point\r\n        );\r\n\r\n        NBomberRunner\r\n            .RegisterScenarios(stressScenario)\r\n            .WithReportFolder("stress_test_reports")\r\n            .Run();\r\n    }\r\n}\r\n\r\n// Integration with ASP.NET Core TestServer for isolated testing\r\npublic class InProcessLoadTests\r\n{\r\n    [Test]\r\n    public void LoadTest_BookingAPI_WithTestServer()\r\n    {\r\n        var webAppFactory = new WebApplicationFactory<Program>()\r\n            .WithWebHostBuilder(builder =>\r\n            {\r\n                builder.ConfigureServices(services =>\r\n                {\r\n                    // Configure in-memory database for testing\r\n                    services.AddDbContext<HotelDbContext>(options =>\r\n                        options.UseInMemoryDatabase("LoadTestDb"));\r\n                });\r\n            });\r\n\r\n        var httpClient = webAppFactory.CreateClient();\r\n\r\n        var scenario = Scenario.Create("in_process_test", async context =>\r\n        {\r\n            var bookingRequest = new CreateBookingRequest\r\n            {\r\n                GuestId = Random.Shared.Next(1, 100),\r\n                RoomId = Random.Shared.Next(101, 110),\r\n                CheckInDate = DateTime.Today.AddDays(1),\r\n                CheckOutDate = DateTime.Today.AddDays(3),\r\n                TotalAmount = 299.99m\r\n            };\r\n\r\n            var response = await httpClient.PostAsJsonAsync("/api/bookings", bookingRequest);\r\n\r\n            return response.IsSuccessStatusCode ? Response.Ok() : Response.Fail();\r\n        })\r\n        .WithLoadSimulations(\r\n            Simulation.InjectPerSec(rate: 100, during: TimeSpan.FromMinutes(2))\r\n        );\r\n\r\n        NBomberRunner\r\n            .RegisterScenarios(scenario)\r\n            .WithReportFolder("in_process_load_test_reports")\r\n            .Run();\r\n\r\n        webAppFactory.Dispose();\r\n    }\r\n}\r\n\r\n// k6 JavaScript alternative example\r\n/*\r\n// k6-load-test.js\r\nimport http from \'k6/http\';\r\nimport { check, group, sleep } from \'k6\';\r\n\r\nexport let options = {\r\n  stages: [\r\n    { duration: \'2m\', target: 10 }, // Ramp up\r\n    { duration: \'5m\', target: 50 }, // Stay at 50 users\r\n    { duration: \'2m\', target: 100 }, // Ramp up to 100 users\r\n    { duration: \'5m\', target: 100 }, // Stay at 100 users\r\n    { duration: \'2m\', target: 0 },   // Ramp down\r\n  ],\r\n  thresholds: {\r\n    http_req_duration: [\'p(95)<500\'], // 95% of requests should be below 500ms\r\n    http_req_failed: [\'rate<0.02\'],   // Error rate should be less than 2%\r\n  },\r\n};\r\n\r\nconst BASE_URL = \'https://localhost:7001\';\r\n\r\nexport default function () {\r\n  group(\'Hotel Booking Flow\', function () {\r\n    // Search for rooms\r\n    let searchResponse = http.get(`${BASE_URL}/api/rooms/search?checkin=2024-12-01&checkout=2024-12-03`);\r\n    check(searchResponse, {\r\n      \'search status is 200\': (r) => r.status === 200,\r\n      \'search response time < 200ms\': (r) => r.timings.duration < 200,\r\n    });\r\n\r\n    sleep(1);\r\n\r\n    // Create booking\r\n    let bookingPayload = JSON.stringify({\r\n      guestId: Math.floor(Math.random() * 1000) + 1,\r\n      roomId: Math.floor(Math.random() * 100) + 101,\r\n      checkInDate: \'2024-12-01\',\r\n      checkOutDate: \'2024-12-03\',\r\n      totalAmount: 299.99\r\n    });\r\n\r\n    let bookingResponse = http.post(`${BASE_URL}/api/bookings`, bookingPayload, {\r\n      headers: { \'Content-Type\': \'application/json\' },\r\n    });\r\n\r\n    check(bookingResponse, {\r\n      \'booking status is 201\': (r) => r.status === 201,\r\n      \'booking response time < 500ms\': (r) => r.timings.duration < 500,\r\n    });\r\n\r\n    sleep(1);\r\n  });\r\n}\r\n\r\n// Run with: k6 run k6-load-test.js\r\n*/\n'})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-and-when-not-to-use",children:"When to Use and When Not to Use"}),"\n",(0,s.jsx)(n.h3,{id:"use-load-testing-when",children:"Use Load Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Preparing for production deployment"}),"\n",(0,s.jsx)(n.li,{children:"Validating performance requirements"}),"\n",(0,s.jsx)(n.li,{children:"Identifying system bottlenecks"}),"\n",(0,s.jsx)(n.li,{children:"Planning capacity and scaling"}),"\n",(0,s.jsx)(n.li,{children:"Testing under realistic conditions"}),"\n",(0,s.jsx)(n.li,{children:"Verifying SLA compliance"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dont-use-load-testing-when",children:"Don't use Load Testing when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Testing individual components (use unit tests)"}),"\n",(0,s.jsx)(n.li,{children:"Early development stages"}),"\n",(0,s.jsx)(n.li,{children:"Testing business logic correctness"}),"\n",(0,s.jsx)(n.li,{children:"Limited testing environment resources"}),"\n",(0,s.jsx)(n.li,{children:"Functional issues still exist"}),"\n",(0,s.jsx)(n.li,{children:"Testing non-performance requirements"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons-and-alternatives",children:"Pros and Cons and Alternatives"}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Identifies performance bottlenecks"}),"\n",(0,s.jsx)(n.li,{children:"Validates scalability limits"}),"\n",(0,s.jsx)(n.li,{children:"Provides capacity planning data"}),"\n",(0,s.jsx)(n.li,{children:"Tests realistic user scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Prevents production performance issues"}),"\n",(0,s.jsx)(n.li,{children:"Helps optimize resource usage"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Requires significant infrastructure"}),"\n",(0,s.jsx)(n.li,{children:"Time-consuming to setup and run"}),"\n",(0,s.jsx)(n.li,{children:"Expensive to maintain"}),"\n",(0,s.jsx)(n.li,{children:"May not represent real user behavior"}),"\n",(0,s.jsx)(n.li,{children:"Can be complex to analyze results"}),"\n",(0,s.jsx)(n.li,{children:"Environment differences affect results"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Application Performance Monitoring (APM)"}),"\n",(0,s.jsx)(n.li,{children:"Synthetic monitoring"}),"\n",(0,s.jsx)(n.li,{children:"Profiling and benchmarking tools"}),"\n",(0,s.jsx)(n.li,{children:"Cloud-based load testing services"}),"\n",(0,s.jsx)(n.li,{children:"Manual performance testing"}),"\n",(0,s.jsx)(n.li,{children:"Chaos engineering practices"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);