"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[6104],{5047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Topics/Testing/24.2_EndToEndTesting","title":"End to End Testing","description":"End-to-end testing validates complete user workflows by testing the application from the user interface through all layers to the database. It simulates real user interactions to ensure the entire system works together correctly.","source":"@site/docs/Topics/05_Testing/24.2_EndToEndTesting.md","sourceDirName":"Topics/05_Testing","slug":"/Topics/Testing/end_to_end_testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/end_to_end_testing","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"testing","permalink":"/docusaurus_dotnet_overview/docs/tags/testing"},{"inline":true,"label":"end_to_end_testing","permalink":"/docusaurus_dotnet_overview/docs/tags/end-to-end-testing"},{"inline":true,"label":"quality","permalink":"/docusaurus_dotnet_overview/docs/tags/quality"}],"version":"current","frontMatter":{"slug":"end_to_end_testing","title":"End to End Testing","tags":["dotnet","testing","end_to_end_testing","quality"]},"sidebar":"tutorialSidebar","previous":{"title":"Integration Testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/integration_testing"},"next":{"title":"Load Testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/load_testing"}}');var a=t(4848),i=t(8453);const s={slug:"end_to_end_testing",title:"End to End Testing",tags:["dotnet","testing","end_to_end_testing","quality"]},o="End-to-End Testing",l={},d=[{value:"Official Definition/Standards",id:"official-definitionstandards",level:2},{value:"Setup and Usage (Tools, Packages, Test Runners)",id:"setup-and-usage-tools-packages-test-runners",level:2},{value:"Primary E2E Testing Tools:",id:"primary-e2e-testing-tools",level:3},{value:"Essential Packages:",id:"essential-packages",level:3},{value:"Test Infrastructure:",id:"test-infrastructure",level:3},{value:"Typical Test Architecture and Patterns",id:"typical-test-architecture-and-patterns",level:2},{value:"Common Patterns:",id:"common-patterns",level:3},{value:"Project Structure:",id:"project-structure",level:3},{value:"Example E2E Test Code",id:"example-e2e-test-code",level:2},{value:"When to Use and When Not to Use",id:"when-to-use-and-when-not-to-use",level:2},{value:"Use E2E Testing when:",id:"use-e2e-testing-when",level:3},{value:"Don&#39;t use E2E Testing when:",id:"dont-use-e2e-testing-when",level:3},{value:"Pros and Cons and Alternatives",id:"pros-and-cons-and-alternatives",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Alternatives:",id:"alternatives",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"end-to-end-testing",children:"End-to-End Testing"})}),"\n",(0,a.jsx)(n.p,{children:"End-to-end testing validates complete user workflows by testing the application from the user interface through all layers to the database. It simulates real user interactions to ensure the entire system works together correctly."}),"\n",(0,a.jsx)(n.h2,{id:"official-definitionstandards",children:"Official Definition/Standards"}),"\n",(0,a.jsx)(n.p,{children:"End-to-end testing is a methodology used to test whether the flow of an application is performing as designed from start to finish. It tests the complete user journey and validates that all integrated components work together in production-like environments."}),"\n",(0,a.jsx)(n.h2,{id:"setup-and-usage-tools-packages-test-runners",children:"Setup and Usage (Tools, Packages, Test Runners)"}),"\n",(0,a.jsx)(n.h3,{id:"primary-e2e-testing-tools",children:"Primary E2E Testing Tools:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Playwright"}),": Modern, fast, cross-browser automation (Microsoft)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Selenium WebDriver"}),": Mature, widely-supported browser automation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cypress"}),": JavaScript-based, developer-friendly testing framework"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SpecFlow"}),": BDD framework for .NET with Gherkin syntax"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"essential-packages",children:"Essential Packages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Playwright\r\ndotnet add package Microsoft.Playwright\r\ndotnet add package Microsoft.Playwright.NUnit\r\n\r\n# Selenium\r\ndotnet add package Selenium.WebDriver\r\ndotnet add package Selenium.WebDriver.ChromeDriver\r\ndotnet add package DotNetSeleniumExtras.WaitHelpers\r\n\r\n# SpecFlow for BDD\r\ndotnet add package SpecFlow\r\ndotnet add package SpecFlow.NUnit\n"})}),"\n",(0,a.jsx)(n.h3,{id:"test-infrastructure",children:"Test Infrastructure:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Real browsers (Chrome, Firefox, Edge, Safari)"}),"\n",(0,a.jsx)(n.li,{children:"Browser drivers and automation APIs"}),"\n",(0,a.jsx)(n.li,{children:"Test data management and cleanup"}),"\n",(0,a.jsx)(n.li,{children:"Screenshot and video capture"}),"\n",(0,a.jsx)(n.li,{children:"Cross-platform and mobile testing"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"typical-test-architecture-and-patterns",children:"Typical Test Architecture and Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Page Object Model"}),": Encapsulate page elements and actions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Page Factory"}),": Initialize page elements automatically"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test Data Builders"}),": Create test data consistently"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Base Test Classes"}),": Shared setup and teardown"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Fluent APIs"}),": Chain actions for readable tests"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"BDD Scenarios"}),": Given-When-Then structure"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"project-structure",children:"Project Structure:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"MyProject.E2ETests/\r\n\u251c\u2500\u2500 PageObjects/\r\n\u2502   \u251c\u2500\u2500 LoginPage.cs\r\n\u2502   \u251c\u2500\u2500 BookingPage.cs\r\n\u2502   \u2514\u2500\u2500 DashboardPage.cs\r\n\u251c\u2500\u2500 TestData/\r\n\u251c\u2500\u2500 Helpers/\r\n\u251c\u2500\u2500 Features/  # For BDD/SpecFlow\r\n\u2514\u2500\u2500 Tests/\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-e2e-test-code",children:"Example E2E Test Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Package references:\r\n// <PackageReference Include="Microsoft.Playwright" Version="1.40.0" />\r\n// <PackageReference Include="Microsoft.Playwright.NUnit" Version="1.40.0" />\r\n\r\nusing Microsoft.Playwright;\r\nusing Microsoft.Playwright.NUnit;\r\nusing NUnit.Framework;\r\n\r\n// Playwright E2E Tests\r\n[Parallelizable(ParallelScope.Self)]\r\n[TestFixture]\r\npublic class HotelBookingE2ETests : PageTest\r\n{\r\n    private string _baseUrl = "https://localhost:7001"; // Your app URL\r\n\r\n    [SetUp]\r\n    public async Task Setup()\r\n    {\r\n        // Configure browser options\r\n        await Context.Tracing.StartAsync(new()\r\n        {\r\n            Title = TestContext.CurrentContext.Test.Name,\r\n            Screenshots = true,\r\n            Snapshots = true,\r\n            Sources = true\r\n        });\r\n    }\r\n\r\n    [TearDown]\r\n    public async Task TearDown()\r\n    {\r\n        // Save trace for debugging failures\r\n        await Context.Tracing.StopAsync(new()\r\n        {\r\n            Path = Path.Combine(TestContext.CurrentContext.WorkDirectory,\r\n                   $"{TestContext.CurrentContext.Test.Name}.zip")\r\n        });\r\n    }\r\n\r\n    [Test]\r\n    public async Task CompleteBookingFlow_ValidUser_BookingSuccessful()\r\n    {\r\n        // Arrange - Navigate to home page\r\n        await Page.GotoAsync(_baseUrl);\r\n        await Page.WaitForLoadStateAsync(LoadState.NetworkIdle);\r\n\r\n        // Act & Assert - Check rooms availability\r\n        await Page.ClickAsync("[data-testid=\'check-availability\']");\r\n\r\n        await Page.FillAsync("[data-testid=\'checkin-date\']",\r\n            DateTime.Today.AddDays(7).ToString("yyyy-MM-dd"));\r\n        await Page.FillAsync("[data-testid=\'checkout-date\']",\r\n            DateTime.Today.AddDays(10).ToString("yyyy-MM-dd"));\r\n        await Page.SelectOptionAsync("[data-testid=\'guests\']", "2");\r\n\r\n        await Page.ClickAsync("[data-testid=\'search-rooms\']");\r\n        await Page.WaitForSelectorAsync("[data-testid=\'room-list\']");\r\n\r\n        // Verify rooms are displayed\r\n        var roomCards = await Page.Locator("[data-testid=\'room-card\']").CountAsync();\r\n        Assert.That(roomCards, Is.GreaterThan(0), "No rooms found for the selected dates");\r\n\r\n        // Select first available room\r\n        await Page.ClickAsync("[data-testid=\'room-card\']:first-child [data-testid=\'book-room\']");\r\n        await Page.WaitForURLAsync("**/booking/**");\r\n\r\n        // Fill guest information\r\n        await Page.FillAsync("[data-testid=\'first-name\']", "John");\r\n        await Page.FillAsync("[data-testid=\'last-name\']", "Doe");\r\n        await Page.FillAsync("[data-testid=\'email\']", "john.doe@example.com");\r\n        await Page.FillAsync("[data-testid=\'phone\']", "555-123-4567");\r\n\r\n        // Fill payment information\r\n        await Page.FillAsync("[data-testid=\'card-number\']", "4111111111111111");\r\n        await Page.FillAsync("[data-testid=\'expiry\']", "12/25");\r\n        await Page.FillAsync("[data-testid=\'cvv\']", "123");\r\n        await Page.FillAsync("[data-testid=\'cardholder-name\']", "John Doe");\r\n\r\n        // Submit booking\r\n        await Page.ClickAsync("[data-testid=\'submit-booking\']");\r\n\r\n        // Wait for confirmation page\r\n        await Page.WaitForURLAsync("**/booking/confirmation/**");\r\n        await Page.WaitForSelectorAsync("[data-testid=\'booking-confirmation\']");\r\n\r\n        // Assert booking confirmation\r\n        var confirmationMessage = await Page.TextContentAsync("[data-testid=\'confirmation-message\']");\r\n        Assert.That(confirmationMessage, Does.Contain("Your booking has been confirmed"));\r\n\r\n        var bookingNumber = await Page.TextContentAsync("[data-testid=\'booking-number\']");\r\n        Assert.That(bookingNumber, Is.Not.Empty, "Booking number should be displayed");\r\n\r\n        // Verify booking details\r\n        var guestName = await Page.TextContentAsync("[data-testid=\'guest-name\']");\r\n        Assert.That(guestName, Does.Contain("John Doe"));\r\n\r\n        var dates = await Page.TextContentAsync("[data-testid=\'booking-dates\']");\r\n        Assert.That(dates, Is.Not.Empty, "Booking dates should be displayed");\r\n    }\r\n\r\n    [Test]\r\n    public async Task LoginFlow_ValidCredentials_RedirectsToDashboard()\r\n    {\r\n        // Navigate to login page\r\n        await Page.GotoAsync($"{_baseUrl}/login");\r\n\r\n        // Fill login form\r\n        await Page.FillAsync("[data-testid=\'email\']", "admin@hotel.com");\r\n        await Page.FillAsync("[data-testid=\'password\']", "AdminPassword123!");\r\n\r\n        // Submit form\r\n        await Page.ClickAsync("[data-testid=\'login-submit\']");\r\n\r\n        // Wait for redirect to dashboard\r\n        await Page.WaitForURLAsync("**/dashboard");\r\n\r\n        // Verify dashboard elements\r\n        await Page.WaitForSelectorAsync("[data-testid=\'dashboard-header\']");\r\n        var welcomeMessage = await Page.TextContentAsync("[data-testid=\'welcome-message\']");\r\n        Assert.That(welcomeMessage, Does.Contain("Welcome"));\r\n    }\r\n\r\n    [Test]\r\n    public async Task SearchRooms_NoAvailableRooms_ShowsNoResultsMessage()\r\n    {\r\n        await Page.GotoAsync(_baseUrl);\r\n\r\n        // Search for rooms in the past (should have no results)\r\n        await Page.FillAsync("[data-testid=\'checkin-date\']",\r\n            DateTime.Today.AddDays(-10).ToString("yyyy-MM-dd"));\r\n        await Page.FillAsync("[data-testid=\'checkout-date\']",\r\n            DateTime.Today.AddDays(-5).ToString("yyyy-MM-dd"));\r\n\r\n        await Page.ClickAsync("[data-testid=\'search-rooms\']");\r\n\r\n        // Wait for no results message\r\n        await Page.WaitForSelectorAsync("[data-testid=\'no-rooms-message\']");\r\n        var message = await Page.TextContentAsync("[data-testid=\'no-rooms-message\']");\r\n        Assert.That(message, Does.Contain("No rooms available"));\r\n    }\r\n}\r\n\r\n// Page Object Model example\r\npublic class BookingPage\r\n{\r\n    private readonly IPage _page;\r\n\r\n    public BookingPage(IPage page)\r\n    {\r\n        _page = page;\r\n    }\r\n\r\n    // Locators\r\n    private ILocator FirstNameInput => _page.Locator("[data-testid=\'first-name\']");\r\n    private ILocator LastNameInput => _page.Locator("[data-testid=\'last-name\']");\r\n    private ILocator EmailInput => _page.Locator("[data-testid=\'email\']");\r\n    private ILocator SubmitButton => _page.Locator("[data-testid=\'submit-booking\']");\r\n    private ILocator ConfirmationMessage => _page.Locator("[data-testid=\'confirmation-message\']");\r\n\r\n    // Actions\r\n    public async Task FillGuestInformation(string firstName, string lastName, string email)\r\n    {\r\n        await FirstNameInput.FillAsync(firstName);\r\n        await LastNameInput.FillAsync(lastName);\r\n        await EmailInput.FillAsync(email);\r\n    }\r\n\r\n    public async Task SubmitBooking()\r\n    {\r\n        await SubmitButton.ClickAsync();\r\n        await _page.WaitForURLAsync("**/booking/confirmation/**");\r\n    }\r\n\r\n    public async Task<string> GetConfirmationMessage()\r\n    {\r\n        await ConfirmationMessage.WaitForAsync();\r\n        return await ConfirmationMessage.TextContentAsync() ?? string.Empty;\r\n    }\r\n}\r\n\r\n// Selenium WebDriver alternative example\r\npublic class SeleniumE2ETests\r\n{\r\n    private IWebDriver _driver = null!;\r\n    private readonly string _baseUrl = "https://localhost:7001";\r\n\r\n    [SetUp]\r\n    public void Setup()\r\n    {\r\n        var options = new ChromeOptions();\r\n        options.AddArguments("--headless"); // Run in headless mode for CI\r\n        _driver = new ChromeDriver(options);\r\n        _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\r\n    }\r\n\r\n    [TearDown]\r\n    public void TearDown()\r\n    {\r\n        _driver?.Quit();\r\n        _driver?.Dispose();\r\n    }\r\n\r\n    [Test]\r\n    public void BookRoom_ValidData_ShowsConfirmation()\r\n    {\r\n        // Navigate to home page\r\n        _driver.Navigate().GoToUrl(_baseUrl);\r\n\r\n        // Fill search form\r\n        var checkinDate = _driver.FindElement(By.CssSelector("[data-testid=\'checkin-date\']"));\r\n        checkinDate.SendKeys(DateTime.Today.AddDays(7).ToString("MM/dd/yyyy"));\r\n\r\n        var checkoutDate = _driver.FindElement(By.CssSelector("[data-testid=\'checkout-date\']"));\r\n        checkoutDate.SendKeys(DateTime.Today.AddDays(10).ToString("MM/dd/yyyy"));\r\n\r\n        // Search rooms\r\n        var searchButton = _driver.FindElement(By.CssSelector("[data-testid=\'search-rooms\']"));\r\n        searchButton.Click();\r\n\r\n        // Wait for rooms to load\r\n        var wait = new WebDriverWait(_driver, TimeSpan.FromSeconds(10));\r\n        wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("[data-testid=\'room-list\']")));\r\n\r\n        // Book first room\r\n        var bookButton = _driver.FindElement(By.CssSelector("[data-testid=\'room-card\']:first-child [data-testid=\'book-room\']"));\r\n        bookButton.Click();\r\n\r\n        // Fill booking form\r\n        _driver.FindElement(By.CssSelector("[data-testid=\'first-name\']")).SendKeys("Jane");\r\n        _driver.FindElement(By.CssSelector("[data-testid=\'last-name\']")).SendKeys("Smith");\r\n        _driver.FindElement(By.CssSelector("[data-testid=\'email\']")).SendKeys("jane@example.com");\r\n\r\n        // Submit booking\r\n        _driver.FindElement(By.CssSelector("[data-testid=\'submit-booking\']")).Click();\r\n\r\n        // Verify confirmation\r\n        wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("[data-testid=\'booking-confirmation\']")));\r\n        var confirmationText = _driver.FindElement(By.CssSelector("[data-testid=\'confirmation-message\']")).Text;\r\n\r\n        Assert.That(confirmationText, Does.Contain("confirmed"));\r\n    }\r\n}\r\n\r\n// BDD with SpecFlow example\r\n[Binding]\r\npublic class BookingSteps\r\n{\r\n    private readonly IPage _page;\r\n    private readonly BookingPage _bookingPage;\r\n\r\n    public BookingSteps(IPage page)\r\n    {\r\n        _page = page;\r\n        _bookingPage = new BookingPage(page);\r\n    }\r\n\r\n    [Given(@"I am on the hotel booking website")]\r\n    public async Task GivenIAmOnTheHotelBookingWebsite()\r\n    {\r\n        await _page.GotoAsync("https://localhost:7001");\r\n    }\r\n\r\n    [When(@"I search for rooms from ""(.*)"" to ""(.*)""")]\r\n    public async Task WhenISearchForRoomsFromTo(string checkin, string checkout)\r\n    {\r\n        await _page.FillAsync("[data-testid=\'checkin-date\']", checkin);\r\n        await _page.FillAsync("[data-testid=\'checkout-date\']", checkout);\r\n        await _page.ClickAsync("[data-testid=\'search-rooms\']");\r\n    }\r\n\r\n    [Then(@"I should see available rooms")]\r\n    public async Task ThenIShouldSeeAvailableRooms()\r\n    {\r\n        await _page.WaitForSelectorAsync("[data-testid=\'room-list\']");\r\n        var roomCount = await _page.Locator("[data-testid=\'room-card\']").CountAsync();\r\n        Assert.That(roomCount, Is.GreaterThan(0));\r\n    }\r\n}\r\n\r\n// Feature file (BookingFlow.feature)\r\n/*\r\nFeature: Hotel Room Booking\r\n    As a hotel guest\r\n    I want to book a room online\r\n    So that I can secure accommodation for my stay\r\n\r\nScenario: Successful room booking\r\n    Given I am on the hotel booking website\r\n    When I search for rooms from "2024-12-01" to "2024-12-03"\r\n    Then I should see available rooms\r\n    When I select the first available room\r\n    And I fill in my guest details\r\n    And I provide payment information\r\n    And I submit the booking\r\n    Then I should see a booking confirmation\r\n*/\n'})}),"\n",(0,a.jsx)(n.h2,{id:"when-to-use-and-when-not-to-use",children:"When to Use and When Not to Use"}),"\n",(0,a.jsx)(n.h3,{id:"use-e2e-testing-when",children:"Use E2E Testing when:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Testing critical user journeys and workflows"}),"\n",(0,a.jsx)(n.li,{children:"Validating cross-browser compatibility"}),"\n",(0,a.jsx)(n.li,{children:"Testing complete feature functionality"}),"\n",(0,a.jsx)(n.li,{children:"Verifying production-like scenarios"}),"\n",(0,a.jsx)(n.li,{children:"Testing user interface interactions"}),"\n",(0,a.jsx)(n.li,{children:"Validating third-party integrations"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"dont-use-e2e-testing-when",children:"Don't use E2E Testing when:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Testing individual business logic (use unit tests)"}),"\n",(0,a.jsx)(n.li,{children:"Fast feedback is needed during development"}),"\n",(0,a.jsx)(n.li,{children:"Testing internal APIs without UI"}),"\n",(0,a.jsx)(n.li,{children:"Limited CI/CD execution time"}),"\n",(0,a.jsx)(n.li,{children:"Testing detailed edge cases"}),"\n",(0,a.jsx)(n.li,{children:"Validating specific component behavior"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"pros-and-cons-and-alternatives",children:"Pros and Cons and Alternatives"}),"\n",(0,a.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tests real user scenarios"}),"\n",(0,a.jsx)(n.li,{children:"Validates entire application stack"}),"\n",(0,a.jsx)(n.li,{children:"Catches integration and UI issues"}),"\n",(0,a.jsx)(n.li,{children:"Provides high confidence in releases"}),"\n",(0,a.jsx)(n.li,{children:"Tests cross-browser compatibility"}),"\n",(0,a.jsx)(n.li,{children:"Validates user experience"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Slow execution and feedback"}),"\n",(0,a.jsx)(n.li,{children:"Brittle and hard to maintain"}),"\n",(0,a.jsx)(n.li,{children:"Expensive to run and maintain"}),"\n",(0,a.jsx)(n.li,{children:"Complex debugging and troubleshooting"}),"\n",(0,a.jsx)(n.li,{children:"Flaky due to timing and environment issues"}),"\n",(0,a.jsx)(n.li,{children:"Requires more infrastructure"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Visual regression testing (Percy, Chromatic)"}),"\n",(0,a.jsx)(n.li,{children:"Manual exploratory testing"}),"\n",(0,a.jsx)(n.li,{children:"Smoke testing for critical paths"}),"\n",(0,a.jsx)(n.li,{children:"User acceptance testing"}),"\n",(0,a.jsx)(n.li,{children:"Component testing with Storybook"}),"\n",(0,a.jsx)(n.li,{children:"API contract testing"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);