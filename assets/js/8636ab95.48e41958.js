"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[1509],{5374:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Topics/AdvancedTopics/GraphQL","title":"GraphQL","description":"53. GraphQL (HotChocolate)","source":"@site/docs/Topics/12_AdvancedTopics/53_GraphQL.md","sourceDirName":"Topics/12_AdvancedTopics","slug":"/Topics/AdvancedTopics/GraphQL","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/GraphQL","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":53,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"gRPC","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/gRPC"},"next":{"title":"EventSourcing","permalink":"/docusaurus_dotnet_overview/docs/Topics/AdvancedTopics/EventSourcing"}}');var t=r(4848),i=r(8453);const a={},s=void 0,c={},l=[{value:"53. GraphQL (HotChocolate)",id:"53-graphql-hotchocolate",level:2},{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Use Cases",id:"use-cases",level:3},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:3},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:3}];function d(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"53-graphql-hotchocolate",children:"53. GraphQL (HotChocolate)"}),"\n",(0,t.jsx)(e.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,t.jsx)(e.p,{children:"GraphQL is a query language and runtime for APIs that allows clients to request exactly the data they need. HotChocolate is a powerful .NET GraphQL server that provides a code-first approach to building GraphQL APIs, with features like real-time subscriptions, DataLoader for efficient data fetching, and comprehensive tooling."}),"\n",(0,t.jsx)(e.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,t.jsx)(e.p,{children:"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more."}),"\n",(0,t.jsx)(e.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Installation:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"dotnet add package HotChocolate.AspNetCore\r\ndotnet add package HotChocolate.Data.EntityFramework\r\ndotnet add package HotChocolate.Subscriptions.InMemory\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"GraphQL Schema Setup:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'// Program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add Entity Framework\r\nbuilder.Services.AddDbContext<HotelDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n// Add GraphQL\r\nbuilder.Services\r\n    .AddGraphQLServer()\r\n    .AddQueryType<Query>()\r\n    .AddMutationType<Mutation>()\r\n    .AddSubscriptionType<Subscription>()\r\n    .AddType<RoomType>()\r\n    .AddType<BookingType>()\r\n    .AddFiltering()\r\n    .AddSorting()\r\n    .AddProjections()\r\n    .AddInMemorySubscriptions();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure GraphQL endpoint\r\napp.MapGraphQL("/graphql");\r\n\r\n// Add GraphQL IDE (Banana Cake Pop)\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.MapGraphQLVoyager("/graphql-voyager");\r\n    app.MapBananaCakePop("/graphql-ui");\r\n}\r\n\r\napp.Run();\r\n\r\n// GraphQL/Types/RoomType.cs\r\npublic class RoomType : ObjectType<Room>\r\n{\r\n    protected override void Configure(IObjectTypeDescriptor<Room> descriptor)\r\n    {\r\n        descriptor.Description("Represents a hotel room");\r\n\r\n        descriptor\r\n            .Field(r => r.Id)\r\n            .Description("The unique identifier of the room");\r\n\r\n        descriptor\r\n            .Field(r => r.Bookings)\r\n            .Description("All bookings for this room")\r\n            .UseFiltering()\r\n            .UseSorting();\r\n\r\n        descriptor\r\n            .Field("availability")\r\n            .Type<NonNullType<BooleanType>>()\r\n            .Description("Current availability status")\r\n            .Resolve(context =>\r\n            {\r\n                var room = context.Parent<Room>();\r\n                var now = DateTime.UtcNow;\r\n                return !room.Bookings.Any(b =>\r\n                    b.CheckIn <= now && b.CheckOut >= now &&\r\n                    b.Status == "Confirmed");\r\n            });\r\n    }\r\n}\r\n\r\n// GraphQL/Types/BookingType.cs\r\npublic class BookingType : ObjectType<Booking>\r\n{\r\n    protected override void Configure(IObjectTypeDescriptor<Booking> descriptor)\r\n    {\r\n        descriptor.Description("Represents a hotel booking");\r\n\r\n        descriptor\r\n            .Field(b => b.Room)\r\n            .Description("The room associated with this booking");\r\n\r\n        descriptor\r\n            .Field("nights")\r\n            .Type<NonNullType<IntType>>()\r\n            .Description("Number of nights for this booking")\r\n            .Resolve(context =>\r\n            {\r\n                var booking = context.Parent<Booking>();\r\n                return (booking.CheckOut - booking.CheckIn).Days;\r\n            });\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Query Implementation:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'// GraphQL/Query.cs\r\n[UseProjection]\r\n[UseFiltering]\r\n[UseSorting]\r\npublic class Query\r\n{\r\n    public IQueryable<Room> GetRooms([Service] HotelDbContext context) =>\r\n        context.Rooms.AsQueryable();\r\n\r\n    public IQueryable<Booking> GetBookings([Service] HotelDbContext context) =>\r\n        context.Bookings.AsQueryable();\r\n\r\n    public async Task<Room?> GetRoomById(\r\n        int id,\r\n        [Service] HotelDbContext context,\r\n        CancellationToken cancellationToken) =>\r\n        await context.Rooms\r\n            .Include(r => r.Bookings)\r\n            .FirstOrDefaultAsync(r => r.Id == id, cancellationToken);\r\n\r\n    [UseFirstOrDefault]\r\n    [UseProjection]\r\n    public IQueryable<Booking> GetBookingById(\r\n        int id,\r\n        [Service] HotelDbContext context) =>\r\n        context.Bookings.Where(b => b.Id == id);\r\n\r\n    public async Task<IEnumerable<Room>> GetAvailableRooms(\r\n        DateTime checkIn,\r\n        DateTime checkOut,\r\n        [Service] HotelDbContext context,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        var conflictingBookings = await context.Bookings\r\n            .Where(b => b.CheckIn < checkOut && b.CheckOut > checkIn && b.Status == "Confirmed")\r\n            .Select(b => b.RoomId)\r\n            .ToListAsync(cancellationToken);\r\n\r\n        return await context.Rooms\r\n            .Where(r => !conflictingBookings.Contains(r.Id))\r\n            .ToListAsync(cancellationToken);\r\n    }\r\n\r\n    // DataLoader example for efficient N+1 problem resolution\r\n    public async Task<IEnumerable<Booking>> GetBookingsByCustomerId(\r\n        string customerId,\r\n        BookingsByCustomerDataLoader dataLoader,\r\n        CancellationToken cancellationToken) =>\r\n        await dataLoader.LoadAsync(customerId, cancellationToken);\r\n}\r\n\r\n// GraphQL/Mutation.cs\r\npublic class Mutation\r\n{\r\n    public async Task<CreateBookingPayload> CreateBooking(\r\n        CreateBookingInput input,\r\n        [Service] HotelDbContext context,\r\n        [Service] ITopicEventSender eventSender,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        // Validate input\r\n        if (input.CheckOut <= input.CheckIn)\r\n        {\r\n            return new CreateBookingPayload(\r\n                null,\r\n                new UserError("Check-out date must be after check-in date", "INVALID_DATES"));\r\n        }\r\n\r\n        // Check room availability\r\n        var room = await context.Rooms.FindAsync(input.RoomId, cancellationToken);\r\n        if (room == null)\r\n        {\r\n            return new CreateBookingPayload(\r\n                null,\r\n                new UserError("Room not found", "ROOM_NOT_FOUND"));\r\n        }\r\n\r\n        var conflictingBooking = await context.Bookings\r\n            .AnyAsync(b => b.RoomId == input.RoomId &&\r\n                          b.CheckIn < input.CheckOut &&\r\n                          b.CheckOut > input.CheckIn &&\r\n                          b.Status == "Confirmed", cancellationToken);\r\n\r\n        if (conflictingBooking)\r\n        {\r\n            return new CreateBookingPayload(\r\n                null,\r\n                new UserError("Room is not available for the selected dates", "ROOM_UNAVAILABLE"));\r\n        }\r\n\r\n        // Create booking\r\n        var booking = new Booking\r\n        {\r\n            CustomerId = input.CustomerId,\r\n            RoomId = input.RoomId,\r\n            CheckIn = input.CheckIn,\r\n            CheckOut = input.CheckOut,\r\n            Guests = input.Guests,\r\n            TotalAmount = room.PricePerNight * (input.CheckOut - input.CheckIn).Days,\r\n            Status = "Confirmed",\r\n            CreatedAt = DateTime.UtcNow\r\n        };\r\n\r\n        context.Bookings.Add(booking);\r\n        await context.SaveChangesAsync(cancellationToken);\r\n\r\n        // Send subscription notification\r\n        await eventSender.SendAsync(nameof(Subscription.OnBookingCreated), booking, cancellationToken);\r\n\r\n        return new CreateBookingPayload(booking, null);\r\n    }\r\n\r\n    public async Task<UpdateBookingPayload> UpdateBooking(\r\n        UpdateBookingInput input,\r\n        [Service] HotelDbContext context,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        var booking = await context.Bookings.FindAsync(input.Id, cancellationToken);\r\n        if (booking == null)\r\n        {\r\n            return new UpdateBookingPayload(\r\n                null,\r\n                new UserError("Booking not found", "BOOKING_NOT_FOUND"));\r\n        }\r\n\r\n        if (input.Status != null)\r\n        {\r\n            booking.Status = input.Status;\r\n        }\r\n\r\n        await context.SaveChangesAsync(cancellationToken);\r\n\r\n        return new UpdateBookingPayload(booking, null);\r\n    }\r\n}\r\n\r\n// GraphQL/Subscription.cs\r\npublic class Subscription\r\n{\r\n    [Subscribe]\r\n    [Topic(nameof(OnBookingCreated))]\r\n    public Booking OnBookingCreated([EventMessage] Booking booking) => booking;\r\n\r\n    [Subscribe]\r\n    public async IAsyncEnumerable<string> OnRoomStatusChange(\r\n        int roomId,\r\n        [Service] HotelDbContext context,\r\n        [EnumeratorCancellation] CancellationToken cancellationToken)\r\n    {\r\n        // Simulate real-time room status updates\r\n        while (!cancellationToken.IsCancellationRequested)\r\n        {\r\n            var room = await context.Rooms.FindAsync(roomId, cancellationToken);\r\n            if (room != null)\r\n            {\r\n                yield return $"Room {roomId} status: {(room.IsAvailable ? "Available" : "Occupied")}";\r\n            }\r\n\r\n            await Task.Delay(TimeSpan.FromSeconds(30), cancellationToken);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Input/Output Types:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:"// GraphQL/Inputs/CreateBookingInput.cs\r\npublic record CreateBookingInput(\r\n    string CustomerId,\r\n    int RoomId,\r\n    DateTime CheckIn,\r\n    DateTime CheckOut,\r\n    int Guests);\r\n\r\npublic record UpdateBookingInput(\r\n    int Id,\r\n    string? Status);\r\n\r\n// GraphQL/Payloads/BookingPayloads.cs\r\npublic record CreateBookingPayload(Booking? Booking, UserError? Error);\r\npublic record UpdateBookingPayload(Booking? Booking, UserError? Error);\r\n\r\npublic record UserError(string Message, string Code);\r\n\r\n// GraphQL/DataLoaders/BookingsByCustomerDataLoader.cs\r\npublic class BookingsByCustomerDataLoader : BatchDataLoader<string, Booking[]>\r\n{\r\n    private readonly IDbContextFactory<HotelDbContext> _dbContextFactory;\r\n\r\n    public BookingsByCustomerDataLoader(\r\n        IDbContextFactory<HotelDbContext> dbContextFactory,\r\n        IBatchScheduler batchScheduler,\r\n        DataLoaderOptions? options = null)\r\n        : base(batchScheduler, options)\r\n    {\r\n        _dbContextFactory = dbContextFactory;\r\n    }\r\n\r\n    protected override async Task<IReadOnlyDictionary<string, Booking[]>> LoadBatchAsync(\r\n        IReadOnlyList<string> keys,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        await using var context = _dbContextFactory.CreateDbContext();\r\n\r\n        var bookings = await context.Bookings\r\n            .Where(b => keys.Contains(b.CustomerId))\r\n            .ToListAsync(cancellationToken);\r\n\r\n        return bookings\r\n            .GroupBy(b => b.CustomerId)\r\n            .ToDictionary(g => g.Key, g => g.ToArray());\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Flexible APIs"}),": Clients request exactly the data they need"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Mobile Applications"}),": Reduce bandwidth usage with precise queries"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Microservices Aggregation"}),": Single endpoint aggregating multiple services"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Real-time Applications"}),": Subscriptions for live data updates"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Developer Experience"}),": Strong typing and excellent tooling"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"API Evolution"}),": Add fields without versioning"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Use GraphQL when:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Clients have diverse data requirements"}),"\n",(0,t.jsx)(e.li,{children:"Need to aggregate data from multiple sources"}),"\n",(0,t.jsx)(e.li,{children:"Building mobile or bandwidth-constrained applications"}),"\n",(0,t.jsx)(e.li,{children:"Want strong typing and schema validation"}),"\n",(0,t.jsx)(e.li,{children:"Need real-time subscriptions"}),"\n",(0,t.jsx)(e.li,{children:"Have complex relational data"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Consider alternatives when:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Simple CRUD operations"}),"\n",(0,t.jsx)(e.li,{children:"Caching is critical (REST caching is more mature)"}),"\n",(0,t.jsx)(e.li,{children:"File uploads are primary use case"}),"\n",(0,t.jsx)(e.li,{children:"Team lacks GraphQL expertise"}),"\n",(0,t.jsx)(e.li,{children:"Need simple HTTP status codes for errors"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,t.jsx)(e.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Apollo Server"}),": Popular GraphQL server for Node.js"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Hasura"}),": Auto-generated GraphQL APIs from databases"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"AWS AppSync"}),": Managed GraphQL service"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Relay"}),": Facebook's GraphQL client"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"GraphQL Yoga"}),": Fully-featured GraphQL server"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Strawberry Shake"}),": GraphQL client for .NET"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"pros",children:"Pros:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Single endpoint for all data needs"}),"\n",(0,t.jsx)(e.li,{children:"Strong typing and schema validation"}),"\n",(0,t.jsx)(e.li,{children:"Eliminates over-fetching and under-fetching"}),"\n",(0,t.jsx)(e.li,{children:"Excellent developer experience"}),"\n",(0,t.jsx)(e.li,{children:"Real-time subscriptions"}),"\n",(0,t.jsx)(e.li,{children:"Introspection and tooling"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"cons",children:"Cons:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Complexity in caching"}),"\n",(0,t.jsx)(e.li,{children:"Potential for expensive queries"}),"\n",(0,t.jsx)(e.li,{children:"Learning curve for teams"}),"\n",(0,t.jsx)(e.li,{children:"N+1 query problems if not handled properly"}),"\n",(0,t.jsx)(e.li,{children:"Less mature ecosystem than REST"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Sample GraphQL Queries:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-graphql",children:'# Query available rooms with specific fields\r\nquery GetAvailableRooms($checkIn: DateTime!, $checkOut: DateTime!) {\r\n  availableRooms(checkIn: $checkIn, checkOut: $checkOut) {\r\n    id\r\n    name\r\n    type\r\n    pricePerNight\r\n    maxOccupancy\r\n    amenities\r\n    availability\r\n  }\r\n}\r\n\r\n# Query rooms with filtering and sorting\r\nquery GetRoomsFiltered {\r\n  rooms(where: { pricePerNight: { lte: 200 } }, order: { pricePerNight: ASC }) {\r\n    id\r\n    name\r\n    pricePerNight\r\n    bookings(where: { status: { eq: "Confirmed" } }) {\r\n      id\r\n      checkIn\r\n      checkOut\r\n      nights\r\n    }\r\n  }\r\n}\r\n\r\n# Create booking mutation\r\nmutation CreateBooking($input: CreateBookingInput!) {\r\n  createBooking(input: $input) {\r\n    booking {\r\n      id\r\n      customerId\r\n      room {\r\n        name\r\n        type\r\n      }\r\n      checkIn\r\n      checkOut\r\n      totalAmount\r\n      status\r\n    }\r\n    error {\r\n      message\r\n      code\r\n    }\r\n  }\r\n}\r\n\r\n# Subscribe to booking events\r\nsubscription BookingCreated {\r\n  onBookingCreated {\r\n    id\r\n    customerId\r\n    room {\r\n      name\r\n    }\r\n    totalAmount\r\n    createdAt\r\n  }\r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var o=r(6540);const t={},i=o.createContext(t);function a(n){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);