"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[6369],{5845:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Topics/PerformanceAndScalability/Caching","title":"Caching","description":"Short Introduction and Official Definition","source":"@site/docs/Topics/06_PerformanceAndScalability/26_Caching.md","sourceDirName":"Topics/06_PerformanceAndScalability","slug":"/Topics/PerformanceAndScalability/caching","permalink":"/docusaurus_dotnet_overview/docs/Topics/PerformanceAndScalability/caching","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"performance","permalink":"/docusaurus_dotnet_overview/docs/tags/performance"},{"inline":true,"label":"optimization","permalink":"/docusaurus_dotnet_overview/docs/tags/optimization"},{"inline":true,"label":"pattern","permalink":"/docusaurus_dotnet_overview/docs/tags/pattern"},{"inline":true,"label":"redis","permalink":"/docusaurus_dotnet_overview/docs/tags/redis"},{"inline":true,"label":"response","permalink":"/docusaurus_dotnet_overview/docs/tags/response"},{"inline":true,"label":"in-memory","permalink":"/docusaurus_dotnet_overview/docs/tags/in-memory"}],"version":"current","sidebarPosition":26,"frontMatter":{"slug":"caching","title":"Caching","tags":["dotnet","performance","optimization","pattern","redis","response","in-memory"]},"sidebar":"tutorialSidebar","previous":{"title":"Load Testing","permalink":"/docusaurus_dotnet_overview/docs/Topics/Testing/load_testing"},"next":{"title":"Background Services","permalink":"/docusaurus_dotnet_overview/docs/Topics/PerformanceAndScalability/background_services"}}');var s=r(4848),a=r(8453);const t={slug:"caching",title:"Caching",tags:["dotnet","performance","optimization","pattern","redis","response","in-memory"]},c="Caching",o={},l=[{value:"Short Introduction and Official Definition",id:"short-introduction-and-official-definition",level:2},{value:"Official Definition:",id:"official-definition",level:2},{value:"Setup/Usage",id:"setupusage",level:2},{value:"In-Memory Caching Setup:",id:"in-memory-caching-setup",level:3},{value:"Distributed Caching with Redis:",id:"distributed-caching-with-redis",level:3},{value:"Response Caching:",id:"response-caching",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"When to Use:",id:"when-to-use",level:3},{value:"When Not to Use:",id:"when-not-to-use",level:3},{value:"Alternatives and Trade-offs",id:"alternatives-and-trade-offs",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Trade-offs:",id:"trade-offs",level:3},{value:"Sample Code and Commands",id:"sample-code-and-commands",level:2},{value:"In-Memory Cache Example:",id:"in-memory-cache-example",level:3},{value:"Distributed Cache Example:",id:"distributed-cache-example",level:3},{value:"Response Caching Example:",id:"response-caching-example",level:3},{value:"Redis Docker Command:",id:"redis-docker-command",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"caching",children:"Caching"})}),"\n",(0,s.jsx)(n.h2,{id:"short-introduction-and-official-definition",children:"Short Introduction and Official Definition"}),"\n",(0,s.jsx)(n.p,{children:"Caching is a performance optimization technique that stores frequently accessed data in high-speed storage layers to reduce latency and improve application responsiveness. In .NET Core, caching operates at multiple levels: in-memory for single-instance scenarios, distributed for multi-instance deployments, and response caching for HTTP responses."}),"\n",(0,s.jsx)(n.h2,{id:"official-definition",children:"Official Definition:"}),"\n",(0,s.jsx)(n.p,{children:"According to Microsoft documentation, caching in ASP.NET Core provides mechanisms to store data temporarily in memory or external stores to avoid expensive operations like database queries or complex computations."}),"\n",(0,s.jsx)(n.h2,{id:"setupusage",children:"Setup/Usage"}),"\n",(0,s.jsx)(n.h3,{id:"in-memory-caching-setup",children:"In-Memory Caching Setup:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Program.cs (.NET 8)\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add memory cache\r\nbuilder.Services.AddMemoryCache();\r\n\r\nvar app = builder.Build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"distributed-caching-with-redis",children:"Distributed Caching with Redis:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Program.cs\r\nbuilder.Services.AddStackExchangeRedisCache(options =>\r\n{\r\n    options.Configuration = "localhost:6379";\r\n});\r\n\r\n// Or with connection string from appsettings\r\nbuilder.Services.AddStackExchangeRedisCache(options =>\r\n{\r\n    options.Configuration = builder.Configuration.GetConnectionString("Redis");\r\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"response-caching",children:"Response Caching:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// Program.cs\r\nbuilder.Services.AddResponseCaching();\r\n\r\nvar app = builder.Build();\r\napp.UseResponseCaching();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"In-Memory Caching"}),": Single-server applications, session data, frequently accessed reference data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Distributed Caching"}),": Multi-server deployments, session state sharing, cache invalidation across instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response Caching"}),": Static or semi-static HTTP responses, API responses with predictable expiration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Query Results"}),": Expensive database operations, reporting data, lookup tables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Computed Values"}),": Complex calculations, image processing results, aggregated metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"External API Responses"}),": Third-party service calls, weather data, exchange rates"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use",children:"When to Use:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Data is expensive to generate or retrieve"}),"\n",(0,s.jsx)(n.li,{children:"Data doesn't change frequently"}),"\n",(0,s.jsx)(n.li,{children:"Application serves multiple concurrent users"}),"\n",(0,s.jsx)(n.li,{children:"Database or external service latency is high"}),"\n",(0,s.jsx)(n.li,{children:"Memory is available and cost-effective"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-not-to-use",children:"When Not to Use:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Data changes very frequently (real-time data)"}),"\n",(0,s.jsx)(n.li,{children:"Memory constraints are severe"}),"\n",(0,s.jsx)(n.li,{children:"Cache invalidation logic becomes too complex"}),"\n",(0,s.jsx)(n.li,{children:"Data consistency is critical and cache adds risk"}),"\n",(0,s.jsx)(n.li,{children:"Simple applications with minimal performance requirements"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"alternatives-and-trade-offs",children:"Alternatives and Trade-offs"}),"\n",(0,s.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database query optimization and indexing"}),"\n",(0,s.jsx)(n.li,{children:"CDN for static content"}),"\n",(0,s.jsx)(n.li,{children:"Application-level optimization"}),"\n",(0,s.jsx)(n.li,{children:"Horizontal scaling instead of caching"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"trade-offs",children:"Trade-offs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Memory usage vs performance gain"}),"\n",(0,s.jsx)(n.li,{children:"Data freshness vs speed"}),"\n",(0,s.jsx)(n.li,{children:"Implementation complexity vs benefits"}),"\n",(0,s.jsx)(n.li,{children:"Cost of cache infrastructure vs performance improvement"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"sample-code-and-commands",children:"Sample Code and Commands"}),"\n",(0,s.jsx)(n.h3,{id:"in-memory-cache-example",children:"In-Memory Cache Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Service using IMemoryCache\r\npublic class ProductService\r\n{\r\n    private readonly IMemoryCache _cache;\r\n    private readonly IProductRepository _repository;\r\n\r\n    public ProductService(IMemoryCache cache, IProductRepository repository)\r\n    {\r\n        _cache = cache;\r\n        _repository = repository;\r\n    }\r\n\r\n    public async Task<Product> GetProductAsync(int id)\r\n    {\r\n        string cacheKey = $"product_{id}";\r\n\r\n        if (_cache.TryGetValue(cacheKey, out Product cachedProduct))\r\n        {\r\n            return cachedProduct;\r\n        }\r\n\r\n        var product = await _repository.GetByIdAsync(id);\r\n\r\n        var cacheOptions = new MemoryCacheEntryOptions\r\n        {\r\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30),\r\n            SlidingExpiration = TimeSpan.FromMinutes(5),\r\n            Priority = CacheItemPriority.Normal\r\n        };\r\n\r\n        _cache.Set(cacheKey, product, cacheOptions);\r\n        return product;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"distributed-cache-example",children:"Distributed Cache Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Service using IDistributedCache\r\npublic class UserService\r\n{\r\n    private readonly IDistributedCache _cache;\r\n    private readonly IUserRepository _repository;\r\n\r\n    public UserService(IDistributedCache cache, IUserRepository repository)\r\n    {\r\n        _cache = cache;\r\n        _repository = repository;\r\n    }\r\n\r\n    public async Task<User> GetUserAsync(int userId)\r\n    {\r\n        string cacheKey = $"user_{userId}";\r\n\r\n        var cachedUser = await _cache.GetStringAsync(cacheKey);\r\n        if (cachedUser != null)\r\n        {\r\n            return JsonSerializer.Deserialize<User>(cachedUser);\r\n        }\r\n\r\n        var user = await _repository.GetByIdAsync(userId);\r\n\r\n        var options = new DistributedCacheEntryOptions\r\n        {\r\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromHours(1),\r\n            SlidingExpiration = TimeSpan.FromMinutes(20)\r\n        };\r\n\r\n        await _cache.SetStringAsync(cacheKey, JsonSerializer.Serialize(user), options);\r\n        return user;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"response-caching-example",children:"Response Caching Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Controller with response caching\r\n[ApiController]\r\n[Route("api/[controller]")]\r\npublic class ProductsController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [ResponseCache(Duration = 300, Location = ResponseCacheLocation.Any)]\r\n    public async Task<IActionResult> GetProducts()\r\n    {\r\n        var products = await _productService.GetAllAsync();\r\n        return Ok(products);\r\n    }\r\n\r\n    [HttpGet("{id}")]\r\n    [ResponseCache(Duration = 60, VaryByQueryKeys = new[] { "id" })]\r\n    public async Task<IActionResult> GetProduct(int id)\r\n    {\r\n        var product = await _productService.GetByIdAsync(id);\r\n        return Ok(product);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"redis-docker-command",children:"Redis Docker Command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Start Redis container\r\ndocker run --name redis-cache -p 6379:6379 -d redis:latest\r\n\r\n# Connect to Redis CLI\r\ndocker exec -it redis-cache redis-cli\r\n\r\n# Test connection\r\nPING\r\n# Should return PONG\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var i=r(6540);const s={},a=i.createContext(s);function t(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);