"use strict";(self.webpackChunkdotnet_overview=self.webpackChunkdotnet_overview||[]).push([[8568],{2380:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Topics/DevOps_and_CI_CD/GitHubActions","title":"GitHub Actions","description":"Short Introduction","source":"@site/docs/Topics/09_DevOps_and_CI_CD/41_GitHubActions.md","sourceDirName":"Topics/09_DevOps_and_CI_CD","slug":"/Topics/DevOps_and_CI_CD/github_actions","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/github_actions","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"dotnet","permalink":"/docusaurus_dotnet_overview/docs/tags/dotnet"},{"inline":true,"label":"github","permalink":"/docusaurus_dotnet_overview/docs/tags/github"},{"inline":true,"label":"actions","permalink":"/docusaurus_dotnet_overview/docs/tags/actions"},{"inline":true,"label":"cicd","permalink":"/docusaurus_dotnet_overview/docs/tags/cicd"},{"inline":true,"label":"yaml","permalink":"/docusaurus_dotnet_overview/docs/tags/yaml"}],"version":"current","sidebarPosition":41,"frontMatter":{"slug":"github_actions","title":"GitHub Actions","tags":["dotnet","github","actions","cicd","yaml"]},"sidebar":"tutorialSidebar","previous":{"title":"Azure DevOps","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/azure_devops"},"next":{"title":"Application Insights (Observability + Instrumentation)","permalink":"/docusaurus_dotnet_overview/docs/Topics/DevOps_and_CI_CD/application_insights"}}');var s=r(4848),i=r(8453);const o={slug:"github_actions",title:"GitHub Actions",tags:["dotnet","github","actions","cicd","yaml"]},a="GitHub Actions",l={},u=[{value:"Short Introduction",id:"short-introduction",level:2},{value:"Official Definition",id:"official-definition",level:2},{value:"Setup/Usage with .NET 8+ Code",id:"setupusage-with-net-8-code",level:2},{value:"Basic .NET Workflow",id:"basic-net-workflow",level:3},{value:"Advanced Multi-Environment Workflow",id:"advanced-multi-environment-workflow",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"When to Use vs When Not to Use",id:"when-to-use-vs-when-not-to-use",level:2},{value:"Use GitHub Actions when",id:"use-github-actions-when",level:3},{value:"Consider alternatives when",id:"consider-alternatives-when",level:3},{value:"Market Alternatives &amp; Pros/Cons",id:"market-alternatives--proscons",level:2},{value:"Alternatives:",id:"alternatives",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Complete Runnable Sample",id:"complete-runnable-sample",level:2},{value:"Production-Ready Workflow with Multiple Environments",id:"production-ready-workflow-with-multiple-environments",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"github-actions",children:"GitHub Actions"})}),"\n",(0,s.jsx)(n.h2,{id:"short-introduction",children:"Short Introduction"}),"\n",(0,s.jsx)(n.p,{children:"GitHub Actions is a CI/CD platform integrated directly into GitHub repositories, allowing developers to automate software workflows including building, testing, and deploying applications. It uses YAML-based workflow files and provides a marketplace of pre-built actions for common development tasks."}),"\n",(0,s.jsx)(n.h2,{id:"official-definition",children:"Official Definition"}),"\n",(0,s.jsx)(n.p,{children:"GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production."}),"\n",(0,s.jsx)(n.h2,{id:"setupusage-with-net-8-code",children:"Setup/Usage with .NET 8+ Code"}),"\n",(0,s.jsx)(n.h3,{id:"basic-net-workflow",children:"Basic .NET Workflow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/dotnet.yml\r\nname: .NET Core CI/CD\r\n\r\non:\r\n  push:\r\n    branches: [main, develop]\r\n  pull_request:\r\n    branches: [main]\r\n\r\nenv:\r\n  DOTNET_VERSION: "8.0.x"\r\n  AZURE_WEBAPP_NAME: "hotel-management-api"\r\n  AZURE_WEBAPP_PACKAGE_PATH: "./published"\r\n\r\njobs:\r\n  build-and-test:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n\r\n      - name: Setup .NET\r\n        uses: actions/setup-dotnet@v3\r\n        with:\r\n          dotnet-version: ${{ env.DOTNET_VERSION }}\r\n\r\n      - name: Cache NuGet packages\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ~/.nuget/packages\r\n          key: ${{ runner.os }}-nuget-${{ hashFiles(\'**/*.csproj\') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-nuget-\r\n\r\n      - name: Restore dependencies\r\n        run: dotnet restore\r\n\r\n      - name: Build application\r\n        run: dotnet build --no-restore --configuration Release\r\n\r\n      - name: Run unit tests\r\n        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage\r\n\r\n      - name: Upload coverage reports\r\n        uses: codecov/codecov-action@v3\r\n        with:\r\n          directory: ./coverage\r\n          flags: unittests\r\n          name: codecov-umbrella\r\n\r\n      - name: Publish application\r\n        run: dotnet publish --no-build --configuration Release --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}\r\n\r\n      - name: Upload build artifacts\r\n        uses: actions/upload-artifact@v3\r\n        with:\r\n          name: webapp\r\n          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}\r\n\r\n  deploy:\r\n    needs: build-and-test\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == \'refs/heads/main\' && github.event_name == \'push\'\r\n    environment: production\r\n\r\n    steps:\r\n      - name: Download build artifacts\r\n        uses: actions/download-artifact@v3\r\n        with:\r\n          name: webapp\r\n          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}\r\n\r\n      - name: Deploy to Azure Web App\r\n        uses: azure/webapps-deploy@v2\r\n        with:\r\n          app-name: ${{ env.AZURE_WEBAPP_NAME }}\r\n          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}\r\n          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-multi-environment-workflow",children:"Advanced Multi-Environment Workflow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/advanced-pipeline.yml\r\nname: Advanced CI/CD Pipeline\r\n\r\non:\r\n  push:\r\n    branches: [main, develop, "release/**"]\r\n  pull_request:\r\n    branches: [main, develop]\r\n\r\nenv:\r\n  REGISTRY: ghcr.io\r\n  IMAGE_NAME: ${{ github.repository }}\r\n  DOTNET_VERSION: "8.0.x"\r\n\r\njobs:\r\n  security-scan:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n\r\n      - name: Run Trivy vulnerability scanner\r\n        uses: aquasecurity/trivy-action@master\r\n        with:\r\n          scan-type: "fs"\r\n          scan-ref: "."\r\n          format: "sarif"\r\n          output: "trivy-results.sarif"\r\n\r\n      - name: Upload Trivy scan results\r\n        uses: github/codeql-action/upload-sarif@v2\r\n        with:\r\n          sarif_file: "trivy-results.sarif"\r\n\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    needs: security-scan\r\n    outputs:\r\n      version: ${{ steps.version.outputs.version }}\r\n\r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n\r\n      - name: Setup .NET\r\n        uses: actions/setup-dotnet@v3\r\n        with:\r\n          dotnet-version: ${{ env.DOTNET_VERSION }}\r\n\r\n      - name: Generate version\r\n        id: version\r\n        run: |\r\n          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then\r\n            VERSION="1.0.$GITHUB_RUN_NUMBER"\r\n          elif [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then\r\n            VERSION="1.0.$GITHUB_RUN_NUMBER-dev"\r\n          else\r\n            VERSION="1.0.$GITHUB_RUN_NUMBER-${{ github.sha }}"\r\n          fi\r\n          echo "version=$VERSION" >> $GITHUB_OUTPUT\r\n          echo "Generated version: $VERSION"\r\n\r\n      - name: Restore dependencies\r\n        run: dotnet restore\r\n\r\n      - name: Build application\r\n        run: dotnet build --no-restore --configuration Release -p:Version=${{ steps.version.outputs.version }}\r\n\r\n      - name: Run tests with coverage\r\n        run: |\r\n          dotnet test --no-build --configuration Release \\\r\n            --collect:"XPlat Code Coverage" \\\r\n            --results-directory ./TestResults/ \\\r\n            --logger "trx;LogFileName=test-results.trx" \\\r\n            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover\r\n\r\n      - name: Generate test report\r\n        uses: dorny/test-reporter@v1\r\n        if: success() || failure()\r\n        with:\r\n          name: .NET Tests\r\n          path: "./TestResults/*.trx"\r\n          reporter: dotnet-trx\r\n\r\n      - name: Publish test coverage\r\n        uses: codecov/codecov-action@v3\r\n        with:\r\n          directory: ./TestResults\r\n          flags: unittests\r\n\r\n      - name: Build Docker image\r\n        run: |\r\n          docker build . --file Dockerfile \\\r\n            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \\\r\n            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \\\r\n            --build-arg VERSION=${{ steps.version.outputs.version }}\r\n\r\n      - name: Log in to Container Registry\r\n        uses: docker/login-action@v2\r\n        with:\r\n          registry: ${{ env.REGISTRY }}\r\n          username: ${{ github.actor }}\r\n          password: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n      - name: Push Docker image\r\n        run: |\r\n          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\r\n          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\r\n\r\n  deploy-dev:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == \'refs/heads/develop\'\r\n    environment: development\r\n\r\n    steps:\r\n      - name: Deploy to Development\r\n        run: |\r\n          echo "Deploying version ${{ needs.build.outputs.version }} to development"\r\n          # Add actual deployment steps here\r\n\r\n  deploy-staging:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    if: startsWith(github.ref, \'refs/heads/release/\')\r\n    environment: staging\r\n\r\n    steps:\r\n      - name: Deploy to Staging\r\n        run: |\r\n          echo "Deploying version ${{ needs.build.outputs.version }} to staging"\r\n          # Add actual deployment steps here\r\n\r\n  deploy-production:\r\n    needs: build\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == \'refs/heads/main\'\r\n    environment: production\r\n\r\n    steps:\r\n      - name: Deploy to Production\r\n        uses: azure/webapps-deploy@v2\r\n        with:\r\n          app-name: "hotel-management-api-prod"\r\n          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PROD }}\r\n          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}"\r\n\r\n      - name: Create GitHub Release\r\n        uses: actions/create-release@v1\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n        with:\r\n          tag_name: v${{ needs.build.outputs.version }}\r\n          release_name: Release v${{ needs.build.outputs.version }}\r\n          body: |\r\n            Automated release of version ${{ needs.build.outputs.version }}\r\n\r\n            Changes in this release:\r\n            ${{ github.event.head_commit.message }}\r\n          draft: false\r\n          prerelease: false\n'})}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open Source Projects"}),": Free CI/CD for public repositories"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitHub-Centric Development"}),": Teams already using GitHub for source control"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simple to Medium Complexity Pipelines"}),": Straightforward build, test, deploy workflows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container-Based Deployments"}),": Excellent Docker and container registry integrations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Community-Driven Solutions"}),": Large marketplace of community actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cost-Effective CI/CD"}),": Generous free tier for both public and private repos"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-vs-when-not-to-use",children:"When to Use vs When Not to Use"}),"\n",(0,s.jsx)(n.h3,{id:"use-github-actions-when",children:"Use GitHub Actions when"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Source code is hosted on GitHub"}),"\n",(0,s.jsx)(n.li,{children:"Need cost-effective CI/CD solution"}),"\n",(0,s.jsx)(n.li,{children:"Want integrated pull request workflows"}),"\n",(0,s.jsx)(n.li,{children:"Building containerized applications"}),"\n",(0,s.jsx)(n.li,{children:"Working with open source projects"}),"\n",(0,s.jsx)(n.li,{children:"Need simple, maintainable workflows"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"consider-alternatives-when",children:"Consider alternatives when"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Using other source control systems (GitLab, Azure Repos)"}),"\n",(0,s.jsx)(n.li,{children:"Need advanced enterprise features"}),"\n",(0,s.jsx)(n.li,{children:"Require on-premises CI/CD solutions"}),"\n",(0,s.jsx)(n.li,{children:"Building extremely complex deployment pipelines"}),"\n",(0,s.jsx)(n.li,{children:"Need tighter integration with Microsoft ecosystem"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"market-alternatives--proscons",children:"Market Alternatives & Pros/Cons"}),"\n",(0,s.jsx)(n.h3,{id:"alternatives",children:"Alternatives:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Azure DevOps"}),": More enterprise features, Microsoft integration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitLab CI/CD"}),": Integrated with GitLab, comprehensive DevOps platform"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CircleCI"}),": Fast builds, good Docker support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Jenkins"}),": Self-hosted, highly customizable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Travis CI"}),": Simple setup, good for open source"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AWS CodePipeline"}),": Native AWS integration"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Deeply integrated with GitHub"}),"\n",(0,s.jsx)(n.li,{children:"Large marketplace of community actions"}),"\n",(0,s.jsx)(n.li,{children:"Free for public repositories, generous free tier for private"}),"\n",(0,s.jsx)(n.li,{children:"Simple YAML syntax"}),"\n",(0,s.jsx)(n.li,{children:"Excellent container and cloud integrations"}),"\n",(0,s.jsx)(n.li,{children:"Built-in security scanning capabilities"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Limited to GitHub ecosystem"}),"\n",(0,s.jsx)(n.li,{children:"Can become expensive for large private repositories"}),"\n",(0,s.jsx)(n.li,{children:"Less enterprise features compared to dedicated platforms"}),"\n",(0,s.jsx)(n.li,{children:"Runner limitations for compute-intensive tasks"}),"\n",(0,s.jsx)(n.li,{children:"Fewer advanced deployment patterns"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"complete-runnable-sample",children:"Complete Runnable Sample"}),"\n",(0,s.jsx)(n.h3,{id:"production-ready-workflow-with-multiple-environments",children:"Production-Ready Workflow with Multiple Environments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/production-pipeline.yml\r\nname: Production Pipeline\r\n\r\non:\r\n  push:\r\n    branches: [ main, develop ]\r\n    tags: [ 'v*' ]\r\n  pull_request:\r\n    branches: [ main, develop ]\r\n\r\nenv:\r\n  DOTNET_VERSION: '8.0.x'\r\n  REGISTRY: ghcr.io\r\n  IMAGE_NAME: hotel-management-api\r\n  AZURE_RESOURCE_GROUP: rg-hotel-management\r\n\r\njobs:\r\n  validate:\r\n    name: Code Quality & Security\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@v4\r\n      with:\r\n        fetch-depth: 0\r\n\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: ${{ env.DOTNET_VERSION }}\r\n\r\n    - name: Restore dependencies\r\n      run: dotnet restore\r\n\r\n    - name: Format check\r\n      run: dotnet format --verify-no-changes --verbosity diagnostic\r\n\r\n    - name: Lint with EditorConfig\r\n      run: dotnet format --verify-no-changes --include-generated\r\n\r\n    - name: Security scan with Snyk\r\n      uses: snyk/actions/dotnet@master\r\n      env:\r\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\r\n      with:\r\n        args: --severity-threshold=high\r\n\r\n    - name: OWASP Dependency Check\r\n      uses: dependency-check/Dependency-Check_Action@main\r\n      with:\r\n        project: 'hotel-management'\r\n        path: '.'\r\n        format: 'ALL'\r\n\r\n    - name: Upload OWASP results\r\n      uses: github/codeql-action/upload-sarif@v2\r\n      with:\r\n        sarif_file: reports/dependency-check-report.sarif\r\n\r\n  build-and-test:\r\n    name: Build & Test\r\n    runs-on: ubuntu-latest\r\n    needs: validate\r\n\r\n    strategy:\r\n      matrix:\r\n        os: [ubuntu-latest, windows-latest]\r\n\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@v4\r\n\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: ${{ env.DOTNET_VERSION }}\r\n\r\n    - name: Cache dependencies\r\n      uses: actions/cache@v3\r\n      with:\r\n        path: ~/.nuget/packages\r\n        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}\r\n\r\n    - name: Restore\r\n      run: dotnet restore\r\n\r\n    - name: Build\r\n      run: dotnet build --no-restore --configuration Release\r\n\r\n    - name: Test\r\n      run: |\r\n        dotnet test --no-build --configuration Release \\\r\n          --collect:\"XPlat Code Coverage\" \\\r\n          --results-directory ./coverage \\\r\n          --logger \"trx;LogFileName=test-results.trx\" \\\r\n          --logger \"html;LogFileName=test-results.html\" \\\r\n          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover\r\n\r\n    - name: Upload test results\r\n      uses: dorny/test-reporter@v1\r\n      if: success() || failure()\r\n      with:\r\n        name: Test Results (${{ matrix.os }})\r\n        path: './coverage/*.trx'\r\n        reporter: dotnet-trx\r\n\r\n    - name: Code Coverage Summary\r\n      uses: irongut/CodeCoverageSummary@v1.3.0\r\n      with:\r\n        filename: ./coverage/**/coverage.opencover.xml\r\n        badge: true\r\n        format: markdown\r\n        output: both\r\n\r\n    - name: Add Coverage PR Comment\r\n      uses: actions/github-script@v6\r\n      if: github.event_name == 'pull_request'\r\n      with:\r\n        script: |\r\n          const fs = require('fs');\r\n          const coverage = fs.readFileSync('code-coverage-results.md', 'utf8');\r\n          github.rest.issues.createComment({\r\n            issue_number: context.issue.number,\r\n            owner: context.repo.owner,\r\n            repo: context.repo.repo,\r\n            body: coverage\r\n          });\r\n\r\n  docker-build:\r\n    name: Build Docker Image\r\n    runs-on: ubuntu-latest\r\n    needs: build-and-test\r\n    if: github.event_name != 'pull_request'\r\n\r\n    outputs:\r\n      image-tag: ${{ steps.meta.outputs.tags }}\r\n      image-digest: ${{ steps.build.outputs.digest }}\r\n\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@v4\r\n\r\n    - name: Set up Docker Buildx\r\n      uses: docker/setup-buildx-action@v2\r\n\r\n    - name: Log in to Container Registry\r\n      uses: docker/login-action@v2\r\n      with:\r\n        registry: ${{ env.REGISTRY }}\r\n        username: ${{ github.actor }}\r\n        password: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n    - name: Extract metadata\r\n      id: meta\r\n      uses: docker/metadata-action@v4\r\n      with:\r\n        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}\r\n        tags: |\r\n          type=ref,event=branch\r\n          type=ref,event=pr\r\n          type=semver,pattern={{version}}\r\n          type=semver,pattern={{major}}.{{minor}}\r\n          type=sha,prefix={{branch}}-\r\n\r\n    - name: Build and push\r\n      id: build\r\n      uses: docker/build-push-action@v4\r\n      with:\r\n        context: .\r\n        push: true\r\n        tags: ${{ steps.meta.outputs.tags }}\r\n        labels: ${{ steps.meta.outputs.labels }}\r\n        cache-from: type=gha\r\n        cache-to: type=gha,mode=max\r\n        platforms: linux/amd64,linux/arm64\r\n\r\n    - name: Sign container image\r\n      uses: sigstore/cosign-installer@v3\r\n      with:\r\n        cosign-release: 'v2.1.1'\r\n    - run: |\r\n        cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}\r\n\r\n  deploy-dev:\r\n    name: Deploy to Development\r\n    needs: docker-build\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == 'refs/heads/develop'\r\n    environment:\r\n      name: development\r\n      url: https://hotel-management-dev.azurewebsites.net\r\n\r\n    steps:\r\n    - name: Azure Login\r\n      uses: azure/login@v1\r\n      with:\r\n        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}\r\n\r\n    - name: Deploy to Container App\r\n      uses: azure/container-apps-deploy-action@v1\r\n      with:\r\n        appSourcePath: ${{ github.workspace }}\r\n        acrName: hotelmanagementacr\r\n        containerAppName: hotel-management-dev\r\n        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}-dev\r\n        imageToDeploy: ${{ needs.docker-build.outputs.image-tag }}\r\n\r\n  deploy-prod:\r\n    name: Deploy to Production\r\n    needs: docker-build\r\n    runs-on: ubuntu-latest\r\n    if: github.ref == 'refs/heads/main'\r\n    environment:\r\n      name: production\r\n      url: https://hotel-management.azurewebsites.net\r\n\r\n    steps:\r\n    - name: Azure Login\r\n      uses: azure/login@v1\r\n      with:\r\nawr\r\n        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}\r\n\r\n    - name: Deploy to Container App\r\n      uses: azure/container-apps-deploy-action@v1\r\n      with:\r\n        appSourcePath: ${{ github.workspace }}\r\n        acrName: hotelmanagementacr\r\n        containerAppName: hotel-management-prod\r\n        resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}-prod\r\n        imageToDeploy: ${{ needs.docker-build.outputs.image-tag }}\r\n\r\n    - name: Create Release\r\n      uses: actions/create-release@v1\r\n      env:\r\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r\n      with:\r\n        tag_name: ${{ github.run_number }}\r\n        release_name: Release ${{ github.run_number }}\r\n        body: |\r\n          \ud83d\ude80 Production deployment successful!\r\n\r\n          **Image:** `${{ needs.docker-build.outputs.image-tag }}`\r\n          **Digest:** `${{ needs.docker-build.outputs.image-digest }}`\r\n\r\n          **Changes:**\r\n          ${{ github.event.head_commit.message }}\r\n        draft: false\r\n        prerelease: false\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);